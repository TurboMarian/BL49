
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000c26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001903  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  000027b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b8a  00000000  00000000  000038dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00006468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aaba  00000000  00000000  00006998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090c  00000000  00000000  00011452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00011d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004841  00000000  00000000  00011ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ad 30       	cpi	r26, 0x0D	; 13
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
  9c:	0c 94 d7 05 	jmp	0xbae	; 0xbae <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <adc_init>:
	ADCSRA |= (1<<ADSC);		// start single conversion
	while(ADCSRA & (1<<ADSC));	// wait till done
	
	temp1 = ADC * (5.0/1024)*1000.0/25;	
	return temp1;
}
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	8b e7       	ldi	r24, 0x7B	; 123
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e7       	ldi	r18, 0x7B	; 123
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	20 62       	ori	r18, 0x20	; 32
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	8c e7       	ldi	r24, 0x7C	; 124
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	20 e4       	ldi	r18, 0x40	; 64
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	8a e7       	ldi	r24, 0x7A	; 122
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2a e7       	ldi	r18, 0x7A	; 122
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	27 68       	ori	r18, 0x87	; 135
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	00 00       	nop
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <adc_ad12v>:

uint16_t adc_ad12v (void)	// adc channel 5
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX2)|(1 << MUX0);			// select channel
  ea:	8c e7       	ldi	r24, 0x7C	; 124
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 e4       	ldi	r18, 0x45	; 69
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
  f4:	8a e7       	ldi	r24, 0x7A	; 122
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2a e7       	ldi	r18, 0x7A	; 122
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	20 64       	ori	r18, 0x40	; 64
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 106:	00 00       	nop
 108:	8a e7       	ldi	r24, 0x7A	; 122
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	80 74       	andi	r24, 0x40	; 64
 116:	99 27       	eor	r25, r25
 118:	89 2b       	or	r24, r25
 11a:	b1 f7       	brne	.-20     	; 0x108 <adc_ad12v+0x26>
	return ADC;
 11c:	88 e7       	ldi	r24, 0x78	; 120
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <adc_reference>:


uint16_t adc_reference (void)	// adc channel 3
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX1)|(1 << MUX0);			// select channel
 134:	8c e7       	ldi	r24, 0x7C	; 124
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	23 e4       	ldi	r18, 0x43	; 67
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 13e:	8a e7       	ldi	r24, 0x7A	; 122
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2a e7       	ldi	r18, 0x7A	; 122
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 64       	ori	r18, 0x40	; 64
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 150:	00 00       	nop
 152:	8a e7       	ldi	r24, 0x7A	; 122
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 74       	andi	r24, 0x40	; 64
 160:	99 27       	eor	r25, r25
 162:	89 2b       	or	r24, r25
 164:	b1 f7       	brne	.-20     	; 0x152 <adc_reference+0x26>
	return ADC;
 166:	88 e7       	ldi	r24, 0x78	; 120
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <adc_ua>:

uint16_t adc_ua (void)	// adc channel 8
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3);			// select channel
 17e:	8c e7       	ldi	r24, 0x7C	; 124
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	28 e4       	ldi	r18, 0x48	; 72
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 188:	8a e7       	ldi	r24, 0x7A	; 122
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2a e7       	ldi	r18, 0x7A	; 122
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 64       	ori	r18, 0x40	; 64
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 19a:	00 00       	nop
 19c:	8a e7       	ldi	r24, 0x7A	; 122
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 74       	andi	r24, 0x40	; 64
 1aa:	99 27       	eor	r25, r25
 1ac:	89 2b       	or	r24, r25
 1ae:	b1 f7       	brne	.-20     	; 0x19c <adc_ua+0x26>
	return ADC;
 1b0:	88 e7       	ldi	r24, 0x78	; 120
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <adc_ur>:

uint16_t adc_ur (void)	// adc channel 9
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3)|(1 << MUX0);			// select channel
 1c8:	8c e7       	ldi	r24, 0x7C	; 124
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	29 e4       	ldi	r18, 0x49	; 73
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 1d2:	8a e7       	ldi	r24, 0x7A	; 122
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	2a e7       	ldi	r18, 0x7A	; 122
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	20 64       	ori	r18, 0x40	; 64
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 1e4:	00 00       	nop
 1e6:	8a e7       	ldi	r24, 0x7A	; 122
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 74       	andi	r24, 0x40	; 64
 1f4:	99 27       	eor	r25, r25
 1f6:	89 2b       	or	r24, r25
 1f8:	b1 f7       	brne	.-20     	; 0x1e6 <adc_ur+0x26>
	return ADC;
 1fa:	88 e7       	ldi	r24, 0x78	; 120
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <can_clear_all_mob+0x6>
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	19 82       	std	Y+1, r1	; 0x01
 218:	1d c0       	rjmp	.+58     	; 0x254 <can_clear_all_mob+0x4a>
 21a:	8d ee       	ldi	r24, 0xED	; 237
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	22 95       	swap	r18
 222:	20 7f       	andi	r18, 0xF0	; 240
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
 228:	8e ee       	ldi	r24, 0xEE	; 238
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9b 83       	std	Y+3, r25	; 0x03
 22e:	8a 83       	std	Y+2, r24	; 0x02
 230:	09 c0       	rjmp	.+18     	; 0x244 <can_clear_all_mob+0x3a>
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	9b 81       	ldd	r25, Y+3	; 0x03
 236:	fc 01       	movw	r30, r24
 238:	10 82       	st	Z, r1
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	9b 83       	std	Y+3, r25	; 0x03
 242:	8a 83       	std	Y+2, r24	; 0x02
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	88 3f       	cpi	r24, 0xF8	; 248
 24a:	91 05       	cpc	r25, r1
 24c:	90 f3       	brcs	.-28     	; 0x232 <can_clear_all_mob+0x28>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	86 30       	cpi	r24, 0x06	; 6
 258:	00 f3       	brcs	.-64     	; 0x21a <can_clear_all_mob+0x10>
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
 274:	88 ed       	ldi	r24, 0xD8	; 216
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
    Can_conf_bt();
 27e:	82 ee       	ldi	r24, 0xE2	; 226
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	26 e0       	ldi	r18, 0x06	; 6
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
 288:	83 ee       	ldi	r24, 0xE3	; 227
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	24 e0       	ldi	r18, 0x04	; 4
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
 292:	84 ee       	ldi	r24, 0xE4	; 228
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 e1       	ldi	r18, 0x13	; 19
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
    return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	1f 92       	push	r1
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	0e 94 34 01 	call	0x268	; 0x268 <can_fixed_baudrate>
 2b8:	88 23       	and	r24, r24
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <can_init+0x1a>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0c c0       	rjmp	.+24     	; 0x2d8 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 2c0:	0e 94 05 01 	call	0x20a	; 0x20a <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 2c4:	88 ed       	ldi	r24, 0xD8	; 216
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	28 ed       	ldi	r18, 0xD8	; 216
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	22 60       	ori	r18, 0x02	; 2
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
    return (1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
}
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <chip_init>:
 */ 

#include "chip.h"

void chip_init (void)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
 2e8:	81 e6       	ldi	r24, 0x61	; 97
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	20 e8       	ldi	r18, 0x80	; 128
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	CLKPR = 0x00;
 2f2:	81 e6       	ldi	r24, 0x61	; 97
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	10 82       	st	Z, r1
	
	// leds at pb5 (led2) and pb6 (led3), active high
	// leds are off
	LEDS |= (1 << CPC1017)|(1 << LED2)|(1 << LED3);
 2fa:	84 e2       	ldi	r24, 0x24	; 36
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	24 e2       	ldi	r18, 0x24	; 36
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	28 66       	ori	r18, 0x68	; 104
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	
	LED2_OFF;
 30c:	85 e2       	ldi	r24, 0x25	; 37
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	25 e2       	ldi	r18, 0x25	; 37
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	2f 7d       	andi	r18, 0xDF	; 223
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
	LED3_OFF;
 31e:	85 e2       	ldi	r24, 0x25	; 37
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	25 e2       	ldi	r18, 0x25	; 37
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	2f 7b       	andi	r18, 0xBF	; 191
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	CPC1017_OFF;
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e2       	ldi	r18, 0x25	; 37
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	27 7f       	andi	r18, 0xF7	; 247
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
	
	// spi
	LEDS |= (1 << SPI_MOSI)|(1 << SPI_SCK);
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	24 e2       	ldi	r18, 0x24	; 36
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	22 68       	ori	r18, 0x82	; 130
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
	// spi ss
	DDRD |= (1 << SPI_SS);
 354:	8a e2       	ldi	r24, 0x2A	; 42
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	2a e2       	ldi	r18, 0x2A	; 42
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	20 81       	ld	r18, Z
 360:	20 62       	ori	r18, 0x20	; 32
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
	SPI_SS_DESELECT;
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	2b e2       	ldi	r18, 0x2B	; 43
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	20 62       	ori	r18, 0x20	; 32
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
	
	// probe heater, output
	DDRC |= (1 << HEATER_PIN);
 378:	87 e2       	ldi	r24, 0x27	; 39
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	27 e2       	ldi	r18, 0x27	; 39
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	22 60       	ori	r18, 0x02	; 2
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
 38a:	00 00       	nop
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <cj125_read_ident>:

#include "cj125.h"
#include "cj125_register.h"

uint16_t cj125_read_ident (void)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_IDENT_REG_REQUEST);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	98 e4       	ldi	r25, 0x48	; 72
 39e:	0e 94 9c 03 	call	0x738	; 0x738 <spi_read_write>
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <cj125_read_diag>:

uint16_t cj125_read_diag (void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_DIAG_REG_REQUEST);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	98 e7       	ldi	r25, 0x78	; 120
 3b4:	0e 94 9c 03 	call	0x738	; 0x738 <spi_read_write>
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <dac_init>:
 */ 

#include "dac.h"

void dac_init (void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
 3c6:	80 e9       	ldi	r24, 0x90	; 144
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	23 e0       	ldi	r18, 0x03	; 3
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
}
 3d0:	00 00       	nop
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <is_between>:
}

void gpio_init (void)
{
	memset((void*)&inputs, 0, sizeof(inputs));
}
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <is_between+0x6>
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <is_between+0x8>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <is_between+0xa>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	7c 83       	std	Y+4, r23	; 0x04
 3ec:	6b 83       	std	Y+3, r22	; 0x03
 3ee:	5e 83       	std	Y+6, r21	; 0x06
 3f0:	4d 83       	std	Y+5, r20	; 0x05
 3f2:	2d 81       	ldd	r18, Y+5	; 0x05
 3f4:	3e 81       	ldd	r19, Y+6	; 0x06
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	82 17       	cp	r24, r18
 3fc:	93 07       	cpc	r25, r19
 3fe:	48 f4       	brcc	.+18     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 400:	2d 81       	ldd	r18, Y+5	; 0x05
 402:	3e 81       	ldd	r19, Y+6	; 0x06
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	28 17       	cp	r18, r24
 40a:	39 07       	cpc	r19, r25
 40c:	10 f4       	brcc	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	01 c0       	rjmp	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	26 96       	adiw	r28, 0x06	; 6
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <gpio_read_inputs>:

void gpio_read_inputs (typeInputs *inputs)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <gpio_read_inputs+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
	inputs->UA = adc_ua();
 434:	0e 94 bb 00 	call	0x176	; 0x176 <adc_ua>
 438:	9c 01       	movw	r18, r24
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	fc 01       	movw	r30, r24
 440:	31 83       	std	Z+1, r19	; 0x01
 442:	20 83       	st	Z, r18
	inputs->UR = adc_ur();
 444:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <adc_ur>
 448:	9c 01       	movw	r18, r24
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	fc 01       	movw	r30, r24
 450:	33 83       	std	Z+3, r19	; 0x03
 452:	22 83       	std	Z+2, r18	; 0x02
	inputs->UBat = adc_ad12v();
 454:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_ad12v>
 458:	9c 01       	movw	r18, r24
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	fc 01       	movw	r30, r24
 460:	35 83       	std	Z+5, r19	; 0x05
 462:	24 83       	std	Z+4, r18	; 0x04
	inputs->URef = (int16_t)((uint32_t) adc_reference() * 5000UL / 1024UL);	// here should be 1225 (shunt *1000)
 464:	0e 94 96 00 	call	0x12c	; 0x12c <adc_reference>
 468:	9c 01       	movw	r18, r24
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	88 e8       	ldi	r24, 0x88	; 136
 470:	93 e1       	ldi	r25, 0x13	; 19
 472:	dc 01       	movw	r26, r24
 474:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__muluhisi3>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	07 2e       	mov	r0, r23
 47e:	7a e0       	ldi	r23, 0x0A	; 10
 480:	b6 95       	lsr	r27
 482:	a7 95       	ror	r26
 484:	97 95       	ror	r25
 486:	87 95       	ror	r24
 488:	7a 95       	dec	r23
 48a:	d1 f7       	brne	.-12     	; 0x480 <gpio_read_inputs+0x5a>
 48c:	70 2d       	mov	r23, r0
 48e:	9c 01       	movw	r18, r24
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	fc 01       	movw	r30, r24
 496:	37 83       	std	Z+7, r19	; 0x07
 498:	26 83       	std	Z+6, r18	; 0x06
	inputs->UBat_OK = is_between(UBat_MIN, UBat_MAX, inputs->UBat);
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	9a 81       	ldd	r25, Y+2	; 0x02
 49e:	fc 01       	movw	r30, r24
 4a0:	84 81       	ldd	r24, Z+4	; 0x04
 4a2:	95 81       	ldd	r25, Z+5	; 0x05
 4a4:	ac 01       	movw	r20, r24
 4a6:	60 eb       	ldi	r22, 0xB0	; 176
 4a8:	72 e0       	ldi	r23, 0x02	; 2
 4aa:	84 ec       	ldi	r24, 0xC4	; 196
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <is_between>
 4b2:	28 2f       	mov	r18, r24
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 87       	std	Z+8, r18	; 0x08
	inputs->UOffset = 1225 - inputs->URef;
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	9a 81       	ldd	r25, Y+2	; 0x02
 4c0:	fc 01       	movw	r30, r24
 4c2:	86 81       	ldd	r24, Z+6	; 0x06
 4c4:	97 81       	ldd	r25, Z+7	; 0x07
 4c6:	29 ec       	ldi	r18, 0xC9	; 201
 4c8:	34 e0       	ldi	r19, 0x04	; 4
 4ca:	28 1b       	sub	r18, r24
 4cc:	39 0b       	sbc	r19, r25
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	fc 01       	movw	r30, r24
 4d4:	32 87       	std	Z+10, r19	; 0x0a
 4d6:	21 87       	std	Z+9, r18	; 0x09
	inputs->USupply = (int16_t)((uint32_t)( inputs->UBat +inputs->UOffset) * 24500UL / 1024UL);
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	fc 01       	movw	r30, r24
 4de:	84 81       	ldd	r24, Z+4	; 0x04
 4e0:	95 81       	ldd	r25, Z+5	; 0x05
 4e2:	29 81       	ldd	r18, Y+1	; 0x01
 4e4:	3a 81       	ldd	r19, Y+2	; 0x02
 4e6:	f9 01       	movw	r30, r18
 4e8:	21 85       	ldd	r18, Z+9	; 0x09
 4ea:	32 85       	ldd	r19, Z+10	; 0x0a
 4ec:	82 0f       	add	r24, r18
 4ee:	93 1f       	adc	r25, r19
 4f0:	9c 01       	movw	r18, r24
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	84 eb       	ldi	r24, 0xB4	; 180
 4f8:	9f e5       	ldi	r25, 0x5F	; 95
 4fa:	dc 01       	movw	r26, r24
 4fc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__muluhisi3>
 500:	dc 01       	movw	r26, r24
 502:	cb 01       	movw	r24, r22
 504:	07 2e       	mov	r0, r23
 506:	7a e0       	ldi	r23, 0x0A	; 10
 508:	b6 95       	lsr	r27
 50a:	a7 95       	ror	r26
 50c:	97 95       	ror	r25
 50e:	87 95       	ror	r24
 510:	7a 95       	dec	r23
 512:	d1 f7       	brne	.-12     	; 0x508 <gpio_read_inputs+0xe2>
 514:	70 2d       	mov	r23, r0
 516:	9c 01       	movw	r18, r24
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	9a 81       	ldd	r25, Y+2	; 0x02
 51c:	fc 01       	movw	r30, r24
 51e:	34 87       	std	Z+12, r19	; 0x0c
 520:	23 87       	std	Z+11, r18	; 0x0b
}
 522:	00 00       	nop
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <is_ubat_ok>:

bool is_ubat_ok (void)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
	inputs.UBat=adc_ad12v();
 536:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_ad12v>
 53a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 53e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
	return inputs.UBat_OK = is_between(UBat_MIN, UBat_MAX, inputs.UBat);
 542:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 546:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 54a:	ac 01       	movw	r20, r24
 54c:	60 eb       	ldi	r22, 0xB0	; 176
 54e:	72 e0       	ldi	r23, 0x02	; 2
 550:	84 ec       	ldi	r24, 0xC4	; 196
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <is_between>
 558:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 55c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <calculate_pwm_for_voltage>:

uint16_t calculate_pwm_for_voltage (uint16_t voltage)
{	
 566:	cf 92       	push	r12
 568:	df 92       	push	r13
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	00 d0       	rcall	.+0      	; 0x574 <calculate_pwm_for_voltage+0xe>
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	9a 83       	std	Y+2, r25	; 0x02
 57a:	89 83       	std	Y+1, r24	; 0x01
	return (uint16_t) ((float)voltage/inputs.USupply*1024.0);
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	9a 81       	ldd	r25, Y+2	; 0x02
 580:	cc 01       	movw	r24, r24
 582:	a0 e0       	ldi	r26, 0x00	; 0
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	0e 94 c2 04 	call	0x984	; 0x984 <__floatunsisf>
 58e:	6b 01       	movw	r12, r22
 590:	7c 01       	movw	r14, r24
 592:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 596:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 59a:	09 2e       	mov	r0, r25
 59c:	00 0c       	add	r0, r0
 59e:	aa 0b       	sbc	r26, r26
 5a0:	bb 0b       	sbc	r27, r27
 5a2:	bc 01       	movw	r22, r24
 5a4:	cd 01       	movw	r24, r26
 5a6:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
 5aa:	dc 01       	movw	r26, r24
 5ac:	cb 01       	movw	r24, r22
 5ae:	9c 01       	movw	r18, r24
 5b0:	ad 01       	movw	r20, r26
 5b2:	c7 01       	movw	r24, r14
 5b4:	b6 01       	movw	r22, r12
 5b6:	0e 94 21 04 	call	0x842	; 0x842 <__divsf3>
 5ba:	dc 01       	movw	r26, r24
 5bc:	cb 01       	movw	r24, r22
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	40 e8       	ldi	r20, 0x80	; 128
 5c4:	54 e4       	ldi	r21, 0x44	; 68
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__mulsf3>
 5ce:	dc 01       	movw	r26, r24
 5d0:	cb 01       	movw	r24, r22
 5d2:	bc 01       	movw	r22, r24
 5d4:	cd 01       	movw	r24, r26
 5d6:	0e 94 93 04 	call	0x926	; 0x926 <__fixunssfsi>
 5da:	dc 01       	movw	r26, r24
 5dc:	cb 01       	movw	r24, r22
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	08 95       	ret

000005f0 <main>:

#include "config.h"
#include "helpers.h"

int main(void)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <main+0x6>
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <main+0x8>
 5f8:	1f 92       	push	r1
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
	chip_init();
 5fe:	0e 94 70 01 	call	0x2e0	; 0x2e0 <chip_init>
	can_init(1);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 53 01 	call	0x2a6	; 0x2a6 <can_init>
	timer_delay_ms(50);
 608:	82 e3       	ldi	r24, 0x32	; 50
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <timer_delay_ms>
	adc_init();
 610:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_init>
	dac_init();
 614:	0e 94 df 01 	call	0x3be	; 0x3be <dac_init>
	spi_init();
 618:	0e 94 8b 03 	call	0x716	; 0x716 <spi_init>
	pwm_init();
 61c:	0e 94 43 03 	call	0x686	; 0x686 <pwm_init>
	sei();
 620:	78 94       	sei
		dac_value(1080);
		LED2_TOG;
		timer_delay_ms(10);
		*/
		
		LED2_TOG;
 622:	85 e2       	ldi	r24, 0x25	; 37
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	25 e2       	ldi	r18, 0x25	; 37
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	f9 01       	movw	r30, r18
 62c:	30 81       	ld	r19, Z
 62e:	20 e2       	ldi	r18, 0x20	; 32
 630:	23 27       	eor	r18, r19
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
		// HEATER_TOG;
		gpio_read_inputs(&inputs);
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 13 02 	call	0x426	; 0x426 <gpio_read_inputs>
		retVal = cj125_read_ident();
 63e:	0e 94 c9 01 	call	0x392	; 0x392 <cj125_read_ident>
 642:	9a 83       	std	Y+2, r25	; 0x02
 644:	89 83       	std	Y+1, r24	; 0x01
		
		retVal = cj125_read_diag();
 646:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <cj125_read_diag>
 64a:	9a 83       	std	Y+2, r25	; 0x02
 64c:	89 83       	std	Y+1, r24	; 0x01
		
		power_ok = is_ubat_ok();
 64e:	0e 94 97 02 	call	0x52e	; 0x52e <is_ubat_ok>
 652:	8b 83       	std	Y+3, r24	; 0x03
		
		pwm_duty = calculate_pwm_for_voltage(1500);
 654:	8c ed       	ldi	r24, 0xDC	; 220
 656:	95 e0       	ldi	r25, 0x05	; 5
 658:	0e 94 b3 02 	call	0x566	; 0x566 <calculate_pwm_for_voltage>
 65c:	9d 83       	std	Y+5, r25	; 0x05
 65e:	8c 83       	std	Y+4, r24	; 0x04
		pwm_set_duty(pwm_duty);
 660:	8c 81       	ldd	r24, Y+4	; 0x04
 662:	9d 81       	ldd	r25, Y+5	; 0x05
 664:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pwm_set_duty>
		
		pwm_duty = calculate_pwm_for_voltage(9300);
 668:	84 e5       	ldi	r24, 0x54	; 84
 66a:	94 e2       	ldi	r25, 0x24	; 36
 66c:	0e 94 b3 02 	call	0x566	; 0x566 <calculate_pwm_for_voltage>
 670:	9d 83       	std	Y+5, r25	; 0x05
 672:	8c 83       	std	Y+4, r24	; 0x04
		pwm_set_duty(pwm_duty);
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pwm_set_duty>
		
		
		
		timer_delay_ms(200);
 67c:	88 ec       	ldi	r24, 0xC8	; 200
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <timer_delay_ms>
    }
 684:	ce cf       	rjmp	.-100    	; 0x622 <main+0x32>

00000686 <pwm_init>:
 */ 

#include "pwm.h"

void pwm_init (void)
{
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
	// pin pc1 (OC1B, Timer 1 output compare B) connected to probe heater
	// fast pwm mode, prescaler 64,  top 0x03ff (1023) = 244Hz
	// pwm mode 7, 10-bit resolution
	// clear oc1b on compare match
	
	TCCR1A |= (1 << WGM11)|(1 << WGM10)|(1 << COM1B1);
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	20 e8       	ldi	r18, 0x80	; 128
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	f9 01       	movw	r30, r18
 698:	20 81       	ld	r18, Z
 69a:	23 62       	ori	r18, 0x23	; 35
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 6a0:	81 e8       	ldi	r24, 0x81	; 129
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	21 e8       	ldi	r18, 0x81	; 129
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	2b 60       	ori	r18, 0x0B	; 11
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
	pwm_set_duty(511);
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pwm_set_duty>
}
 6ba:	00 00       	nop
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <pwm_set_duty>:

void pwm_set_duty (uint16_t duty)
{
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <pwm_set_duty+0x6>
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	9a 83       	std	Y+2, r25	; 0x02
 6ce:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = duty;
 6d0:	8a e8       	ldi	r24, 0x8A	; 138
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	29 81       	ldd	r18, Y+1	; 0x01
 6d6:	3a 81       	ldd	r19, Y+2	; 0x02
 6d8:	fc 01       	movw	r30, r24
 6da:	31 83       	std	Z+1, r19	; 0x01
 6dc:	20 83       	st	Z, r18
 6de:	00 00       	nop
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <__make_u16t+0x6>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	89 83       	std	Y+1, r24	; 0x01
 6f6:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	88 2f       	mov	r24, r24
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	38 2f       	mov	r19, r24
 700:	22 27       	eor	r18, r18
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	82 2b       	or	r24, r18
 70a:	93 2b       	or	r25, r19
}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
	// enable spi, 2MHz (div 128), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPR1)|(1 << SPR0);
 71e:	8c e4       	ldi	r24, 0x4C	; 76
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	2c e4       	ldi	r18, 0x4C	; 76
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	20 81       	ld	r18, Z
 72a:	27 65       	ori	r18, 0x57	; 87
 72c:	fc 01       	movw	r30, r24
 72e:	20 83       	st	Z, r18
}
 730:	00 00       	nop
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	00 d0       	rcall	.+0      	; 0x73e <spi_read_write+0x6>
 73e:	00 d0       	rcall	.+0      	; 0x740 <spi_read_write+0x8>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	9c 83       	std	Y+4, r25	; 0x04
 746:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
 748:	8b e2       	ldi	r24, 0x2B	; 43
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	2b e2       	ldi	r18, 0x2B	; 43
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	2f 7d       	andi	r18, 0xDF	; 223
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
 75a:	8e e4       	ldi	r24, 0x4E	; 78
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2b 81       	ldd	r18, Y+3	; 0x03
 760:	3c 81       	ldd	r19, Y+4	; 0x04
 762:	23 2f       	mov	r18, r19
 764:	33 27       	eor	r19, r19
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
 76a:	00 00       	nop
 76c:	8d e4       	ldi	r24, 0x4D	; 77
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	fc 01       	movw	r30, r24
 772:	80 81       	ld	r24, Z
 774:	88 23       	and	r24, r24
 776:	d4 f7       	brge	.-12     	; 0x76c <spi_read_write+0x34>
	byte1 = SPDR;
 778:	8e e4       	ldi	r24, 0x4E	; 78
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	fc 01       	movw	r30, r24
 77e:	80 81       	ld	r24, Z
 780:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	8f 73       	andi	r24, 0x3F	; 63
 786:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
 788:	8e e4       	ldi	r24, 0x4E	; 78
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	fc 01       	movw	r30, r24
 790:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
 792:	00 00       	nop
 794:	8d e4       	ldi	r24, 0x4D	; 77
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	fc 01       	movw	r30, r24
 79a:	80 81       	ld	r24, Z
 79c:	88 23       	and	r24, r24
 79e:	d4 f7       	brge	.-12     	; 0x794 <spi_read_write+0x5c>
	byte2 = SPDR;
 7a0:	8e e4       	ldi	r24, 0x4E	; 78
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	80 81       	ld	r24, Z
 7a8:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
 7aa:	8b e2       	ldi	r24, 0x2B	; 43
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	2b e2       	ldi	r18, 0x2B	; 43
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	f9 01       	movw	r30, r18
 7b4:	20 81       	ld	r18, Z
 7b6:	20 62       	ori	r18, 0x20	; 32
 7b8:	fc 01       	movw	r30, r24
 7ba:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
 7bc:	6a 81       	ldd	r22, Y+2	; 0x02
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__make_u16t>
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <timer_delay_ms>:
	TIMSK0 |= (1 << TOIE0);
	
}

void timer_delay_ms (uint16_t delay)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <timer_delay_ms+0x6>
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
 7dc:	9a 83       	std	Y+2, r25	; 0x02
 7de:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		TCNT0 = 6;
 7e0:	86 e4       	ldi	r24, 0x46	; 70
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	26 e0       	ldi	r18, 0x06	; 6
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);
 7ea:	85 e4       	ldi	r24, 0x45	; 69
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	25 e4       	ldi	r18, 0x45	; 69
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 81       	ld	r18, Z
 7f6:	23 60       	ori	r18, 0x03	; 3
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
		while ((TIFR0 & (1 << TOV0)) == 0);
 7fc:	00 00       	nop
 7fe:	85 e3       	ldi	r24, 0x35	; 53
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	fc 01       	movw	r30, r24
 804:	80 81       	ld	r24, Z
 806:	88 2f       	mov	r24, r24
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	81 70       	andi	r24, 0x01	; 1
 80c:	99 27       	eor	r25, r25
 80e:	89 2b       	or	r24, r25
 810:	b1 f3       	breq	.-20     	; 0x7fe <timer_delay_ms+0x2c>
		TIFR0 |= (1 << TOV0);
 812:	85 e3       	ldi	r24, 0x35	; 53
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	25 e3       	ldi	r18, 0x35	; 53
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	f9 01       	movw	r30, r18
 81c:	20 81       	ld	r18, Z
 81e:	21 60       	ori	r18, 0x01	; 1
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
		delay--;
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	9a 81       	ldd	r25, Y+2	; 0x02
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	9a 83       	std	Y+2, r25	; 0x02
 82c:	89 83       	std	Y+1, r24	; 0x01
	} while (delay > 0);
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	9a 81       	ldd	r25, Y+2	; 0x02
 832:	89 2b       	or	r24, r25
 834:	a9 f6       	brne	.-86     	; 0x7e0 <timer_delay_ms+0xe>
}
 836:	00 00       	nop
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <__divsf3>:
 842:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3x>
 846:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 84a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 84e:	58 f0       	brcs	.+22     	; 0x866 <__divsf3+0x24>
 850:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 854:	40 f0       	brcs	.+16     	; 0x866 <__divsf3+0x24>
 856:	29 f4       	brne	.+10     	; 0x862 <__divsf3+0x20>
 858:	5f 3f       	cpi	r21, 0xFF	; 255
 85a:	29 f0       	breq	.+10     	; 0x866 <__divsf3+0x24>
 85c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 860:	51 11       	cpse	r21, r1
 862:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 866:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>

0000086a <__divsf3x>:
 86a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 86e:	68 f3       	brcs	.-38     	; 0x84a <__divsf3+0x8>

00000870 <__divsf3_pse>:
 870:	99 23       	and	r25, r25
 872:	b1 f3       	breq	.-20     	; 0x860 <__divsf3+0x1e>
 874:	55 23       	and	r21, r21
 876:	91 f3       	breq	.-28     	; 0x85c <__divsf3+0x1a>
 878:	95 1b       	sub	r25, r21
 87a:	55 0b       	sbc	r21, r21
 87c:	bb 27       	eor	r27, r27
 87e:	aa 27       	eor	r26, r26
 880:	62 17       	cp	r22, r18
 882:	73 07       	cpc	r23, r19
 884:	84 07       	cpc	r24, r20
 886:	38 f0       	brcs	.+14     	; 0x896 <__divsf3_pse+0x26>
 888:	9f 5f       	subi	r25, 0xFF	; 255
 88a:	5f 4f       	sbci	r21, 0xFF	; 255
 88c:	22 0f       	add	r18, r18
 88e:	33 1f       	adc	r19, r19
 890:	44 1f       	adc	r20, r20
 892:	aa 1f       	adc	r26, r26
 894:	a9 f3       	breq	.-22     	; 0x880 <__divsf3_pse+0x10>
 896:	35 d0       	rcall	.+106    	; 0x902 <__stack+0x3>
 898:	0e 2e       	mov	r0, r30
 89a:	3a f0       	brmi	.+14     	; 0x8aa <__divsf3_pse+0x3a>
 89c:	e0 e8       	ldi	r30, 0x80	; 128
 89e:	32 d0       	rcall	.+100    	; 0x904 <__stack+0x5>
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	e6 95       	lsr	r30
 8a6:	00 1c       	adc	r0, r0
 8a8:	ca f7       	brpl	.-14     	; 0x89c <__divsf3_pse+0x2c>
 8aa:	2b d0       	rcall	.+86     	; 0x902 <__stack+0x3>
 8ac:	fe 2f       	mov	r31, r30
 8ae:	29 d0       	rcall	.+82     	; 0x902 <__stack+0x3>
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	bb 1f       	adc	r27, r27
 8b8:	26 17       	cp	r18, r22
 8ba:	37 07       	cpc	r19, r23
 8bc:	48 07       	cpc	r20, r24
 8be:	ab 07       	cpc	r26, r27
 8c0:	b0 e8       	ldi	r27, 0x80	; 128
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__divsf3_pse+0x56>
 8c4:	bb 0b       	sbc	r27, r27
 8c6:	80 2d       	mov	r24, r0
 8c8:	bf 01       	movw	r22, r30
 8ca:	ff 27       	eor	r31, r31
 8cc:	93 58       	subi	r25, 0x83	; 131
 8ce:	5f 4f       	sbci	r21, 0xFF	; 255
 8d0:	3a f0       	brmi	.+14     	; 0x8e0 <__divsf3_pse+0x70>
 8d2:	9e 3f       	cpi	r25, 0xFE	; 254
 8d4:	51 05       	cpc	r21, r1
 8d6:	78 f0       	brcs	.+30     	; 0x8f6 <__divsf3_pse+0x86>
 8d8:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 8dc:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	e4 f3       	brlt	.-8      	; 0x8dc <__divsf3_pse+0x6c>
 8e4:	98 3e       	cpi	r25, 0xE8	; 232
 8e6:	d4 f3       	brlt	.-12     	; 0x8dc <__divsf3_pse+0x6c>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b7 95       	ror	r27
 8f0:	f7 95       	ror	r31
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	c9 f7       	brne	.-14     	; 0x8e8 <__divsf3_pse+0x78>
 8f6:	88 0f       	add	r24, r24
 8f8:	91 1d       	adc	r25, r1
 8fa:	96 95       	lsr	r25
 8fc:	87 95       	ror	r24
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret
 902:	e1 e0       	ldi	r30, 0x01	; 1
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	bb 1f       	adc	r27, r27
 90c:	62 17       	cp	r22, r18
 90e:	73 07       	cpc	r23, r19
 910:	84 07       	cpc	r24, r20
 912:	ba 07       	cpc	r27, r26
 914:	20 f0       	brcs	.+8      	; 0x91e <__stack+0x1f>
 916:	62 1b       	sub	r22, r18
 918:	73 0b       	sbc	r23, r19
 91a:	84 0b       	sbc	r24, r20
 91c:	ba 0b       	sbc	r27, r26
 91e:	ee 1f       	adc	r30, r30
 920:	88 f7       	brcc	.-30     	; 0x904 <__stack+0x5>
 922:	e0 95       	com	r30
 924:	08 95       	ret

00000926 <__fixunssfsi>:
 926:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_splitA>
 92a:	88 f0       	brcs	.+34     	; 0x94e <__fixunssfsi+0x28>
 92c:	9f 57       	subi	r25, 0x7F	; 127
 92e:	98 f0       	brcs	.+38     	; 0x956 <__fixunssfsi+0x30>
 930:	b9 2f       	mov	r27, r25
 932:	99 27       	eor	r25, r25
 934:	b7 51       	subi	r27, 0x17	; 23
 936:	b0 f0       	brcs	.+44     	; 0x964 <__fixunssfsi+0x3e>
 938:	e1 f0       	breq	.+56     	; 0x972 <__fixunssfsi+0x4c>
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	1a f0       	brmi	.+6      	; 0x94a <__fixunssfsi+0x24>
 944:	ba 95       	dec	r27
 946:	c9 f7       	brne	.-14     	; 0x93a <__fixunssfsi+0x14>
 948:	14 c0       	rjmp	.+40     	; 0x972 <__fixunssfsi+0x4c>
 94a:	b1 30       	cpi	r27, 0x01	; 1
 94c:	91 f0       	breq	.+36     	; 0x972 <__fixunssfsi+0x4c>
 94e:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_zero>
 952:	b1 e0       	ldi	r27, 0x01	; 1
 954:	08 95       	ret
 956:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 95a:	67 2f       	mov	r22, r23
 95c:	78 2f       	mov	r23, r24
 95e:	88 27       	eor	r24, r24
 960:	b8 5f       	subi	r27, 0xF8	; 248
 962:	39 f0       	breq	.+14     	; 0x972 <__fixunssfsi+0x4c>
 964:	b9 3f       	cpi	r27, 0xF9	; 249
 966:	cc f3       	brlt	.-14     	; 0x95a <__fixunssfsi+0x34>
 968:	86 95       	lsr	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b3 95       	inc	r27
 970:	d9 f7       	brne	.-10     	; 0x968 <__fixunssfsi+0x42>
 972:	3e f4       	brtc	.+14     	; 0x982 <__fixunssfsi+0x5c>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	08 95       	ret

00000984 <__floatunsisf>:
 984:	e8 94       	clt
 986:	09 c0       	rjmp	.+18     	; 0x99a <__floatsisf+0x12>

00000988 <__floatsisf>:
 988:	97 fb       	bst	r25, 7
 98a:	3e f4       	brtc	.+14     	; 0x99a <__floatsisf+0x12>
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	99 23       	and	r25, r25
 99c:	a9 f0       	breq	.+42     	; 0x9c8 <__floatsisf+0x40>
 99e:	f9 2f       	mov	r31, r25
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	bb 27       	eor	r27, r27
 9a4:	93 95       	inc	r25
 9a6:	f6 95       	lsr	r31
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b7 95       	ror	r27
 9b0:	f1 11       	cpse	r31, r1
 9b2:	f8 cf       	rjmp	.-16     	; 0x9a4 <__floatsisf+0x1c>
 9b4:	fa f4       	brpl	.+62     	; 0x9f4 <__floatsisf+0x6c>
 9b6:	bb 0f       	add	r27, r27
 9b8:	11 f4       	brne	.+4      	; 0x9be <__floatsisf+0x36>
 9ba:	60 ff       	sbrs	r22, 0
 9bc:	1b c0       	rjmp	.+54     	; 0x9f4 <__floatsisf+0x6c>
 9be:	6f 5f       	subi	r22, 0xFF	; 255
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	16 c0       	rjmp	.+44     	; 0x9f4 <__floatsisf+0x6c>
 9c8:	88 23       	and	r24, r24
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <__floatsisf+0x48>
 9cc:	96 e9       	ldi	r25, 0x96	; 150
 9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <__floatsisf+0x6a>
 9d0:	77 23       	and	r23, r23
 9d2:	21 f0       	breq	.+8      	; 0x9dc <__floatsisf+0x54>
 9d4:	9e e8       	ldi	r25, 0x8E	; 142
 9d6:	87 2f       	mov	r24, r23
 9d8:	76 2f       	mov	r23, r22
 9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__floatsisf+0x5e>
 9dc:	66 23       	and	r22, r22
 9de:	71 f0       	breq	.+28     	; 0x9fc <__floatsisf+0x74>
 9e0:	96 e8       	ldi	r25, 0x86	; 134
 9e2:	86 2f       	mov	r24, r22
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	2a f0       	brmi	.+10     	; 0x9f4 <__floatsisf+0x6c>
 9ea:	9a 95       	dec	r25
 9ec:	66 0f       	add	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	da f7       	brpl	.-10     	; 0x9ea <__floatsisf+0x62>
 9f4:	88 0f       	add	r24, r24
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret

000009fe <__fp_inf>:
 9fe:	97 f9       	bld	r25, 7
 a00:	9f 67       	ori	r25, 0x7F	; 127
 a02:	80 e8       	ldi	r24, 0x80	; 128
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	08 95       	ret

00000a0a <__fp_nan>:
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	08 95       	ret

00000a10 <__fp_pscA>:
 a10:	00 24       	eor	r0, r0
 a12:	0a 94       	dec	r0
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	09 06       	cpc	r0, r25
 a1c:	08 95       	ret

00000a1e <__fp_pscB>:
 a1e:	00 24       	eor	r0, r0
 a20:	0a 94       	dec	r0
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	05 06       	cpc	r0, r21
 a2a:	08 95       	ret

00000a2c <__fp_round>:
 a2c:	09 2e       	mov	r0, r25
 a2e:	03 94       	inc	r0
 a30:	00 0c       	add	r0, r0
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_round+0xc>
 a34:	88 23       	and	r24, r24
 a36:	52 f0       	brmi	.+20     	; 0xa4c <__fp_round+0x20>
 a38:	bb 0f       	add	r27, r27
 a3a:	40 f4       	brcc	.+16     	; 0xa4c <__fp_round+0x20>
 a3c:	bf 2b       	or	r27, r31
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0x18>
 a40:	60 ff       	sbrs	r22, 0
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__fp_round+0x20>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__mulsf3>:
 aa0:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3x>
 aa4:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 aa8:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 aac:	38 f0       	brcs	.+14     	; 0xabc <__mulsf3+0x1c>
 aae:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 ab2:	20 f0       	brcs	.+8      	; 0xabc <__mulsf3+0x1c>
 ab4:	95 23       	and	r25, r21
 ab6:	11 f0       	breq	.+4      	; 0xabc <__mulsf3+0x1c>
 ab8:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 abc:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 ac0:	11 24       	eor	r1, r1
 ac2:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>

00000ac6 <__mulsf3x>:
 ac6:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 aca:	70 f3       	brcs	.-36     	; 0xaa8 <__mulsf3+0x8>

00000acc <__mulsf3_pse>:
 acc:	95 9f       	mul	r25, r21
 ace:	c1 f3       	breq	.-16     	; 0xac0 <__mulsf3+0x20>
 ad0:	95 0f       	add	r25, r21
 ad2:	50 e0       	ldi	r21, 0x00	; 0
 ad4:	55 1f       	adc	r21, r21
 ad6:	62 9f       	mul	r22, r18
 ad8:	f0 01       	movw	r30, r0
 ada:	72 9f       	mul	r23, r18
 adc:	bb 27       	eor	r27, r27
 ade:	f0 0d       	add	r31, r0
 ae0:	b1 1d       	adc	r27, r1
 ae2:	63 9f       	mul	r22, r19
 ae4:	aa 27       	eor	r26, r26
 ae6:	f0 0d       	add	r31, r0
 ae8:	b1 1d       	adc	r27, r1
 aea:	aa 1f       	adc	r26, r26
 aec:	64 9f       	mul	r22, r20
 aee:	66 27       	eor	r22, r22
 af0:	b0 0d       	add	r27, r0
 af2:	a1 1d       	adc	r26, r1
 af4:	66 1f       	adc	r22, r22
 af6:	82 9f       	mul	r24, r18
 af8:	22 27       	eor	r18, r18
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	62 1f       	adc	r22, r18
 b00:	73 9f       	mul	r23, r19
 b02:	b0 0d       	add	r27, r0
 b04:	a1 1d       	adc	r26, r1
 b06:	62 1f       	adc	r22, r18
 b08:	83 9f       	mul	r24, r19
 b0a:	a0 0d       	add	r26, r0
 b0c:	61 1d       	adc	r22, r1
 b0e:	22 1f       	adc	r18, r18
 b10:	74 9f       	mul	r23, r20
 b12:	33 27       	eor	r19, r19
 b14:	a0 0d       	add	r26, r0
 b16:	61 1d       	adc	r22, r1
 b18:	23 1f       	adc	r18, r19
 b1a:	84 9f       	mul	r24, r20
 b1c:	60 0d       	add	r22, r0
 b1e:	21 1d       	adc	r18, r1
 b20:	82 2f       	mov	r24, r18
 b22:	76 2f       	mov	r23, r22
 b24:	6a 2f       	mov	r22, r26
 b26:	11 24       	eor	r1, r1
 b28:	9f 57       	subi	r25, 0x7F	; 127
 b2a:	50 40       	sbci	r21, 0x00	; 0
 b2c:	9a f0       	brmi	.+38     	; 0xb54 <__mulsf3_pse+0x88>
 b2e:	f1 f0       	breq	.+60     	; 0xb6c <__mulsf3_pse+0xa0>
 b30:	88 23       	and	r24, r24
 b32:	4a f0       	brmi	.+18     	; 0xb46 <__mulsf3_pse+0x7a>
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	bb 1f       	adc	r27, r27
 b3a:	66 1f       	adc	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	91 50       	subi	r25, 0x01	; 1
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	a9 f7       	brne	.-22     	; 0xb30 <__mulsf3_pse+0x64>
 b46:	9e 3f       	cpi	r25, 0xFE	; 254
 b48:	51 05       	cpc	r21, r1
 b4a:	80 f0       	brcs	.+32     	; 0xb6c <__mulsf3_pse+0xa0>
 b4c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 b50:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	e4 f3       	brlt	.-8      	; 0xb50 <__mulsf3_pse+0x84>
 b58:	98 3e       	cpi	r25, 0xE8	; 232
 b5a:	d4 f3       	brlt	.-12     	; 0xb50 <__mulsf3_pse+0x84>
 b5c:	86 95       	lsr	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b7 95       	ror	r27
 b64:	f7 95       	ror	r31
 b66:	e7 95       	ror	r30
 b68:	9f 5f       	subi	r25, 0xFF	; 255
 b6a:	c1 f7       	brne	.-16     	; 0xb5c <__mulsf3_pse+0x90>
 b6c:	fe 2b       	or	r31, r30
 b6e:	88 0f       	add	r24, r24
 b70:	91 1d       	adc	r25, r1
 b72:	96 95       	lsr	r25
 b74:	87 95       	ror	r24
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__muluhisi3>:
 b7a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__umulhisi3>
 b7e:	a5 9f       	mul	r26, r21
 b80:	90 0d       	add	r25, r0
 b82:	b4 9f       	mul	r27, r20
 b84:	90 0d       	add	r25, r0
 b86:	a4 9f       	mul	r26, r20
 b88:	80 0d       	add	r24, r0
 b8a:	91 1d       	adc	r25, r1
 b8c:	11 24       	eor	r1, r1
 b8e:	08 95       	ret

00000b90 <__umulhisi3>:
 b90:	a2 9f       	mul	r26, r18
 b92:	b0 01       	movw	r22, r0
 b94:	b3 9f       	mul	r27, r19
 b96:	c0 01       	movw	r24, r0
 b98:	a3 9f       	mul	r26, r19
 b9a:	70 0d       	add	r23, r0
 b9c:	81 1d       	adc	r24, r1
 b9e:	11 24       	eor	r1, r1
 ba0:	91 1d       	adc	r25, r1
 ba2:	b2 9f       	mul	r27, r18
 ba4:	70 0d       	add	r23, r0
 ba6:	81 1d       	adc	r24, r1
 ba8:	11 24       	eor	r1, r1
 baa:	91 1d       	adc	r25, r1
 bac:	08 95       	ret

00000bae <_exit>:
 bae:	f8 94       	cli

00000bb0 <__stop_program>:
 bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <__stop_program>
