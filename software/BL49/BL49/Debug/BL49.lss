
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000073a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001847  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f4  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b0e  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00005e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa6e  00000000  00000000  000062dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000855  00000000  00000000  00010d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0001159f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004841  00000000  00000000  000116f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a9 30       	cpi	r26, 0x09	; 9
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  9c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <adc_init>:
	ADCSRA |= (1<<ADSC);		// start single conversion
	while(ADCSRA & (1<<ADSC));	// wait till done
	
	temp1 = ADC * (5.0/1024)*1000.0/25;	
	return temp1;
}
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	8b e7       	ldi	r24, 0x7B	; 123
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e7       	ldi	r18, 0x7B	; 123
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	20 62       	ori	r18, 0x20	; 32
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	8c e7       	ldi	r24, 0x7C	; 124
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	20 e4       	ldi	r18, 0x40	; 64
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	8a e7       	ldi	r24, 0x7A	; 122
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2a e7       	ldi	r18, 0x7A	; 122
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	27 68       	ori	r18, 0x87	; 135
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	00 00       	nop
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <adc_ad12v>:

uint16_t adc_ad12v (void)	// adc channel 5
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX2)|(1 << MUX0);			// select channel
  ea:	8c e7       	ldi	r24, 0x7C	; 124
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 e4       	ldi	r18, 0x45	; 69
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
  f4:	8a e7       	ldi	r24, 0x7A	; 122
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2a e7       	ldi	r18, 0x7A	; 122
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	20 64       	ori	r18, 0x40	; 64
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 106:	00 00       	nop
 108:	8a e7       	ldi	r24, 0x7A	; 122
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	80 74       	andi	r24, 0x40	; 64
 116:	99 27       	eor	r25, r25
 118:	89 2b       	or	r24, r25
 11a:	b1 f7       	brne	.-20     	; 0x108 <adc_ad12v+0x26>
	return ADC;
 11c:	88 e7       	ldi	r24, 0x78	; 120
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	91 81       	ldd	r25, Z+1	; 0x01
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <adc_ad5v>:


uint16_t adc_ad5v (void)	// adc channel 3
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX1)|(1 << MUX0);			// select channel
 134:	8c e7       	ldi	r24, 0x7C	; 124
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	23 e4       	ldi	r18, 0x43	; 67
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 13e:	8a e7       	ldi	r24, 0x7A	; 122
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2a e7       	ldi	r18, 0x7A	; 122
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 64       	ori	r18, 0x40	; 64
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 150:	00 00       	nop
 152:	8a e7       	ldi	r24, 0x7A	; 122
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 74       	andi	r24, 0x40	; 64
 160:	99 27       	eor	r25, r25
 162:	89 2b       	or	r24, r25
 164:	b1 f7       	brne	.-20     	; 0x152 <adc_ad5v+0x26>
	return ADC;
 166:	88 e7       	ldi	r24, 0x78	; 120
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <adc_ua>:

uint16_t adc_ua (void)	// adc channel 8
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3);			// select channel
 17e:	8c e7       	ldi	r24, 0x7C	; 124
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	28 e4       	ldi	r18, 0x48	; 72
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 188:	8a e7       	ldi	r24, 0x7A	; 122
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2a e7       	ldi	r18, 0x7A	; 122
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 64       	ori	r18, 0x40	; 64
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 19a:	00 00       	nop
 19c:	8a e7       	ldi	r24, 0x7A	; 122
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 74       	andi	r24, 0x40	; 64
 1aa:	99 27       	eor	r25, r25
 1ac:	89 2b       	or	r24, r25
 1ae:	b1 f7       	brne	.-20     	; 0x19c <adc_ua+0x26>
	return ADC;
 1b0:	88 e7       	ldi	r24, 0x78	; 120
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <adc_ur>:

uint16_t adc_ur (void)	// adc channel 9
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3)|(1 << MUX0);			// select channel
 1c8:	8c e7       	ldi	r24, 0x7C	; 124
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	29 e4       	ldi	r18, 0x49	; 73
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
 1d2:	8a e7       	ldi	r24, 0x7A	; 122
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	2a e7       	ldi	r18, 0x7A	; 122
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	20 64       	ori	r18, 0x40	; 64
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
 1e4:	00 00       	nop
 1e6:	8a e7       	ldi	r24, 0x7A	; 122
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 74       	andi	r24, 0x40	; 64
 1f4:	99 27       	eor	r25, r25
 1f6:	89 2b       	or	r24, r25
 1f8:	b1 f7       	brne	.-20     	; 0x1e6 <adc_ur+0x26>
	return ADC;
 1fa:	88 e7       	ldi	r24, 0x78	; 120
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <can_clear_all_mob+0x6>
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	19 82       	std	Y+1, r1	; 0x01
 218:	1d c0       	rjmp	.+58     	; 0x254 <can_clear_all_mob+0x4a>
 21a:	8d ee       	ldi	r24, 0xED	; 237
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	22 95       	swap	r18
 222:	20 7f       	andi	r18, 0xF0	; 240
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
 228:	8e ee       	ldi	r24, 0xEE	; 238
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9b 83       	std	Y+3, r25	; 0x03
 22e:	8a 83       	std	Y+2, r24	; 0x02
 230:	09 c0       	rjmp	.+18     	; 0x244 <can_clear_all_mob+0x3a>
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	9b 81       	ldd	r25, Y+3	; 0x03
 236:	fc 01       	movw	r30, r24
 238:	10 82       	st	Z, r1
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	9b 83       	std	Y+3, r25	; 0x03
 242:	8a 83       	std	Y+2, r24	; 0x02
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	88 3f       	cpi	r24, 0xF8	; 248
 24a:	91 05       	cpc	r25, r1
 24c:	90 f3       	brcs	.-28     	; 0x232 <can_clear_all_mob+0x28>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	86 30       	cpi	r24, 0x06	; 6
 258:	00 f3       	brcs	.-64     	; 0x21a <can_clear_all_mob+0x10>
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
 274:	88 ed       	ldi	r24, 0xD8	; 216
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
    Can_conf_bt();
 27e:	82 ee       	ldi	r24, 0xE2	; 226
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	26 e0       	ldi	r18, 0x06	; 6
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
 288:	83 ee       	ldi	r24, 0xE3	; 227
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	24 e0       	ldi	r18, 0x04	; 4
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
 292:	84 ee       	ldi	r24, 0xE4	; 228
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 e1       	ldi	r18, 0x13	; 19
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
    return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	1f 92       	push	r1
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	0e 94 34 01 	call	0x268	; 0x268 <can_fixed_baudrate>
 2b8:	88 23       	and	r24, r24
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <can_init+0x1a>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0c c0       	rjmp	.+24     	; 0x2d8 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 2c0:	0e 94 05 01 	call	0x20a	; 0x20a <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 2c4:	88 ed       	ldi	r24, 0xD8	; 216
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	28 ed       	ldi	r18, 0xD8	; 216
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	22 60       	ori	r18, 0x02	; 2
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
    return (1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
}
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <chip_init>:
 */ 

#include "chip.h"

void chip_init (void)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
 2e8:	81 e6       	ldi	r24, 0x61	; 97
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	20 e8       	ldi	r18, 0x80	; 128
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	CLKPR = 0x00;
 2f2:	81 e6       	ldi	r24, 0x61	; 97
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	10 82       	st	Z, r1
	
	// leds at pb5 (led2) and pb6 (led3), active high
	// leds are off
	LEDS |= (1 << CPC1017)|(1 << LED2)|(1 << LED3);
 2fa:	84 e2       	ldi	r24, 0x24	; 36
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	24 e2       	ldi	r18, 0x24	; 36
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	28 66       	ori	r18, 0x68	; 104
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	
	LED2_OFF;
 30c:	85 e2       	ldi	r24, 0x25	; 37
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	25 e2       	ldi	r18, 0x25	; 37
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	2f 7d       	andi	r18, 0xDF	; 223
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
	LED3_OFF;
 31e:	85 e2       	ldi	r24, 0x25	; 37
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	25 e2       	ldi	r18, 0x25	; 37
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	2f 7b       	andi	r18, 0xBF	; 191
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	CPC1017_OFF;
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e2       	ldi	r18, 0x25	; 37
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	27 7f       	andi	r18, 0xF7	; 247
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
	
	// spi
	LEDS |= (1 << SPI_MOSI)|(1 << SPI_SCK);
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	24 e2       	ldi	r18, 0x24	; 36
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	22 68       	ori	r18, 0x82	; 130
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
	// spi ss
	DDRD |= (1 << SPI_SS);
 354:	8a e2       	ldi	r24, 0x2A	; 42
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	2a e2       	ldi	r18, 0x2A	; 42
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	20 81       	ld	r18, Z
 360:	20 62       	ori	r18, 0x20	; 32
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
	SPI_SS_DESELECT;
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	2b e2       	ldi	r18, 0x2B	; 43
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	20 62       	ori	r18, 0x20	; 32
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
	
	// probe heater, output
	DDRC |= (1 << HEATER_PIN);
 378:	87 e2       	ldi	r24, 0x27	; 39
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	27 e2       	ldi	r18, 0x27	; 39
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	22 60       	ori	r18, 0x02	; 2
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
 38a:	00 00       	nop
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <cj125_read_ident>:

#include "cj125.h"
#include "cj125_register.h"

uint16_t cj125_read_ident (void)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_IDENT_REG_REQUEST);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	98 e4       	ldi	r25, 0x48	; 72
 39e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spi_read_write>
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <cj125_read_diag>:

uint16_t cj125_read_diag (void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_DIAG_REG_REQUEST);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	98 e7       	ldi	r25, 0x78	; 120
 3b4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spi_read_write>
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <dac_init>:
 */ 

#include "dac.h"

void dac_init (void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
 3c6:	80 e9       	ldi	r24, 0x90	; 144
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	23 e0       	ldi	r18, 0x03	; 3
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
}
 3d0:	00 00       	nop
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <is_between>:
}

void gpio_init (void)
{
	memset((void*)&inputs, 0, sizeof(inputs));
}
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <is_between+0x6>
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <is_between+0x8>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <is_between+0xa>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	7c 83       	std	Y+4, r23	; 0x04
 3ec:	6b 83       	std	Y+3, r22	; 0x03
 3ee:	5e 83       	std	Y+6, r21	; 0x06
 3f0:	4d 83       	std	Y+5, r20	; 0x05
 3f2:	2d 81       	ldd	r18, Y+5	; 0x05
 3f4:	3e 81       	ldd	r19, Y+6	; 0x06
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	82 17       	cp	r24, r18
 3fc:	93 07       	cpc	r25, r19
 3fe:	48 f4       	brcc	.+18     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 400:	2d 81       	ldd	r18, Y+5	; 0x05
 402:	3e 81       	ldd	r19, Y+6	; 0x06
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	28 17       	cp	r18, r24
 40a:	39 07       	cpc	r19, r25
 40c:	10 f4       	brcc	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	01 c0       	rjmp	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	26 96       	adiw	r28, 0x06	; 6
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <gpio_read_inputs>:

void gpio_read_inputs (typeInputs *inputs)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <gpio_read_inputs+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
	inputs->UA = adc_ua();
 434:	0e 94 bb 00 	call	0x176	; 0x176 <adc_ua>
 438:	9c 01       	movw	r18, r24
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	fc 01       	movw	r30, r24
 440:	31 83       	std	Z+1, r19	; 0x01
 442:	20 83       	st	Z, r18
	inputs->UR = adc_ur();
 444:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <adc_ur>
 448:	9c 01       	movw	r18, r24
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	fc 01       	movw	r30, r24
 450:	33 83       	std	Z+3, r19	; 0x03
 452:	22 83       	std	Z+2, r18	; 0x02
	inputs->UBat = adc_ad12v();
 454:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_ad12v>
 458:	9c 01       	movw	r18, r24
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	fc 01       	movw	r30, r24
 460:	35 83       	std	Z+5, r19	; 0x05
 462:	24 83       	std	Z+4, r18	; 0x04
	inputs->URef = adc_ad5v();
 464:	0e 94 96 00 	call	0x12c	; 0x12c <adc_ad5v>
 468:	9c 01       	movw	r18, r24
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	fc 01       	movw	r30, r24
 470:	37 83       	std	Z+7, r19	; 0x07
 472:	26 83       	std	Z+6, r18	; 0x06
	inputs->UBat_OK = is_between(UBat_MIN, UBat_MAX, inputs->UBat);
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	fc 01       	movw	r30, r24
 47a:	84 81       	ldd	r24, Z+4	; 0x04
 47c:	95 81       	ldd	r25, Z+5	; 0x05
 47e:	ac 01       	movw	r20, r24
 480:	60 eb       	ldi	r22, 0xB0	; 176
 482:	72 e0       	ldi	r23, 0x02	; 2
 484:	84 ec       	ldi	r24, 0xC4	; 196
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <is_between>
 48c:	28 2f       	mov	r18, r24
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	fc 01       	movw	r30, r24
 494:	20 87       	std	Z+8, r18	; 0x08
}
 496:	00 00       	nop
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <main>:

#include "config.h"
#include "helpers.h"

int main(void)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <main+0x6>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	chip_init();
 4ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <chip_init>
	can_init(1);
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <can_init>
	timer_delay_ms(50);
 4b6:	82 e3       	ldi	r24, 0x32	; 50
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 29 03 	call	0x652	; 0x652 <timer_delay_ms>
	adc_init();
 4be:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_init>
	dac_init();
 4c2:	0e 94 df 01 	call	0x3be	; 0x3be <dac_init>
	spi_init();
 4c6:	0e 94 cb 02 	call	0x596	; 0x596 <spi_init>
	pwm_init();
 4ca:	0e 94 83 02 	call	0x506	; 0x506 <pwm_init>
	sei();
 4ce:	78 94       	sei
		dac_value(1080);
		LED2_TOG;
		timer_delay_ms(10);
		*/
		
		LED2_TOG;
 4d0:	85 e2       	ldi	r24, 0x25	; 37
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	25 e2       	ldi	r18, 0x25	; 37
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	f9 01       	movw	r30, r18
 4da:	30 81       	ld	r19, Z
 4dc:	20 e2       	ldi	r18, 0x20	; 32
 4de:	23 27       	eor	r18, r19
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18
		// HEATER_TOG;
		gpio_read_inputs(&inputs);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 13 02 	call	0x426	; 0x426 <gpio_read_inputs>
		retVal = cj125_read_ident();
 4ec:	0e 94 c9 01 	call	0x392	; 0x392 <cj125_read_ident>
 4f0:	9a 83       	std	Y+2, r25	; 0x02
 4f2:	89 83       	std	Y+1, r24	; 0x01
		
		retVal = cj125_read_diag();
 4f4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <cj125_read_diag>
 4f8:	9a 83       	std	Y+2, r25	; 0x02
 4fa:	89 83       	std	Y+1, r24	; 0x01
		
		timer_delay_ms(200);
 4fc:	88 ec       	ldi	r24, 0xC8	; 200
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 29 03 	call	0x652	; 0x652 <timer_delay_ms>
    }
 504:	e5 cf       	rjmp	.-54     	; 0x4d0 <main+0x2e>

00000506 <pwm_init>:
 */ 

#include "pwm.h"

void pwm_init (void)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	// pin pc1 (OC1B, Timer 1 output compare B) connected to probe heater
	// fast pwm mode, prescaler 64,  top 0x03ff (1023) = 244Hz
	// pwm mode 7, 10-bit resolution
	// clear oc1b on compare match
	
	TCCR1A |= (1 << WGM11)|(1 << WGM10)|(1 << COM1B1);
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	20 e8       	ldi	r18, 0x80	; 128
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	23 62       	ori	r18, 0x23	; 35
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 520:	81 e8       	ldi	r24, 0x81	; 129
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	21 e8       	ldi	r18, 0x81	; 129
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	20 81       	ld	r18, Z
 52c:	2b 60       	ori	r18, 0x0B	; 11
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
	pwm_set_duty(511);
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 a1 02 	call	0x542	; 0x542 <pwm_set_duty>
}
 53a:	00 00       	nop
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <pwm_set_duty>:

void pwm_set_duty (uint16_t duty)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <pwm_set_duty+0x6>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = duty;
 550:	8a e8       	ldi	r24, 0x8A	; 138
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	29 81       	ldd	r18, Y+1	; 0x01
 556:	3a 81       	ldd	r19, Y+2	; 0x02
 558:	fc 01       	movw	r30, r24
 55a:	31 83       	std	Z+1, r19	; 0x01
 55c:	20 83       	st	Z, r18
 55e:	00 00       	nop
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	00 d0       	rcall	.+0      	; 0x570 <__make_u16t+0x6>
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	88 2f       	mov	r24, r24
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	38 2f       	mov	r19, r24
 580:	22 27       	eor	r18, r18
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	82 2b       	or	r24, r18
 58a:	93 2b       	or	r25, r19
}
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
	// enable spi, 2MHz (div 128), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPR1)|(1 << SPR0);
 59e:	8c e4       	ldi	r24, 0x4C	; 76
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2c e4       	ldi	r18, 0x4C	; 76
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	27 65       	ori	r18, 0x57	; 87
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
}
 5b0:	00 00       	nop
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	00 d0       	rcall	.+0      	; 0x5be <spi_read_write+0x6>
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <spi_read_write+0x8>
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	9c 83       	std	Y+4, r25	; 0x04
 5c6:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
 5c8:	8b e2       	ldi	r24, 0x2B	; 43
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	2b e2       	ldi	r18, 0x2B	; 43
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	f9 01       	movw	r30, r18
 5d2:	20 81       	ld	r18, Z
 5d4:	2f 7d       	andi	r18, 0xDF	; 223
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
 5da:	8e e4       	ldi	r24, 0x4E	; 78
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	2b 81       	ldd	r18, Y+3	; 0x03
 5e0:	3c 81       	ldd	r19, Y+4	; 0x04
 5e2:	23 2f       	mov	r18, r19
 5e4:	33 27       	eor	r19, r19
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
 5ea:	00 00       	nop
 5ec:	8d e4       	ldi	r24, 0x4D	; 77
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fc 01       	movw	r30, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	88 23       	and	r24, r24
 5f6:	d4 f7       	brge	.-12     	; 0x5ec <spi_read_write+0x34>
	byte1 = SPDR;
 5f8:	8e e4       	ldi	r24, 0x4E	; 78
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	fc 01       	movw	r30, r24
 5fe:	80 81       	ld	r24, Z
 600:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	8f 73       	andi	r24, 0x3F	; 63
 606:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
 608:	8e e4       	ldi	r24, 0x4E	; 78
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	2b 81       	ldd	r18, Y+3	; 0x03
 60e:	fc 01       	movw	r30, r24
 610:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
 612:	00 00       	nop
 614:	8d e4       	ldi	r24, 0x4D	; 77
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	80 81       	ld	r24, Z
 61c:	88 23       	and	r24, r24
 61e:	d4 f7       	brge	.-12     	; 0x614 <spi_read_write+0x5c>
	byte2 = SPDR;
 620:	8e e4       	ldi	r24, 0x4E	; 78
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	fc 01       	movw	r30, r24
 626:	80 81       	ld	r24, Z
 628:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
 62a:	8b e2       	ldi	r24, 0x2B	; 43
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2b e2       	ldi	r18, 0x2B	; 43
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	20 62       	ori	r18, 0x20	; 32
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
 63c:	6a 81       	ldd	r22, Y+2	; 0x02
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	0e 94 b5 02 	call	0x56a	; 0x56a <__make_u16t>
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <timer_delay_ms>:
	TIMSK0 |= (1 << TOIE0);
	
}

void timer_delay_ms (uint16_t delay)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	00 d0       	rcall	.+0      	; 0x658 <timer_delay_ms+0x6>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	9a 83       	std	Y+2, r25	; 0x02
 65e:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		TCNT0 = 6;
 660:	86 e4       	ldi	r24, 0x46	; 70
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	26 e0       	ldi	r18, 0x06	; 6
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);
 66a:	85 e4       	ldi	r24, 0x45	; 69
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	25 e4       	ldi	r18, 0x45	; 69
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	f9 01       	movw	r30, r18
 674:	20 81       	ld	r18, Z
 676:	23 60       	ori	r18, 0x03	; 3
 678:	fc 01       	movw	r30, r24
 67a:	20 83       	st	Z, r18
		while ((TIFR0 & (1 << TOV0)) == 0);
 67c:	00 00       	nop
 67e:	85 e3       	ldi	r24, 0x35	; 53
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	fc 01       	movw	r30, r24
 684:	80 81       	ld	r24, Z
 686:	88 2f       	mov	r24, r24
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	99 27       	eor	r25, r25
 68e:	89 2b       	or	r24, r25
 690:	b1 f3       	breq	.-20     	; 0x67e <timer_delay_ms+0x2c>
		TIFR0 |= (1 << TOV0);
 692:	85 e3       	ldi	r24, 0x35	; 53
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	25 e3       	ldi	r18, 0x35	; 53
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	f9 01       	movw	r30, r18
 69c:	20 81       	ld	r18, Z
 69e:	21 60       	ori	r18, 0x01	; 1
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 83       	st	Z, r18
		delay--;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	9a 83       	std	Y+2, r25	; 0x02
 6ac:	89 83       	std	Y+1, r24	; 0x01
	} while (delay > 0);
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	9a 81       	ldd	r25, Y+2	; 0x02
 6b2:	89 2b       	or	r24, r25
 6b4:	a9 f6       	brne	.-86     	; 0x660 <timer_delay_ms+0xe>
}
 6b6:	00 00       	nop
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
