
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00002828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c45  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001206  00000000  00000000  00004725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000303c  00000000  00000000  0000592b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00008968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ac13  00000000  00000000  00008ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bc  00000000  00000000  00013b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000144c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000493a  00000000  00000000  00014647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
       4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      6c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      7c:	a3 02       	muls	r26, r19
      7e:	99 03       	fmulsu	r17, r17
      80:	83 04       	cpc	r8, r3
      82:	51 05       	cpc	r21, r1
      84:	d4 05       	cpc	r29, r4
      86:	64 06       	cpc	r6, r20
      88:	fe 06       	cpc	r15, r30
      8a:	24 08       	sbc	r2, r4
      8c:	57 09       	sbc	r21, r7
      8e:	94 0a       	sbc	r9, r20
      90:	4a 0b       	sbc	r20, r26
      92:	cd 0f       	add	r28, r29
      94:	37 11       	cpse	r19, r7
      96:	3c 11       	cpse	r19, r12
      98:	35 10       	cpse	r3, r5
      9a:	8a 10       	cpse	r8, r10
      9c:	d1 0f       	add	r29, r17
      9e:	3c 11       	cpse	r19, r12
      a0:	37 11       	cpse	r19, r7

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d8 e0       	ldi	r29, 0x08	; 8
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	11 e0       	ldi	r17, 0x01	; 1
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e4 eb       	ldi	r30, 0xB4	; 180
      b6:	f7 e2       	ldi	r31, 0x27	; 39
      b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
      ba:	05 90       	lpm	r0, Z+
      bc:	0d 92       	st	X+, r0
      be:	a0 30       	cpi	r26, 0x00	; 0
      c0:	b1 07       	cpc	r27, r17
      c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
      cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
      ce:	a2 31       	cpi	r26, 0x12	; 18
      d0:	b2 07       	cpc	r27, r18
      d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
      d4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <main>
      d8:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <_exit>

000000dc <__bad_interrupt>:
      dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <adc_init>:
	ADCSRA |= (1<<ADSC);		// start single conversion
	while(ADCSRA & (1<<ADSC));	// wait till done
	
	temp1 = ADC * (5.0/1024)*1000.0/25;	
	return temp1;
}
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	8b e7       	ldi	r24, 0x7B	; 123
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	2b e7       	ldi	r18, 0x7B	; 123
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	20 62       	ori	r18, 0x20	; 32
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
      fa:	8c e7       	ldi	r24, 0x7C	; 124
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	20 e4       	ldi	r18, 0x40	; 64
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	2a e7       	ldi	r18, 0x7A	; 122
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	20 81       	ld	r18, Z
     110:	27 68       	ori	r18, 0x87	; 135
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
     116:	00 00       	nop
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <adc_ad12v>:

uint16_t adc_ad12v (void)	// adc channel 5
{
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX2)|(1 << MUX0);			// select channel
     126:	8c e7       	ldi	r24, 0x7C	; 124
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	25 e4       	ldi	r18, 0x45	; 69
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     130:	8a e7       	ldi	r24, 0x7A	; 122
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2a e7       	ldi	r18, 0x7A	; 122
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 64       	ori	r18, 0x40	; 64
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     142:	00 00       	nop
     144:	8a e7       	ldi	r24, 0x7A	; 122
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	80 74       	andi	r24, 0x40	; 64
     152:	99 27       	eor	r25, r25
     154:	89 2b       	or	r24, r25
     156:	b1 f7       	brne	.-20     	; 0x144 <adc_ad12v+0x26>
	return ADC;
     158:	88 e7       	ldi	r24, 0x78	; 120
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <adc_reference>:


uint16_t adc_reference (void)	// adc channel 3
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX1)|(1 << MUX0);			// select channel
     170:	8c e7       	ldi	r24, 0x7C	; 124
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	23 e4       	ldi	r18, 0x43	; 67
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     17a:	8a e7       	ldi	r24, 0x7A	; 122
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	2a e7       	ldi	r18, 0x7A	; 122
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	20 64       	ori	r18, 0x40	; 64
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     18c:	00 00       	nop
     18e:	8a e7       	ldi	r24, 0x7A	; 122
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	fc 01       	movw	r30, r24
     194:	80 81       	ld	r24, Z
     196:	88 2f       	mov	r24, r24
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	80 74       	andi	r24, 0x40	; 64
     19c:	99 27       	eor	r25, r25
     19e:	89 2b       	or	r24, r25
     1a0:	b1 f7       	brne	.-20     	; 0x18e <adc_reference+0x26>
	return ADC;
     1a2:	88 e7       	ldi	r24, 0x78	; 120
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <adc_ua>:

uint16_t adc_ua (void)	// adc channel 8
{
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3);			// select channel
     1ba:	8c e7       	ldi	r24, 0x7C	; 124
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	28 e4       	ldi	r18, 0x48	; 72
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     1c4:	8a e7       	ldi	r24, 0x7A	; 122
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2a e7       	ldi	r18, 0x7A	; 122
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	20 64       	ori	r18, 0x40	; 64
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     1d6:	00 00       	nop
     1d8:	8a e7       	ldi	r24, 0x7A	; 122
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	fc 01       	movw	r30, r24
     1de:	80 81       	ld	r24, Z
     1e0:	88 2f       	mov	r24, r24
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	80 74       	andi	r24, 0x40	; 64
     1e6:	99 27       	eor	r25, r25
     1e8:	89 2b       	or	r24, r25
     1ea:	b1 f7       	brne	.-20     	; 0x1d8 <adc_ua+0x26>
	return ADC;
     1ec:	88 e7       	ldi	r24, 0x78	; 120
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	fc 01       	movw	r30, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <adc_ur>:

uint16_t adc_ur (void)	// adc channel 9
{
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3)|(1 << MUX0);			// select channel
     204:	8c e7       	ldi	r24, 0x7C	; 124
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 e4       	ldi	r18, 0x49	; 73
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     20e:	8a e7       	ldi	r24, 0x7A	; 122
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	2a e7       	ldi	r18, 0x7A	; 122
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	f9 01       	movw	r30, r18
     218:	20 81       	ld	r18, Z
     21a:	20 64       	ori	r18, 0x40	; 64
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     220:	00 00       	nop
     222:	8a e7       	ldi	r24, 0x7A	; 122
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	fc 01       	movw	r30, r24
     228:	80 81       	ld	r24, Z
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	80 74       	andi	r24, 0x40	; 64
     230:	99 27       	eor	r25, r25
     232:	89 2b       	or	r24, r25
     234:	b1 f7       	brne	.-20     	; 0x222 <adc_ur+0x26>
	return ADC;
     236:	88 e7       	ldi	r24, 0x78	; 120
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	fc 01       	movw	r30, r24
     23c:	80 81       	ld	r24, Z
     23e:	91 81       	ldd	r25, Z+1	; 0x01
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <can_clear_all_mob+0x6>
     24c:	1f 92       	push	r1
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	19 82       	std	Y+1, r1	; 0x01
     254:	1d c0       	rjmp	.+58     	; 0x290 <can_clear_all_mob+0x4a>
     256:	8d ee       	ldi	r24, 0xED	; 237
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	22 95       	swap	r18
     25e:	20 7f       	andi	r18, 0xF0	; 240
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	8e ee       	ldi	r24, 0xEE	; 238
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9b 83       	std	Y+3, r25	; 0x03
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	09 c0       	rjmp	.+18     	; 0x280 <can_clear_all_mob+0x3a>
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	9b 81       	ldd	r25, Y+3	; 0x03
     272:	fc 01       	movw	r30, r24
     274:	10 82       	st	Z, r1
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	9b 83       	std	Y+3, r25	; 0x03
     27e:	8a 83       	std	Y+2, r24	; 0x02
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	9b 81       	ldd	r25, Y+3	; 0x03
     284:	88 3f       	cpi	r24, 0xF8	; 248
     286:	91 05       	cpc	r25, r1
     288:	90 f3       	brcs	.-28     	; 0x26e <can_clear_all_mob+0x28>
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	86 30       	cpi	r24, 0x06	; 6
     294:	00 f3       	brcs	.-64     	; 0x256 <can_clear_all_mob+0x10>
     296:	00 00       	nop
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <can_get_mob_free>:
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <can_get_mob_free+0x6>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	8d ee       	ldi	r24, 0xED	; 237
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	19 82       	std	Y+1, r1	; 0x01
     2ba:	1b c0       	rjmp	.+54     	; 0x2f2 <can_get_mob_free+0x4e>
     2bc:	8d ee       	ldi	r24, 0xED	; 237
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	22 95       	swap	r18
     2c4:	20 7f       	andi	r18, 0xF0	; 240
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
     2ca:	8f ee       	ldi	r24, 0xEF	; 239
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	80 7c       	andi	r24, 0xC0	; 192
     2d8:	99 27       	eor	r25, r25
     2da:	89 2b       	or	r24, r25
     2dc:	39 f4       	brne	.+14     	; 0x2ec <can_get_mob_free+0x48>
     2de:	8d ee       	ldi	r24, 0xED	; 237
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	2a 81       	ldd	r18, Y+2	; 0x02
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <can_get_mob_free+0x60>
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	86 30       	cpi	r24, 0x06	; 6
     2f6:	10 f3       	brcs	.-60     	; 0x2bc <can_get_mob_free+0x18>
     2f8:	8d ee       	ldi	r24, 0xED	; 237
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <can_get_mob_status>:
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <can_get_mob_status+0x6>
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	8f ee       	ldi	r24, 0xEF	; 239
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	80 7c       	andi	r24, 0xC0	; 192
     326:	99 27       	eor	r25, r25
     328:	89 2b       	or	r24, r25
     32a:	11 f4       	brne	.+4      	; 0x330 <can_get_mob_status+0x22>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	1c c0       	rjmp	.+56     	; 0x368 <can_get_mob_status+0x5a>
     330:	8e ee       	ldi	r24, 0xEE	; 238
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	80 7e       	andi	r24, 0xE0	; 224
     33e:	8a 83       	std	Y+2, r24	; 0x02
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	80 32       	cpi	r24, 0x20	; 32
     344:	31 f0       	breq	.+12     	; 0x352 <can_get_mob_status+0x44>
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	80 34       	cpi	r24, 0x40	; 64
     34a:	19 f0       	breq	.+6      	; 0x352 <can_get_mob_status+0x44>
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	80 3a       	cpi	r24, 0xA0	; 160
     350:	11 f4       	brne	.+4      	; 0x356 <can_get_mob_status+0x48>
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	09 c0       	rjmp	.+18     	; 0x368 <can_get_mob_status+0x5a>
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	8f 71       	andi	r24, 0x1F	; 31
     35a:	8a 83       	std	Y+2, r24	; 0x02
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	88 23       	and	r24, r24
     360:	11 f0       	breq	.+4      	; 0x366 <can_get_mob_status+0x58>
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	01 c0       	rjmp	.+2      	; 0x368 <can_get_mob_status+0x5a>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <can_get_data>:
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	00 d0       	rcall	.+0      	; 0x378 <can_get_data+0x6>
     378:	1f 92       	push	r1
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	9b 83       	std	Y+3, r25	; 0x03
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	10 c0       	rjmp	.+32     	; 0x3a6 <can_get_data+0x34>
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2a 81       	ldd	r18, Y+2	; 0x02
     38e:	3b 81       	ldd	r19, Y+3	; 0x03
     390:	82 0f       	add	r24, r18
     392:	93 1f       	adc	r25, r19
     394:	2a ef       	ldi	r18, 0xFA	; 250
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	f9 01       	movw	r30, r18
     39a:	20 81       	ld	r18, Z
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	8f ee       	ldi	r24, 0xEF	; 239
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	99 27       	eor	r25, r25
     3bc:	28 17       	cp	r18, r24
     3be:	39 07       	cpc	r19, r25
     3c0:	14 f3       	brlt	.-60     	; 0x386 <can_get_data+0x14>
     3c2:	00 00       	nop
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     3dc:	88 ed       	ldi	r24, 0xD8	; 216
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
    Can_conf_bt();
     3e6:	82 ee       	ldi	r24, 0xE2	; 226
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	26 e0       	ldi	r18, 0x06	; 6
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
     3f0:	83 ee       	ldi	r24, 0xE3	; 227
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	24 e0       	ldi	r18, 0x04	; 4
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
     3fa:	84 ee       	ldi	r24, 0xE4	; 228
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	23 e1       	ldi	r18, 0x13	; 19
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
    return 1;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0f 90       	pop	r0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	1f 92       	push	r1
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <can_fixed_baudrate>
     420:	88 23       	and	r24, r24
     422:	11 f4       	brne	.+4      	; 0x428 <can_init+0x1a>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0c c0       	rjmp	.+24     	; 0x440 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     428:	0e 94 23 01 	call	0x246	; 0x246 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     42c:	88 ed       	ldi	r24, 0xD8	; 216
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	28 ed       	ldi	r18, 0xD8	; 216
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	22 60       	ori	r18, 0x02	; 2
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
    return (1);
     43e:	81 e0       	ldi	r24, 0x01	; 1
}
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	2a 97       	sbiw	r28, 0x0a	; 10
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	9a 87       	std	Y+10, r25	; 0x0a
     45e:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     460:	89 85       	ldd	r24, Y+9	; 0x09
     462:	9a 85       	ldd	r25, Y+10	; 0x0a
     464:	fc 01       	movw	r30, r24
     466:	81 81       	ldd	r24, Z+1	; 0x01
     468:	8c 30       	cpi	r24, 0x0C	; 12
     46a:	39 f5       	brne	.+78     	; 0x4ba <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     46c:	89 85       	ldd	r24, Y+9	; 0x09
     46e:	9a 85       	ldd	r25, Y+10	; 0x0a
     470:	fc 01       	movw	r30, r24
     472:	81 85       	ldd	r24, Z+9	; 0x09
     474:	80 36       	cpi	r24, 0x60	; 96
     476:	d9 f4       	brne	.+54     	; 0x4ae <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     478:	8d ee       	ldi	r24, 0xED	; 237
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	29 85       	ldd	r18, Y+9	; 0x09
     47e:	3a 85       	ldd	r19, Y+10	; 0x0a
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	22 95       	swap	r18
     486:	20 7f       	andi	r18, 0xF0	; 240
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
      Can_mob_abort();
     48c:	8f ee       	ldi	r24, 0xEF	; 239
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	2f ee       	ldi	r18, 0xEF	; 239
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	2f 73       	andi	r18, 0x3F	; 63
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     49e:	8e ee       	ldi	r24, 0xEE	; 238
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	fc 01       	movw	r30, r24
     4a4:	10 82       	st	Z, r1
      cmd->handle = 0;
     4a6:	89 85       	ldd	r24, Y+9	; 0x09
     4a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4aa:	fc 01       	movw	r30, r24
     4ac:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     4ae:	89 85       	ldd	r24, Y+9	; 0x09
     4b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b2:	fc 01       	movw	r30, r24
     4b4:	11 86       	std	Z+9, r1	; 0x09
     4b6:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__stack+0x1061>
  }
  else
  {
    mob_handle = can_get_mob_free();
     4ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <can_get_mob_free>
     4be:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	8f 3f       	cpi	r24, 0xFF	; 255
     4c4:	11 f4       	brne	.+4      	; 0x4ca <can_cmd+0x82>
     4c6:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__stack+0x1053>
    {
      cmd->status = MOB_PENDING; 
     4ca:	89 85       	ldd	r24, Y+9	; 0x09
     4cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ce:	20 e6       	ldi	r18, 0x60	; 96
     4d0:	fc 01       	movw	r30, r24
     4d2:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d8:	2c 81       	ldd	r18, Y+4	; 0x04
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     4de:	8d ee       	ldi	r24, 0xED	; 237
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	2c 81       	ldd	r18, Y+4	; 0x04
     4e4:	22 95       	swap	r18
     4e6:	20 7f       	andi	r18, 0xF0	; 240
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
      Can_clear_mob();
     4ec:	8e ee       	ldi	r24, 0xEE	; 238
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9b 83       	std	Y+3, r25	; 0x03
     4f2:	8a 83       	std	Y+2, r24	; 0x02
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <can_cmd+0xc0>
     4f6:	8a 81       	ldd	r24, Y+2	; 0x02
     4f8:	9b 81       	ldd	r25, Y+3	; 0x03
     4fa:	fc 01       	movw	r30, r24
     4fc:	10 82       	st	Z, r1
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	9b 81       	ldd	r25, Y+3	; 0x03
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	9b 83       	std	Y+3, r25	; 0x03
     506:	8a 83       	std	Y+2, r24	; 0x02
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	9b 81       	ldd	r25, Y+3	; 0x03
     50c:	88 3f       	cpi	r24, 0xF8	; 248
     50e:	91 05       	cpc	r25, r1
     510:	90 f3       	brcs	.-28     	; 0x4f6 <can_cmd+0xae>
          
      switch (cmd->cmd)
     512:	89 85       	ldd	r24, Y+9	; 0x09
     514:	9a 85       	ldd	r25, Y+10	; 0x0a
     516:	fc 01       	movw	r30, r24
     518:	81 81       	ldd	r24, Z+1	; 0x01
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	09 2e       	mov	r0, r25
     520:	00 0c       	add	r0, r0
     522:	aa 0b       	sbc	r26, r26
     524:	bb 0b       	sbc	r27, r27
     526:	41 e0       	ldi	r20, 0x01	; 1
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	2a e0       	ldi	r18, 0x0A	; 10
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	84 1b       	sub	r24, r20
     530:	95 0b       	sbc	r25, r21
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	10 f4       	brcc	.+4      	; 0x53c <can_cmd+0xf4>
     538:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__stack+0x1047>
     53c:	82 5c       	subi	r24, 0xC2	; 194
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	fc 01       	movw	r30, r24
     542:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     546:	89 85       	ldd	r24, Y+9	; 0x09
     548:	9a 85       	ldd	r25, Y+10	; 0x0a
     54a:	fc 01       	movw	r30, r24
     54c:	83 85       	ldd	r24, Z+11	; 0x0b
     54e:	88 23       	and	r24, r24
     550:	09 f4       	brne	.+2      	; 0x554 <can_cmd+0x10c>
     552:	69 c0       	rjmp	.+210    	; 0x626 <can_cmd+0x1de>
     554:	83 ef       	ldi	r24, 0xF3	; 243
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	29 85       	ldd	r18, Y+9	; 0x09
     55a:	3a 85       	ldd	r19, Y+10	; 0x0a
     55c:	2e 5f       	subi	r18, 0xFE	; 254
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	2d 5f       	subi	r18, 0xFD	; 253
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	f9 01       	movw	r30, r18
     566:	20 81       	ld	r18, Z
     568:	42 2f       	mov	r20, r18
     56a:	44 0f       	add	r20, r20
     56c:	44 0f       	add	r20, r20
     56e:	44 0f       	add	r20, r20
     570:	29 85       	ldd	r18, Y+9	; 0x09
     572:	3a 85       	ldd	r19, Y+10	; 0x0a
     574:	2e 5f       	subi	r18, 0xFE	; 254
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	f9 01       	movw	r30, r18
     57e:	20 81       	ld	r18, Z
     580:	22 95       	swap	r18
     582:	26 95       	lsr	r18
     584:	27 70       	andi	r18, 0x07	; 7
     586:	24 0f       	add	r18, r20
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
     58c:	82 ef       	ldi	r24, 0xF2	; 242
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	29 85       	ldd	r18, Y+9	; 0x09
     592:	3a 85       	ldd	r19, Y+10	; 0x0a
     594:	2e 5f       	subi	r18, 0xFE	; 254
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	2e 5f       	subi	r18, 0xFE	; 254
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	f9 01       	movw	r30, r18
     59e:	20 81       	ld	r18, Z
     5a0:	42 2f       	mov	r20, r18
     5a2:	44 0f       	add	r20, r20
     5a4:	44 0f       	add	r20, r20
     5a6:	44 0f       	add	r20, r20
     5a8:	29 85       	ldd	r18, Y+9	; 0x09
     5aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     5ac:	2e 5f       	subi	r18, 0xFE	; 254
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	2f 5f       	subi	r18, 0xFF	; 255
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	f9 01       	movw	r30, r18
     5b6:	20 81       	ld	r18, Z
     5b8:	22 95       	swap	r18
     5ba:	26 95       	lsr	r18
     5bc:	27 70       	andi	r18, 0x07	; 7
     5be:	24 0f       	add	r18, r20
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	81 ef       	ldi	r24, 0xF1	; 241
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	29 85       	ldd	r18, Y+9	; 0x09
     5ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     5cc:	2e 5f       	subi	r18, 0xFE	; 254
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	2f 5f       	subi	r18, 0xFF	; 255
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	42 2f       	mov	r20, r18
     5da:	44 0f       	add	r20, r20
     5dc:	44 0f       	add	r20, r20
     5de:	44 0f       	add	r20, r20
     5e0:	29 85       	ldd	r18, Y+9	; 0x09
     5e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e4:	2e 5f       	subi	r18, 0xFE	; 254
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	22 95       	swap	r18
     5ee:	26 95       	lsr	r18
     5f0:	27 70       	andi	r18, 0x07	; 7
     5f2:	24 0f       	add	r18, r20
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
     5f8:	80 ef       	ldi	r24, 0xF0	; 240
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 85       	ldd	r18, Y+9	; 0x09
     5fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     600:	2e 5f       	subi	r18, 0xFE	; 254
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	22 0f       	add	r18, r18
     60a:	22 0f       	add	r18, r18
     60c:	22 0f       	add	r18, r18
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
     612:	8f ee       	ldi	r24, 0xEF	; 239
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2f ee       	ldi	r18, 0xEF	; 239
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	20 61       	ori	r18, 0x10	; 16
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
     624:	30 c0       	rjmp	.+96     	; 0x686 <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     626:	83 ef       	ldi	r24, 0xF3	; 243
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	29 85       	ldd	r18, Y+9	; 0x09
     62c:	3a 85       	ldd	r19, Y+10	; 0x0a
     62e:	2e 5f       	subi	r18, 0xFE	; 254
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	2f 5f       	subi	r18, 0xFF	; 255
     634:	3f 4f       	sbci	r19, 0xFF	; 255
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	42 2f       	mov	r20, r18
     63c:	42 95       	swap	r20
     63e:	44 0f       	add	r20, r20
     640:	40 7e       	andi	r20, 0xE0	; 224
     642:	29 85       	ldd	r18, Y+9	; 0x09
     644:	3a 85       	ldd	r19, Y+10	; 0x0a
     646:	2e 5f       	subi	r18, 0xFE	; 254
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	f9 01       	movw	r30, r18
     64c:	20 81       	ld	r18, Z
     64e:	26 95       	lsr	r18
     650:	26 95       	lsr	r18
     652:	26 95       	lsr	r18
     654:	24 0f       	add	r18, r20
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	82 ef       	ldi	r24, 0xF2	; 242
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	29 85       	ldd	r18, Y+9	; 0x09
     660:	3a 85       	ldd	r19, Y+10	; 0x0a
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	22 95       	swap	r18
     66c:	22 0f       	add	r18, r18
     66e:	20 7e       	andi	r18, 0xE0	; 224
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
     674:	8f ee       	ldi	r24, 0xEF	; 239
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2f ee       	ldi	r18, 0xEF	; 239
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	2f 7e       	andi	r18, 0xEF	; 239
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	13 c0       	rjmp	.+38     	; 0x6b0 <can_cmd+0x268>
     68a:	8a ef       	ldi	r24, 0xFA	; 250
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	29 85       	ldd	r18, Y+9	; 0x09
     690:	3a 85       	ldd	r19, Y+10	; 0x0a
     692:	f9 01       	movw	r30, r18
     694:	47 81       	ldd	r20, Z+7	; 0x07
     696:	50 85       	ldd	r21, Z+8	; 0x08
     698:	29 81       	ldd	r18, Y+1	; 0x01
     69a:	22 2f       	mov	r18, r18
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	24 0f       	add	r18, r20
     6a0:	35 1f       	adc	r19, r21
     6a2:	f9 01       	movw	r30, r18
     6a4:	20 81       	ld	r18, Z
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	89 85       	ldd	r24, Y+9	; 0x09
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	fc 01       	movw	r30, r24
     6b6:	96 81       	ldd	r25, Z+6	; 0x06
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	89 17       	cp	r24, r25
     6bc:	30 f3       	brcs	.-52     	; 0x68a <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     6be:	89 85       	ldd	r24, Y+9	; 0x09
     6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c2:	fc 01       	movw	r30, r24
     6c4:	82 85       	ldd	r24, Z+10	; 0x0a
     6c6:	88 23       	and	r24, r24
     6c8:	51 f0       	breq	.+20     	; 0x6de <can_cmd+0x296>
     6ca:	80 ef       	ldi	r24, 0xF0	; 240
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	20 ef       	ldi	r18, 0xF0	; 240
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	24 60       	ori	r18, 0x04	; 4
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
     6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     6de:	80 ef       	ldi	r24, 0xF0	; 240
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	20 ef       	ldi	r18, 0xF0	; 240
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	2b 7f       	andi	r18, 0xFB	; 251
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     6f0:	8f ee       	ldi	r24, 0xEF	; 239
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2f ee       	ldi	r18, 0xEF	; 239
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	40 81       	ld	r20, Z
     6fc:	29 85       	ldd	r18, Y+9	; 0x09
     6fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     700:	f9 01       	movw	r30, r18
     702:	26 81       	ldd	r18, Z+6	; 0x06
     704:	24 2b       	or	r18, r20
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
          Can_config_tx();
     70a:	8f ee       	ldi	r24, 0xEF	; 239
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2f ee       	ldi	r18, 0xEF	; 239
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	2f 73       	andi	r18, 0x3F	; 63
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
     71c:	8f ee       	ldi	r24, 0xEF	; 239
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2f ee       	ldi	r18, 0xEF	; 239
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	20 64       	ori	r18, 0x40	; 64
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18
          break;
     72e:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	9a 85       	ldd	r25, Y+10	; 0x0a
     736:	fc 01       	movw	r30, r24
     738:	83 85       	ldd	r24, Z+11	; 0x0b
     73a:	88 23       	and	r24, r24
     73c:	09 f4       	brne	.+2      	; 0x740 <can_cmd+0x2f8>
     73e:	69 c0       	rjmp	.+210    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     740:	83 ef       	ldi	r24, 0xF3	; 243
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	29 85       	ldd	r18, Y+9	; 0x09
     746:	3a 85       	ldd	r19, Y+10	; 0x0a
     748:	2e 5f       	subi	r18, 0xFE	; 254
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	2d 5f       	subi	r18, 0xFD	; 253
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	42 2f       	mov	r20, r18
     756:	44 0f       	add	r20, r20
     758:	44 0f       	add	r20, r20
     75a:	44 0f       	add	r20, r20
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	3a 85       	ldd	r19, Y+10	; 0x0a
     760:	2e 5f       	subi	r18, 0xFE	; 254
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	2e 5f       	subi	r18, 0xFE	; 254
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	22 95       	swap	r18
     76e:	26 95       	lsr	r18
     770:	27 70       	andi	r18, 0x07	; 7
     772:	24 0f       	add	r18, r20
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
     778:	82 ef       	ldi	r24, 0xF2	; 242
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	29 85       	ldd	r18, Y+9	; 0x09
     77e:	3a 85       	ldd	r19, Y+10	; 0x0a
     780:	2e 5f       	subi	r18, 0xFE	; 254
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	2e 5f       	subi	r18, 0xFE	; 254
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	42 2f       	mov	r20, r18
     78e:	44 0f       	add	r20, r20
     790:	44 0f       	add	r20, r20
     792:	44 0f       	add	r20, r20
     794:	29 85       	ldd	r18, Y+9	; 0x09
     796:	3a 85       	ldd	r19, Y+10	; 0x0a
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	22 95       	swap	r18
     7a6:	26 95       	lsr	r18
     7a8:	27 70       	andi	r18, 0x07	; 7
     7aa:	24 0f       	add	r18, r20
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	81 ef       	ldi	r24, 0xF1	; 241
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	29 85       	ldd	r18, Y+9	; 0x09
     7b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b8:	2e 5f       	subi	r18, 0xFE	; 254
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	42 2f       	mov	r20, r18
     7c6:	44 0f       	add	r20, r20
     7c8:	44 0f       	add	r20, r20
     7ca:	44 0f       	add	r20, r20
     7cc:	29 85       	ldd	r18, Y+9	; 0x09
     7ce:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d0:	2e 5f       	subi	r18, 0xFE	; 254
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	22 95       	swap	r18
     7da:	26 95       	lsr	r18
     7dc:	27 70       	andi	r18, 0x07	; 7
     7de:	24 0f       	add	r18, r20
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
     7e4:	80 ef       	ldi	r24, 0xF0	; 240
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	29 85       	ldd	r18, Y+9	; 0x09
     7ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ec:	2e 5f       	subi	r18, 0xFE	; 254
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	22 0f       	add	r18, r18
     7f6:	22 0f       	add	r18, r18
     7f8:	22 0f       	add	r18, r18
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
     7fe:	8f ee       	ldi	r24, 0xEF	; 239
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2f ee       	ldi	r18, 0xEF	; 239
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	20 61       	ori	r18, 0x10	; 16
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
     810:	30 c0       	rjmp	.+96     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
          else              { Can_set_std_id(cmd->id.std);}
     812:	83 ef       	ldi	r24, 0xF3	; 243
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	29 85       	ldd	r18, Y+9	; 0x09
     818:	3a 85       	ldd	r19, Y+10	; 0x0a
     81a:	2e 5f       	subi	r18, 0xFE	; 254
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	42 2f       	mov	r20, r18
     828:	42 95       	swap	r20
     82a:	44 0f       	add	r20, r20
     82c:	40 7e       	andi	r20, 0xE0	; 224
     82e:	29 85       	ldd	r18, Y+9	; 0x09
     830:	3a 85       	ldd	r19, Y+10	; 0x0a
     832:	2e 5f       	subi	r18, 0xFE	; 254
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	f9 01       	movw	r30, r18
     838:	20 81       	ld	r18, Z
     83a:	26 95       	lsr	r18
     83c:	26 95       	lsr	r18
     83e:	26 95       	lsr	r18
     840:	24 0f       	add	r18, r20
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
     846:	82 ef       	ldi	r24, 0xF2	; 242
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	29 85       	ldd	r18, Y+9	; 0x09
     84c:	3a 85       	ldd	r19, Y+10	; 0x0a
     84e:	2e 5f       	subi	r18, 0xFE	; 254
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	22 95       	swap	r18
     858:	22 0f       	add	r18, r18
     85a:	20 7e       	andi	r18, 0xE0	; 224
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
     860:	8f ee       	ldi	r24, 0xEF	; 239
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	2f ee       	ldi	r18, 0xEF	; 239
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	f9 01       	movw	r30, r18
     86a:	20 81       	ld	r18, Z
     86c:	2f 7e       	andi	r18, 0xEF	; 239
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     872:	19 82       	std	Y+1, r1	; 0x01
     874:	13 c0       	rjmp	.+38     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
     876:	8a ef       	ldi	r24, 0xFA	; 250
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	29 85       	ldd	r18, Y+9	; 0x09
     87c:	3a 85       	ldd	r19, Y+10	; 0x0a
     87e:	f9 01       	movw	r30, r18
     880:	47 81       	ldd	r20, Z+7	; 0x07
     882:	50 85       	ldd	r21, Z+8	; 0x08
     884:	29 81       	ldd	r18, Y+1	; 0x01
     886:	22 2f       	mov	r18, r18
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	24 0f       	add	r18, r20
     88c:	35 1f       	adc	r19, r21
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	8f 5f       	subi	r24, 0xFF	; 255
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	fc 01       	movw	r30, r24
     8a2:	96 81       	ldd	r25, Z+6	; 0x06
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	89 17       	cp	r24, r25
     8a8:	30 f3       	brcs	.-52     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ae:	fc 01       	movw	r30, r24
     8b0:	12 86       	std	Z+10, r1	; 0x0a
     8b2:	80 ef       	ldi	r24, 0xF0	; 240
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	20 ef       	ldi	r18, 0xF0	; 240
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	2b 7f       	andi	r18, 0xFB	; 251
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     8c4:	8f ee       	ldi	r24, 0xEF	; 239
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2f ee       	ldi	r18, 0xEF	; 239
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	40 81       	ld	r20, Z
     8d0:	29 85       	ldd	r18, Y+9	; 0x09
     8d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d4:	f9 01       	movw	r30, r18
     8d6:	26 81       	ldd	r18, Z+6	; 0x06
     8d8:	24 2b       	or	r18, r20
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
          Can_config_tx();
     8de:	8f ee       	ldi	r24, 0xEF	; 239
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2f ee       	ldi	r18, 0xEF	; 239
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	2f 73       	andi	r18, 0x3F	; 63
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	8f ee       	ldi	r24, 0xEF	; 239
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	2f ee       	ldi	r18, 0xEF	; 239
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	20 64       	ori	r18, 0x40	; 64
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
          break;
     902:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	9a 85       	ldd	r25, Y+10	; 0x0a
     90a:	fc 01       	movw	r30, r24
     90c:	83 85       	ldd	r24, Z+11	; 0x0b
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
     912:	69 c0       	rjmp	.+210    	; 0x9e6 <__stack+0xe7>
     914:	83 ef       	ldi	r24, 0xF3	; 243
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	29 85       	ldd	r18, Y+9	; 0x09
     91a:	3a 85       	ldd	r19, Y+10	; 0x0a
     91c:	2e 5f       	subi	r18, 0xFE	; 254
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	2d 5f       	subi	r18, 0xFD	; 253
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	42 2f       	mov	r20, r18
     92a:	44 0f       	add	r20, r20
     92c:	44 0f       	add	r20, r20
     92e:	44 0f       	add	r20, r20
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	2e 5f       	subi	r18, 0xFE	; 254
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	2e 5f       	subi	r18, 0xFE	; 254
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	f9 01       	movw	r30, r18
     93e:	20 81       	ld	r18, Z
     940:	22 95       	swap	r18
     942:	26 95       	lsr	r18
     944:	27 70       	andi	r18, 0x07	; 7
     946:	24 0f       	add	r18, r20
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	82 ef       	ldi	r24, 0xF2	; 242
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	2e 5f       	subi	r18, 0xFE	; 254
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	2e 5f       	subi	r18, 0xFE	; 254
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	42 2f       	mov	r20, r18
     962:	44 0f       	add	r20, r20
     964:	44 0f       	add	r20, r20
     966:	44 0f       	add	r20, r20
     968:	29 85       	ldd	r18, Y+9	; 0x09
     96a:	3a 85       	ldd	r19, Y+10	; 0x0a
     96c:	2e 5f       	subi	r18, 0xFE	; 254
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	22 95       	swap	r18
     97a:	26 95       	lsr	r18
     97c:	27 70       	andi	r18, 0x07	; 7
     97e:	24 0f       	add	r18, r20
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	81 ef       	ldi	r24, 0xF1	; 241
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	29 85       	ldd	r18, Y+9	; 0x09
     98a:	3a 85       	ldd	r19, Y+10	; 0x0a
     98c:	2e 5f       	subi	r18, 0xFE	; 254
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	2f 5f       	subi	r18, 0xFF	; 255
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	42 2f       	mov	r20, r18
     99a:	44 0f       	add	r20, r20
     99c:	44 0f       	add	r20, r20
     99e:	44 0f       	add	r20, r20
     9a0:	29 85       	ldd	r18, Y+9	; 0x09
     9a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a4:	2e 5f       	subi	r18, 0xFE	; 254
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	f9 01       	movw	r30, r18
     9aa:	20 81       	ld	r18, Z
     9ac:	22 95       	swap	r18
     9ae:	26 95       	lsr	r18
     9b0:	27 70       	andi	r18, 0x07	; 7
     9b2:	24 0f       	add	r18, r20
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
     9b8:	80 ef       	ldi	r24, 0xF0	; 240
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	2e 5f       	subi	r18, 0xFE	; 254
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	22 0f       	add	r18, r18
     9ca:	22 0f       	add	r18, r18
     9cc:	22 0f       	add	r18, r18
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8f ee       	ldi	r24, 0xEF	; 239
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2f ee       	ldi	r18, 0xEF	; 239
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	20 61       	ori	r18, 0x10	; 16
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	30 c0       	rjmp	.+96     	; 0xa46 <__stack+0x147>
          else              { Can_set_std_id(cmd->id.std);}
     9e6:	83 ef       	ldi	r24, 0xF3	; 243
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	2e 5f       	subi	r18, 0xFE	; 254
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	42 2f       	mov	r20, r18
     9fc:	42 95       	swap	r20
     9fe:	44 0f       	add	r20, r20
     a00:	40 7e       	andi	r20, 0xE0	; 224
     a02:	29 85       	ldd	r18, Y+9	; 0x09
     a04:	3a 85       	ldd	r19, Y+10	; 0x0a
     a06:	2e 5f       	subi	r18, 0xFE	; 254
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	26 95       	lsr	r18
     a10:	26 95       	lsr	r18
     a12:	26 95       	lsr	r18
     a14:	24 0f       	add	r18, r20
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
     a1a:	82 ef       	ldi	r24, 0xF2	; 242
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	29 85       	ldd	r18, Y+9	; 0x09
     a20:	3a 85       	ldd	r19, Y+10	; 0x0a
     a22:	2e 5f       	subi	r18, 0xFE	; 254
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	f9 01       	movw	r30, r18
     a28:	20 81       	ld	r18, Z
     a2a:	22 95       	swap	r18
     a2c:	22 0f       	add	r18, r18
     a2e:	20 7e       	andi	r18, 0xE0	; 224
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
     a34:	8f ee       	ldi	r24, 0xEF	; 239
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	2f ee       	ldi	r18, 0xEF	; 239
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	f9 01       	movw	r30, r18
     a3e:	20 81       	ld	r18, Z
     a40:	2f 7e       	andi	r18, 0xEF	; 239
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     a46:	89 85       	ldd	r24, Y+9	; 0x09
     a48:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	fc 01       	movw	r30, r24
     a4e:	22 87       	std	Z+10, r18	; 0x0a
     a50:	80 ef       	ldi	r24, 0xF0	; 240
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	20 ef       	ldi	r18, 0xF0	; 240
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	f9 01       	movw	r30, r18
     a5a:	20 81       	ld	r18, Z
     a5c:	24 60       	ori	r18, 0x04	; 4
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a62:	8f ee       	ldi	r24, 0xEF	; 239
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	2f ee       	ldi	r18, 0xEF	; 239
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	f9 01       	movw	r30, r18
     a6c:	40 81       	ld	r20, Z
     a6e:	29 85       	ldd	r18, Y+9	; 0x09
     a70:	3a 85       	ldd	r19, Y+10	; 0x0a
     a72:	f9 01       	movw	r30, r18
     a74:	26 81       	ldd	r18, Z+6	; 0x06
     a76:	24 2b       	or	r18, r20
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
          Can_config_tx();
     a7c:	8f ee       	ldi	r24, 0xEF	; 239
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2f ee       	ldi	r18, 0xEF	; 239
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	2f 73       	andi	r18, 0x3F	; 63
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	8f ee       	ldi	r24, 0xEF	; 239
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2f ee       	ldi	r18, 0xEF	; 239
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	20 64       	ori	r18, 0x40	; 64
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
          break;
     aa0:	5f c7       	rjmp	.+3774   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     aa2:	1d 82       	std	Y+5, r1	; 0x05
     aa4:	1e 82       	std	Y+6, r1	; 0x06
     aa6:	1f 82       	std	Y+7, r1	; 0x07
     aa8:	18 86       	std	Y+8, r1	; 0x08
     aaa:	27 ef       	ldi	r18, 0xF7	; 247
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	ce 01       	movw	r24, r28
     ab0:	05 96       	adiw	r24, 0x05	; 5
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	48 2f       	mov	r20, r24
     aba:	44 0f       	add	r20, r20
     abc:	44 0f       	add	r20, r20
     abe:	44 0f       	add	r20, r20
     ac0:	ce 01       	movw	r24, r28
     ac2:	05 96       	adiw	r24, 0x05	; 5
     ac4:	02 96       	adiw	r24, 0x02	; 2
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	82 95       	swap	r24
     acc:	86 95       	lsr	r24
     ace:	87 70       	andi	r24, 0x07	; 7
     ad0:	84 0f       	add	r24, r20
     ad2:	f9 01       	movw	r30, r18
     ad4:	80 83       	st	Z, r24
     ad6:	26 ef       	ldi	r18, 0xF6	; 246
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	ce 01       	movw	r24, r28
     adc:	05 96       	adiw	r24, 0x05	; 5
     ade:	02 96       	adiw	r24, 0x02	; 2
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	48 2f       	mov	r20, r24
     ae6:	44 0f       	add	r20, r20
     ae8:	44 0f       	add	r20, r20
     aea:	44 0f       	add	r20, r20
     aec:	ce 01       	movw	r24, r28
     aee:	05 96       	adiw	r24, 0x05	; 5
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	82 95       	swap	r24
     af8:	86 95       	lsr	r24
     afa:	87 70       	andi	r24, 0x07	; 7
     afc:	84 0f       	add	r24, r20
     afe:	f9 01       	movw	r30, r18
     b00:	80 83       	st	Z, r24
     b02:	25 ef       	ldi	r18, 0xF5	; 245
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	ce 01       	movw	r24, r28
     b08:	05 96       	adiw	r24, 0x05	; 5
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	48 2f       	mov	r20, r24
     b12:	44 0f       	add	r20, r20
     b14:	44 0f       	add	r20, r20
     b16:	44 0f       	add	r20, r20
     b18:	ce 01       	movw	r24, r28
     b1a:	05 96       	adiw	r24, 0x05	; 5
     b1c:	fc 01       	movw	r30, r24
     b1e:	80 81       	ld	r24, Z
     b20:	82 95       	swap	r24
     b22:	86 95       	lsr	r24
     b24:	87 70       	andi	r24, 0x07	; 7
     b26:	84 0f       	add	r24, r20
     b28:	f9 01       	movw	r30, r18
     b2a:	80 83       	st	Z, r24
     b2c:	84 ef       	ldi	r24, 0xF4	; 244
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	9e 01       	movw	r18, r28
     b32:	2b 5f       	subi	r18, 0xFB	; 251
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	22 0f       	add	r18, r18
     b3c:	22 0f       	add	r18, r18
     b3e:	22 0f       	add	r18, r18
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b44:	8f ee       	ldi	r24, 0xEF	; 239
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	2f ee       	ldi	r18, 0xEF	; 239
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	f9 01       	movw	r30, r18
     b4e:	40 81       	ld	r20, Z
     b50:	29 85       	ldd	r18, Y+9	; 0x09
     b52:	3a 85       	ldd	r19, Y+10	; 0x0a
     b54:	f9 01       	movw	r30, r18
     b56:	26 81       	ldd	r18, Z+6	; 0x06
     b58:	24 2b       	or	r18, r20
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b5e:	84 ef       	ldi	r24, 0xF4	; 244
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	24 ef       	ldi	r18, 0xF4	; 244
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	20 81       	ld	r18, Z
     b6a:	2b 7f       	andi	r18, 0xFB	; 251
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b70:	84 ef       	ldi	r24, 0xF4	; 244
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	24 ef       	ldi	r18, 0xF4	; 244
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	20 81       	ld	r18, Z
     b7c:	2e 7f       	andi	r18, 0xFE	; 254
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
          Can_config_rx();       
     b82:	8f ee       	ldi	r24, 0xEF	; 239
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	2f ee       	ldi	r18, 0xEF	; 239
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	2f 73       	andi	r18, 0x3F	; 63
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	8f ee       	ldi	r24, 0xEF	; 239
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2f ee       	ldi	r18, 0xEF	; 239
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	20 68       	ori	r18, 0x80	; 128
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
          break;
     ba6:	dc c6       	rjmp	.+3512   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     ba8:	1d 82       	std	Y+5, r1	; 0x05
     baa:	1e 82       	std	Y+6, r1	; 0x06
     bac:	1f 82       	std	Y+7, r1	; 0x07
     bae:	18 86       	std	Y+8, r1	; 0x08
     bb0:	27 ef       	ldi	r18, 0xF7	; 247
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	ce 01       	movw	r24, r28
     bb6:	05 96       	adiw	r24, 0x05	; 5
     bb8:	03 96       	adiw	r24, 0x03	; 3
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	44 0f       	add	r20, r20
     bc2:	44 0f       	add	r20, r20
     bc4:	44 0f       	add	r20, r20
     bc6:	ce 01       	movw	r24, r28
     bc8:	05 96       	adiw	r24, 0x05	; 5
     bca:	02 96       	adiw	r24, 0x02	; 2
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	82 95       	swap	r24
     bd2:	86 95       	lsr	r24
     bd4:	87 70       	andi	r24, 0x07	; 7
     bd6:	84 0f       	add	r24, r20
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
     bdc:	26 ef       	ldi	r18, 0xF6	; 246
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	ce 01       	movw	r24, r28
     be2:	05 96       	adiw	r24, 0x05	; 5
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	48 2f       	mov	r20, r24
     bec:	44 0f       	add	r20, r20
     bee:	44 0f       	add	r20, r20
     bf0:	44 0f       	add	r20, r20
     bf2:	ce 01       	movw	r24, r28
     bf4:	05 96       	adiw	r24, 0x05	; 5
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	fc 01       	movw	r30, r24
     bfa:	80 81       	ld	r24, Z
     bfc:	82 95       	swap	r24
     bfe:	86 95       	lsr	r24
     c00:	87 70       	andi	r24, 0x07	; 7
     c02:	84 0f       	add	r24, r20
     c04:	f9 01       	movw	r30, r18
     c06:	80 83       	st	Z, r24
     c08:	25 ef       	ldi	r18, 0xF5	; 245
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	ce 01       	movw	r24, r28
     c0e:	05 96       	adiw	r24, 0x05	; 5
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	44 0f       	add	r20, r20
     c1a:	44 0f       	add	r20, r20
     c1c:	44 0f       	add	r20, r20
     c1e:	ce 01       	movw	r24, r28
     c20:	05 96       	adiw	r24, 0x05	; 5
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	86 95       	lsr	r24
     c2a:	87 70       	andi	r24, 0x07	; 7
     c2c:	84 0f       	add	r24, r20
     c2e:	f9 01       	movw	r30, r18
     c30:	80 83       	st	Z, r24
     c32:	84 ef       	ldi	r24, 0xF4	; 244
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9e 01       	movw	r18, r28
     c38:	2b 5f       	subi	r18, 0xFB	; 251
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	f9 01       	movw	r30, r18
     c3e:	20 81       	ld	r18, Z
     c40:	22 0f       	add	r18, r18
     c42:	22 0f       	add	r18, r18
     c44:	22 0f       	add	r18, r18
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c4a:	8f ee       	ldi	r24, 0xEF	; 239
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	2f ee       	ldi	r18, 0xEF	; 239
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	f9 01       	movw	r30, r18
     c54:	40 81       	ld	r20, Z
     c56:	29 85       	ldd	r18, Y+9	; 0x09
     c58:	3a 85       	ldd	r19, Y+10	; 0x0a
     c5a:	f9 01       	movw	r30, r18
     c5c:	26 81       	ldd	r18, Z+6	; 0x06
     c5e:	24 2b       	or	r18, r20
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     c64:	89 85       	ldd	r24, Y+9	; 0x09
     c66:	9a 85       	ldd	r25, Y+10	; 0x0a
     c68:	fc 01       	movw	r30, r24
     c6a:	12 86       	std	Z+10, r1	; 0x0a
     c6c:	84 ef       	ldi	r24, 0xF4	; 244
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	24 ef       	ldi	r18, 0xF4	; 244
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	24 60       	ori	r18, 0x04	; 4
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
     c7e:	80 ef       	ldi	r24, 0xF0	; 240
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	20 ef       	ldi	r18, 0xF0	; 240
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	f9 01       	movw	r30, r18
     c88:	20 81       	ld	r18, Z
     c8a:	2b 7f       	andi	r18, 0xFB	; 251
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c90:	84 ef       	ldi	r24, 0xF4	; 244
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	24 ef       	ldi	r18, 0xF4	; 244
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	f9 01       	movw	r30, r18
     c9a:	20 81       	ld	r18, Z
     c9c:	2e 7f       	andi	r18, 0xFE	; 254
     c9e:	fc 01       	movw	r30, r24
     ca0:	20 83       	st	Z, r18
          Can_config_rx();       
     ca2:	8f ee       	ldi	r24, 0xEF	; 239
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	2f ee       	ldi	r18, 0xEF	; 239
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	2f 73       	andi	r18, 0x3F	; 63
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
     cb4:	8f ee       	ldi	r24, 0xEF	; 239
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	2f ee       	ldi	r18, 0xEF	; 239
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	20 68       	ori	r18, 0x80	; 128
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
          break;
     cc6:	4c c6       	rjmp	.+3224   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     cc8:	1d 82       	std	Y+5, r1	; 0x05
     cca:	1e 82       	std	Y+6, r1	; 0x06
     ccc:	1f 82       	std	Y+7, r1	; 0x07
     cce:	18 86       	std	Y+8, r1	; 0x08
     cd0:	27 ef       	ldi	r18, 0xF7	; 247
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	ce 01       	movw	r24, r28
     cd6:	05 96       	adiw	r24, 0x05	; 5
     cd8:	03 96       	adiw	r24, 0x03	; 3
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	44 0f       	add	r20, r20
     ce2:	44 0f       	add	r20, r20
     ce4:	44 0f       	add	r20, r20
     ce6:	ce 01       	movw	r24, r28
     ce8:	05 96       	adiw	r24, 0x05	; 5
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	82 95       	swap	r24
     cf2:	86 95       	lsr	r24
     cf4:	87 70       	andi	r24, 0x07	; 7
     cf6:	84 0f       	add	r24, r20
     cf8:	f9 01       	movw	r30, r18
     cfa:	80 83       	st	Z, r24
     cfc:	26 ef       	ldi	r18, 0xF6	; 246
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	ce 01       	movw	r24, r28
     d02:	05 96       	adiw	r24, 0x05	; 5
     d04:	02 96       	adiw	r24, 0x02	; 2
     d06:	fc 01       	movw	r30, r24
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	44 0f       	add	r20, r20
     d0e:	44 0f       	add	r20, r20
     d10:	44 0f       	add	r20, r20
     d12:	ce 01       	movw	r24, r28
     d14:	05 96       	adiw	r24, 0x05	; 5
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	82 95       	swap	r24
     d1e:	86 95       	lsr	r24
     d20:	87 70       	andi	r24, 0x07	; 7
     d22:	84 0f       	add	r24, r20
     d24:	f9 01       	movw	r30, r18
     d26:	80 83       	st	Z, r24
     d28:	25 ef       	ldi	r18, 0xF5	; 245
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	ce 01       	movw	r24, r28
     d2e:	05 96       	adiw	r24, 0x05	; 5
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	fc 01       	movw	r30, r24
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	44 0f       	add	r20, r20
     d3a:	44 0f       	add	r20, r20
     d3c:	44 0f       	add	r20, r20
     d3e:	ce 01       	movw	r24, r28
     d40:	05 96       	adiw	r24, 0x05	; 5
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	82 95       	swap	r24
     d48:	86 95       	lsr	r24
     d4a:	87 70       	andi	r24, 0x07	; 7
     d4c:	84 0f       	add	r24, r20
     d4e:	f9 01       	movw	r30, r18
     d50:	80 83       	st	Z, r24
     d52:	84 ef       	ldi	r24, 0xF4	; 244
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9e 01       	movw	r18, r28
     d58:	2b 5f       	subi	r18, 0xFB	; 251
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	22 0f       	add	r18, r18
     d62:	22 0f       	add	r18, r18
     d64:	22 0f       	add	r18, r18
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d6a:	8f ee       	ldi	r24, 0xEF	; 239
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	2f ee       	ldi	r18, 0xEF	; 239
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	f9 01       	movw	r30, r18
     d74:	40 81       	ld	r20, Z
     d76:	29 85       	ldd	r18, Y+9	; 0x09
     d78:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7a:	f9 01       	movw	r30, r18
     d7c:	26 81       	ldd	r18, Z+6	; 0x06
     d7e:	24 2b       	or	r18, r20
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	fc 01       	movw	r30, r24
     d8c:	22 87       	std	Z+10, r18	; 0x0a
     d8e:	84 ef       	ldi	r24, 0xF4	; 244
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	24 ef       	ldi	r18, 0xF4	; 244
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	24 60       	ori	r18, 0x04	; 4
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
     da0:	80 ef       	ldi	r24, 0xF0	; 240
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	20 ef       	ldi	r18, 0xF0	; 240
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	f9 01       	movw	r30, r18
     daa:	20 81       	ld	r18, Z
     dac:	24 60       	ori	r18, 0x04	; 4
     dae:	fc 01       	movw	r30, r24
     db0:	20 83       	st	Z, r18
          Can_clear_rplv();
     db2:	8f ee       	ldi	r24, 0xEF	; 239
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	2f ee       	ldi	r18, 0xEF	; 239
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	2f 7d       	andi	r18, 0xDF	; 223
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dc4:	84 ef       	ldi	r24, 0xF4	; 244
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	24 ef       	ldi	r18, 0xF4	; 244
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	2e 7f       	andi	r18, 0xFE	; 254
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18
          Can_config_rx();       
     dd6:	8f ee       	ldi	r24, 0xEF	; 239
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	2f ee       	ldi	r18, 0xEF	; 239
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	2f 73       	andi	r18, 0x3F	; 63
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
     de8:	8f ee       	ldi	r24, 0xEF	; 239
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	2f ee       	ldi	r18, 0xEF	; 239
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	20 81       	ld	r18, Z
     df4:	20 68       	ori	r18, 0x80	; 128
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
          break;
     dfa:	b2 c5       	rjmp	.+2916   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	fc 01       	movw	r30, r24
     e02:	83 85       	ldd	r24, Z+11	; 0x0b
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <__stack+0x50b>
     e08:	69 c0       	rjmp	.+210    	; 0xedc <__stack+0x5dd>
     e0a:	83 ef       	ldi	r24, 0xF3	; 243
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	29 85       	ldd	r18, Y+9	; 0x09
     e10:	3a 85       	ldd	r19, Y+10	; 0x0a
     e12:	2e 5f       	subi	r18, 0xFE	; 254
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	2d 5f       	subi	r18, 0xFD	; 253
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	f9 01       	movw	r30, r18
     e1c:	20 81       	ld	r18, Z
     e1e:	42 2f       	mov	r20, r18
     e20:	44 0f       	add	r20, r20
     e22:	44 0f       	add	r20, r20
     e24:	44 0f       	add	r20, r20
     e26:	29 85       	ldd	r18, Y+9	; 0x09
     e28:	3a 85       	ldd	r19, Y+10	; 0x0a
     e2a:	2e 5f       	subi	r18, 0xFE	; 254
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	2e 5f       	subi	r18, 0xFE	; 254
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	22 95       	swap	r18
     e38:	26 95       	lsr	r18
     e3a:	27 70       	andi	r18, 0x07	; 7
     e3c:	24 0f       	add	r18, r20
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
     e42:	82 ef       	ldi	r24, 0xF2	; 242
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	29 85       	ldd	r18, Y+9	; 0x09
     e48:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4a:	2e 5f       	subi	r18, 0xFE	; 254
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	2e 5f       	subi	r18, 0xFE	; 254
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	42 2f       	mov	r20, r18
     e58:	44 0f       	add	r20, r20
     e5a:	44 0f       	add	r20, r20
     e5c:	44 0f       	add	r20, r20
     e5e:	29 85       	ldd	r18, Y+9	; 0x09
     e60:	3a 85       	ldd	r19, Y+10	; 0x0a
     e62:	2e 5f       	subi	r18, 0xFE	; 254
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	22 95       	swap	r18
     e70:	26 95       	lsr	r18
     e72:	27 70       	andi	r18, 0x07	; 7
     e74:	24 0f       	add	r18, r20
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
     e7a:	81 ef       	ldi	r24, 0xF1	; 241
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	29 85       	ldd	r18, Y+9	; 0x09
     e80:	3a 85       	ldd	r19, Y+10	; 0x0a
     e82:	2e 5f       	subi	r18, 0xFE	; 254
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	42 2f       	mov	r20, r18
     e90:	44 0f       	add	r20, r20
     e92:	44 0f       	add	r20, r20
     e94:	44 0f       	add	r20, r20
     e96:	29 85       	ldd	r18, Y+9	; 0x09
     e98:	3a 85       	ldd	r19, Y+10	; 0x0a
     e9a:	2e 5f       	subi	r18, 0xFE	; 254
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	f9 01       	movw	r30, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	22 95       	swap	r18
     ea4:	26 95       	lsr	r18
     ea6:	27 70       	andi	r18, 0x07	; 7
     ea8:	24 0f       	add	r18, r20
     eaa:	fc 01       	movw	r30, r24
     eac:	20 83       	st	Z, r18
     eae:	80 ef       	ldi	r24, 0xF0	; 240
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	29 85       	ldd	r18, Y+9	; 0x09
     eb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     eb6:	2e 5f       	subi	r18, 0xFE	; 254
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	22 0f       	add	r18, r18
     ec0:	22 0f       	add	r18, r18
     ec2:	22 0f       	add	r18, r18
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
     ec8:	8f ee       	ldi	r24, 0xEF	; 239
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	2f ee       	ldi	r18, 0xEF	; 239
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	20 61       	ori	r18, 0x10	; 16
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
     eda:	30 c0       	rjmp	.+96     	; 0xf3c <__stack+0x63d>
          else              { Can_set_std_id(cmd->id.std);}
     edc:	83 ef       	ldi	r24, 0xF3	; 243
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	29 85       	ldd	r18, Y+9	; 0x09
     ee2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee4:	2e 5f       	subi	r18, 0xFE	; 254
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	42 2f       	mov	r20, r18
     ef2:	42 95       	swap	r20
     ef4:	44 0f       	add	r20, r20
     ef6:	40 7e       	andi	r20, 0xE0	; 224
     ef8:	29 85       	ldd	r18, Y+9	; 0x09
     efa:	3a 85       	ldd	r19, Y+10	; 0x0a
     efc:	2e 5f       	subi	r18, 0xFE	; 254
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	26 95       	lsr	r18
     f06:	26 95       	lsr	r18
     f08:	26 95       	lsr	r18
     f0a:	24 0f       	add	r18, r20
     f0c:	fc 01       	movw	r30, r24
     f0e:	20 83       	st	Z, r18
     f10:	82 ef       	ldi	r24, 0xF2	; 242
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	29 85       	ldd	r18, Y+9	; 0x09
     f16:	3a 85       	ldd	r19, Y+10	; 0x0a
     f18:	2e 5f       	subi	r18, 0xFE	; 254
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	22 95       	swap	r18
     f22:	22 0f       	add	r18, r18
     f24:	20 7e       	andi	r18, 0xE0	; 224
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
     f2a:	8f ee       	ldi	r24, 0xEF	; 239
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	2f ee       	ldi	r18, 0xEF	; 239
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	2f 7e       	andi	r18, 0xEF	; 239
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	dc 01       	movw	r26, r24
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	af 83       	std	Y+7, r26	; 0x07
     f48:	b8 87       	std	Y+8, r27	; 0x08
     f4a:	27 ef       	ldi	r18, 0xF7	; 247
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	ce 01       	movw	r24, r28
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	03 96       	adiw	r24, 0x03	; 3
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	44 0f       	add	r20, r20
     f5c:	44 0f       	add	r20, r20
     f5e:	44 0f       	add	r20, r20
     f60:	ce 01       	movw	r24, r28
     f62:	05 96       	adiw	r24, 0x05	; 5
     f64:	02 96       	adiw	r24, 0x02	; 2
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	82 95       	swap	r24
     f6c:	86 95       	lsr	r24
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	84 0f       	add	r24, r20
     f72:	f9 01       	movw	r30, r18
     f74:	80 83       	st	Z, r24
     f76:	26 ef       	ldi	r18, 0xF6	; 246
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	ce 01       	movw	r24, r28
     f7c:	05 96       	adiw	r24, 0x05	; 5
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	44 0f       	add	r20, r20
     f88:	44 0f       	add	r20, r20
     f8a:	44 0f       	add	r20, r20
     f8c:	ce 01       	movw	r24, r28
     f8e:	05 96       	adiw	r24, 0x05	; 5
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	fc 01       	movw	r30, r24
     f94:	80 81       	ld	r24, Z
     f96:	82 95       	swap	r24
     f98:	86 95       	lsr	r24
     f9a:	87 70       	andi	r24, 0x07	; 7
     f9c:	84 0f       	add	r24, r20
     f9e:	f9 01       	movw	r30, r18
     fa0:	80 83       	st	Z, r24
     fa2:	25 ef       	ldi	r18, 0xF5	; 245
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	ce 01       	movw	r24, r28
     fa8:	05 96       	adiw	r24, 0x05	; 5
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	44 0f       	add	r20, r20
     fb4:	44 0f       	add	r20, r20
     fb6:	44 0f       	add	r20, r20
     fb8:	ce 01       	movw	r24, r28
     fba:	05 96       	adiw	r24, 0x05	; 5
     fbc:	fc 01       	movw	r30, r24
     fbe:	80 81       	ld	r24, Z
     fc0:	82 95       	swap	r24
     fc2:	86 95       	lsr	r24
     fc4:	87 70       	andi	r24, 0x07	; 7
     fc6:	84 0f       	add	r24, r20
     fc8:	f9 01       	movw	r30, r18
     fca:	80 83       	st	Z, r24
     fcc:	84 ef       	ldi	r24, 0xF4	; 244
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9e 01       	movw	r18, r28
     fd2:	2b 5f       	subi	r18, 0xFB	; 251
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	22 0f       	add	r18, r18
     fdc:	22 0f       	add	r18, r18
     fde:	22 0f       	add	r18, r18
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fe4:	8f ee       	ldi	r24, 0xEF	; 239
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	2f ee       	ldi	r18, 0xEF	; 239
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	f9 01       	movw	r30, r18
     fee:	40 81       	ld	r20, Z
     ff0:	29 85       	ldd	r18, Y+9	; 0x09
     ff2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ff4:	f9 01       	movw	r30, r18
     ff6:	26 81       	ldd	r18, Z+6	; 0x06
     ff8:	24 2b       	or	r18, r20
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     ffe:	84 ef       	ldi	r24, 0xF4	; 244
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	24 ef       	ldi	r18, 0xF4	; 244
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	f9 01       	movw	r30, r18
    1008:	20 81       	ld	r18, Z
    100a:	2b 7f       	andi	r18, 0xFB	; 251
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
          Can_set_idemsk();
    1010:	84 ef       	ldi	r24, 0xF4	; 244
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	24 ef       	ldi	r18, 0xF4	; 244
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	21 60       	ori	r18, 0x01	; 1
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
          Can_config_rx();       
    1022:	8f ee       	ldi	r24, 0xEF	; 239
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	2f ee       	ldi	r18, 0xEF	; 239
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	2f 73       	andi	r18, 0x3F	; 63
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
    1034:	8f ee       	ldi	r24, 0xEF	; 239
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	2f ee       	ldi	r18, 0xEF	; 239
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	20 68       	ori	r18, 0x80	; 128
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
          break;
    1046:	8c c4       	rjmp	.+2328   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	fc 01       	movw	r30, r24
    104e:	83 85       	ldd	r24, Z+11	; 0x0b
    1050:	88 23       	and	r24, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <__stack+0x757>
    1054:	69 c0       	rjmp	.+210    	; 0x1128 <__stack+0x829>
    1056:	83 ef       	ldi	r24, 0xF3	; 243
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	29 85       	ldd	r18, Y+9	; 0x09
    105c:	3a 85       	ldd	r19, Y+10	; 0x0a
    105e:	2e 5f       	subi	r18, 0xFE	; 254
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	2d 5f       	subi	r18, 0xFD	; 253
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	f9 01       	movw	r30, r18
    1068:	20 81       	ld	r18, Z
    106a:	42 2f       	mov	r20, r18
    106c:	44 0f       	add	r20, r20
    106e:	44 0f       	add	r20, r20
    1070:	44 0f       	add	r20, r20
    1072:	29 85       	ldd	r18, Y+9	; 0x09
    1074:	3a 85       	ldd	r19, Y+10	; 0x0a
    1076:	2e 5f       	subi	r18, 0xFE	; 254
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	2e 5f       	subi	r18, 0xFE	; 254
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	f9 01       	movw	r30, r18
    1080:	20 81       	ld	r18, Z
    1082:	22 95       	swap	r18
    1084:	26 95       	lsr	r18
    1086:	27 70       	andi	r18, 0x07	; 7
    1088:	24 0f       	add	r18, r20
    108a:	fc 01       	movw	r30, r24
    108c:	20 83       	st	Z, r18
    108e:	82 ef       	ldi	r24, 0xF2	; 242
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	2e 5f       	subi	r18, 0xFE	; 254
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	2e 5f       	subi	r18, 0xFE	; 254
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	42 2f       	mov	r20, r18
    10a4:	44 0f       	add	r20, r20
    10a6:	44 0f       	add	r20, r20
    10a8:	44 0f       	add	r20, r20
    10aa:	29 85       	ldd	r18, Y+9	; 0x09
    10ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ae:	2e 5f       	subi	r18, 0xFE	; 254
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	f9 01       	movw	r30, r18
    10b8:	20 81       	ld	r18, Z
    10ba:	22 95       	swap	r18
    10bc:	26 95       	lsr	r18
    10be:	27 70       	andi	r18, 0x07	; 7
    10c0:	24 0f       	add	r18, r20
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
    10c6:	81 ef       	ldi	r24, 0xF1	; 241
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	2e 5f       	subi	r18, 0xFE	; 254
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	42 2f       	mov	r20, r18
    10dc:	44 0f       	add	r20, r20
    10de:	44 0f       	add	r20, r20
    10e0:	44 0f       	add	r20, r20
    10e2:	29 85       	ldd	r18, Y+9	; 0x09
    10e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e6:	2e 5f       	subi	r18, 0xFE	; 254
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	f9 01       	movw	r30, r18
    10ec:	20 81       	ld	r18, Z
    10ee:	22 95       	swap	r18
    10f0:	26 95       	lsr	r18
    10f2:	27 70       	andi	r18, 0x07	; 7
    10f4:	24 0f       	add	r18, r20
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	80 ef       	ldi	r24, 0xF0	; 240
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	29 85       	ldd	r18, Y+9	; 0x09
    1100:	3a 85       	ldd	r19, Y+10	; 0x0a
    1102:	2e 5f       	subi	r18, 0xFE	; 254
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	22 0f       	add	r18, r18
    110c:	22 0f       	add	r18, r18
    110e:	22 0f       	add	r18, r18
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
    1114:	8f ee       	ldi	r24, 0xEF	; 239
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2f ee       	ldi	r18, 0xEF	; 239
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	20 61       	ori	r18, 0x10	; 16
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
    1126:	30 c0       	rjmp	.+96     	; 0x1188 <__stack+0x889>
          else              { Can_set_std_id(cmd->id.std);}
    1128:	83 ef       	ldi	r24, 0xF3	; 243
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	29 85       	ldd	r18, Y+9	; 0x09
    112e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1130:	2e 5f       	subi	r18, 0xFE	; 254
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	f9 01       	movw	r30, r18
    113a:	20 81       	ld	r18, Z
    113c:	42 2f       	mov	r20, r18
    113e:	42 95       	swap	r20
    1140:	44 0f       	add	r20, r20
    1142:	40 7e       	andi	r20, 0xE0	; 224
    1144:	29 85       	ldd	r18, Y+9	; 0x09
    1146:	3a 85       	ldd	r19, Y+10	; 0x0a
    1148:	2e 5f       	subi	r18, 0xFE	; 254
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	f9 01       	movw	r30, r18
    114e:	20 81       	ld	r18, Z
    1150:	26 95       	lsr	r18
    1152:	26 95       	lsr	r18
    1154:	26 95       	lsr	r18
    1156:	24 0f       	add	r18, r20
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
    115c:	82 ef       	ldi	r24, 0xF2	; 242
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	29 85       	ldd	r18, Y+9	; 0x09
    1162:	3a 85       	ldd	r19, Y+10	; 0x0a
    1164:	2e 5f       	subi	r18, 0xFE	; 254
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	f9 01       	movw	r30, r18
    116a:	20 81       	ld	r18, Z
    116c:	22 95       	swap	r18
    116e:	22 0f       	add	r18, r18
    1170:	20 7e       	andi	r18, 0xE0	; 224
    1172:	fc 01       	movw	r30, r24
    1174:	20 83       	st	Z, r18
    1176:	8f ee       	ldi	r24, 0xEF	; 239
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	2f ee       	ldi	r18, 0xEF	; 239
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	f9 01       	movw	r30, r18
    1180:	20 81       	ld	r18, Z
    1182:	2f 7e       	andi	r18, 0xEF	; 239
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	dc 01       	movw	r26, r24
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	af 83       	std	Y+7, r26	; 0x07
    1194:	b8 87       	std	Y+8, r27	; 0x08
    1196:	27 ef       	ldi	r18, 0xF7	; 247
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	05 96       	adiw	r24, 0x05	; 5
    119e:	03 96       	adiw	r24, 0x03	; 3
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	44 0f       	add	r20, r20
    11a8:	44 0f       	add	r20, r20
    11aa:	44 0f       	add	r20, r20
    11ac:	ce 01       	movw	r24, r28
    11ae:	05 96       	adiw	r24, 0x05	; 5
    11b0:	02 96       	adiw	r24, 0x02	; 2
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	82 95       	swap	r24
    11b8:	86 95       	lsr	r24
    11ba:	87 70       	andi	r24, 0x07	; 7
    11bc:	84 0f       	add	r24, r20
    11be:	f9 01       	movw	r30, r18
    11c0:	80 83       	st	Z, r24
    11c2:	26 ef       	ldi	r18, 0xF6	; 246
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	ce 01       	movw	r24, r28
    11c8:	05 96       	adiw	r24, 0x05	; 5
    11ca:	02 96       	adiw	r24, 0x02	; 2
    11cc:	fc 01       	movw	r30, r24
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	44 0f       	add	r20, r20
    11d4:	44 0f       	add	r20, r20
    11d6:	44 0f       	add	r20, r20
    11d8:	ce 01       	movw	r24, r28
    11da:	05 96       	adiw	r24, 0x05	; 5
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	fc 01       	movw	r30, r24
    11e0:	80 81       	ld	r24, Z
    11e2:	82 95       	swap	r24
    11e4:	86 95       	lsr	r24
    11e6:	87 70       	andi	r24, 0x07	; 7
    11e8:	84 0f       	add	r24, r20
    11ea:	f9 01       	movw	r30, r18
    11ec:	80 83       	st	Z, r24
    11ee:	25 ef       	ldi	r18, 0xF5	; 245
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	ce 01       	movw	r24, r28
    11f4:	05 96       	adiw	r24, 0x05	; 5
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	44 0f       	add	r20, r20
    1200:	44 0f       	add	r20, r20
    1202:	44 0f       	add	r20, r20
    1204:	ce 01       	movw	r24, r28
    1206:	05 96       	adiw	r24, 0x05	; 5
    1208:	fc 01       	movw	r30, r24
    120a:	80 81       	ld	r24, Z
    120c:	82 95       	swap	r24
    120e:	86 95       	lsr	r24
    1210:	87 70       	andi	r24, 0x07	; 7
    1212:	84 0f       	add	r24, r20
    1214:	f9 01       	movw	r30, r18
    1216:	80 83       	st	Z, r24
    1218:	84 ef       	ldi	r24, 0xF4	; 244
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9e 01       	movw	r18, r28
    121e:	2b 5f       	subi	r18, 0xFB	; 251
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	f9 01       	movw	r30, r18
    1224:	20 81       	ld	r18, Z
    1226:	22 0f       	add	r18, r18
    1228:	22 0f       	add	r18, r18
    122a:	22 0f       	add	r18, r18
    122c:	fc 01       	movw	r30, r24
    122e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1230:	8f ee       	ldi	r24, 0xEF	; 239
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	2f ee       	ldi	r18, 0xEF	; 239
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	f9 01       	movw	r30, r18
    123a:	40 81       	ld	r20, Z
    123c:	29 85       	ldd	r18, Y+9	; 0x09
    123e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1240:	f9 01       	movw	r30, r18
    1242:	26 81       	ldd	r18, Z+6	; 0x06
    1244:	24 2b       	or	r18, r20
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	fc 01       	movw	r30, r24
    1250:	12 86       	std	Z+10, r1	; 0x0a
    1252:	84 ef       	ldi	r24, 0xF4	; 244
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 ef       	ldi	r18, 0xF4	; 244
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	f9 01       	movw	r30, r18
    125c:	20 81       	ld	r18, Z
    125e:	24 60       	ori	r18, 0x04	; 4
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
    1264:	80 ef       	ldi	r24, 0xF0	; 240
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	20 ef       	ldi	r18, 0xF0	; 240
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	f9 01       	movw	r30, r18
    126e:	20 81       	ld	r18, Z
    1270:	2b 7f       	andi	r18, 0xFB	; 251
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
          Can_set_idemsk();
    1276:	84 ef       	ldi	r24, 0xF4	; 244
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	24 ef       	ldi	r18, 0xF4	; 244
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	21 60       	ori	r18, 0x01	; 1
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
          Can_config_rx();       
    1288:	8f ee       	ldi	r24, 0xEF	; 239
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	2f ee       	ldi	r18, 0xEF	; 239
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	20 81       	ld	r18, Z
    1294:	2f 73       	andi	r18, 0x3F	; 63
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	8f ee       	ldi	r24, 0xEF	; 239
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	2f ee       	ldi	r18, 0xEF	; 239
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	20 68       	ori	r18, 0x80	; 128
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 83       	st	Z, r18
          break;
    12ac:	59 c3       	rjmp	.+1714   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	fc 01       	movw	r30, r24
    12b4:	83 85       	ldd	r24, Z+11	; 0x0b
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <__stack+0x9bd>
    12ba:	69 c0       	rjmp	.+210    	; 0x138e <__stack+0xa8f>
    12bc:	83 ef       	ldi	r24, 0xF3	; 243
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	29 85       	ldd	r18, Y+9	; 0x09
    12c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c4:	2e 5f       	subi	r18, 0xFE	; 254
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	2d 5f       	subi	r18, 0xFD	; 253
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	42 2f       	mov	r20, r18
    12d2:	44 0f       	add	r20, r20
    12d4:	44 0f       	add	r20, r20
    12d6:	44 0f       	add	r20, r20
    12d8:	29 85       	ldd	r18, Y+9	; 0x09
    12da:	3a 85       	ldd	r19, Y+10	; 0x0a
    12dc:	2e 5f       	subi	r18, 0xFE	; 254
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	2e 5f       	subi	r18, 0xFE	; 254
    12e2:	3f 4f       	sbci	r19, 0xFF	; 255
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	22 95       	swap	r18
    12ea:	26 95       	lsr	r18
    12ec:	27 70       	andi	r18, 0x07	; 7
    12ee:	24 0f       	add	r18, r20
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
    12f4:	82 ef       	ldi	r24, 0xF2	; 242
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	29 85       	ldd	r18, Y+9	; 0x09
    12fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    12fc:	2e 5f       	subi	r18, 0xFE	; 254
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	2e 5f       	subi	r18, 0xFE	; 254
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	42 2f       	mov	r20, r18
    130a:	44 0f       	add	r20, r20
    130c:	44 0f       	add	r20, r20
    130e:	44 0f       	add	r20, r20
    1310:	29 85       	ldd	r18, Y+9	; 0x09
    1312:	3a 85       	ldd	r19, Y+10	; 0x0a
    1314:	2e 5f       	subi	r18, 0xFE	; 254
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	22 95       	swap	r18
    1322:	26 95       	lsr	r18
    1324:	27 70       	andi	r18, 0x07	; 7
    1326:	24 0f       	add	r18, r20
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
    132c:	81 ef       	ldi	r24, 0xF1	; 241
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	29 85       	ldd	r18, Y+9	; 0x09
    1332:	3a 85       	ldd	r19, Y+10	; 0x0a
    1334:	2e 5f       	subi	r18, 0xFE	; 254
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	42 2f       	mov	r20, r18
    1342:	44 0f       	add	r20, r20
    1344:	44 0f       	add	r20, r20
    1346:	44 0f       	add	r20, r20
    1348:	29 85       	ldd	r18, Y+9	; 0x09
    134a:	3a 85       	ldd	r19, Y+10	; 0x0a
    134c:	2e 5f       	subi	r18, 0xFE	; 254
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	f9 01       	movw	r30, r18
    1352:	20 81       	ld	r18, Z
    1354:	22 95       	swap	r18
    1356:	26 95       	lsr	r18
    1358:	27 70       	andi	r18, 0x07	; 7
    135a:	24 0f       	add	r18, r20
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18
    1360:	80 ef       	ldi	r24, 0xF0	; 240
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	29 85       	ldd	r18, Y+9	; 0x09
    1366:	3a 85       	ldd	r19, Y+10	; 0x0a
    1368:	2e 5f       	subi	r18, 0xFE	; 254
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	22 0f       	add	r18, r18
    1372:	22 0f       	add	r18, r18
    1374:	22 0f       	add	r18, r18
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	8f ee       	ldi	r24, 0xEF	; 239
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	2f ee       	ldi	r18, 0xEF	; 239
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	f9 01       	movw	r30, r18
    1384:	20 81       	ld	r18, Z
    1386:	20 61       	ori	r18, 0x10	; 16
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
    138c:	30 c0       	rjmp	.+96     	; 0x13ee <__stack+0xaef>
          else              { Can_set_std_id(cmd->id.std);}
    138e:	83 ef       	ldi	r24, 0xF3	; 243
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	29 85       	ldd	r18, Y+9	; 0x09
    1394:	3a 85       	ldd	r19, Y+10	; 0x0a
    1396:	2e 5f       	subi	r18, 0xFE	; 254
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	f9 01       	movw	r30, r18
    13a0:	20 81       	ld	r18, Z
    13a2:	42 2f       	mov	r20, r18
    13a4:	42 95       	swap	r20
    13a6:	44 0f       	add	r20, r20
    13a8:	40 7e       	andi	r20, 0xE0	; 224
    13aa:	29 85       	ldd	r18, Y+9	; 0x09
    13ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ae:	2e 5f       	subi	r18, 0xFE	; 254
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	f9 01       	movw	r30, r18
    13b4:	20 81       	ld	r18, Z
    13b6:	26 95       	lsr	r18
    13b8:	26 95       	lsr	r18
    13ba:	26 95       	lsr	r18
    13bc:	24 0f       	add	r18, r20
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
    13c2:	82 ef       	ldi	r24, 0xF2	; 242
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	29 85       	ldd	r18, Y+9	; 0x09
    13c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ca:	2e 5f       	subi	r18, 0xFE	; 254
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	22 95       	swap	r18
    13d4:	22 0f       	add	r18, r18
    13d6:	20 7e       	andi	r18, 0xE0	; 224
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
    13dc:	8f ee       	ldi	r24, 0xEF	; 239
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	2f ee       	ldi	r18, 0xEF	; 239
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	f9 01       	movw	r30, r18
    13e6:	20 81       	ld	r18, Z
    13e8:	2f 7e       	andi	r18, 0xEF	; 239
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	dc 01       	movw	r26, r24
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	af 83       	std	Y+7, r26	; 0x07
    13fa:	b8 87       	std	Y+8, r27	; 0x08
    13fc:	27 ef       	ldi	r18, 0xF7	; 247
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	ce 01       	movw	r24, r28
    1402:	05 96       	adiw	r24, 0x05	; 5
    1404:	03 96       	adiw	r24, 0x03	; 3
    1406:	fc 01       	movw	r30, r24
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	44 0f       	add	r20, r20
    140e:	44 0f       	add	r20, r20
    1410:	44 0f       	add	r20, r20
    1412:	ce 01       	movw	r24, r28
    1414:	05 96       	adiw	r24, 0x05	; 5
    1416:	02 96       	adiw	r24, 0x02	; 2
    1418:	fc 01       	movw	r30, r24
    141a:	80 81       	ld	r24, Z
    141c:	82 95       	swap	r24
    141e:	86 95       	lsr	r24
    1420:	87 70       	andi	r24, 0x07	; 7
    1422:	84 0f       	add	r24, r20
    1424:	f9 01       	movw	r30, r18
    1426:	80 83       	st	Z, r24
    1428:	26 ef       	ldi	r18, 0xF6	; 246
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	05 96       	adiw	r24, 0x05	; 5
    1430:	02 96       	adiw	r24, 0x02	; 2
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	44 0f       	add	r20, r20
    143a:	44 0f       	add	r20, r20
    143c:	44 0f       	add	r20, r20
    143e:	ce 01       	movw	r24, r28
    1440:	05 96       	adiw	r24, 0x05	; 5
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	fc 01       	movw	r30, r24
    1446:	80 81       	ld	r24, Z
    1448:	82 95       	swap	r24
    144a:	86 95       	lsr	r24
    144c:	87 70       	andi	r24, 0x07	; 7
    144e:	84 0f       	add	r24, r20
    1450:	f9 01       	movw	r30, r18
    1452:	80 83       	st	Z, r24
    1454:	25 ef       	ldi	r18, 0xF5	; 245
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	ce 01       	movw	r24, r28
    145a:	05 96       	adiw	r24, 0x05	; 5
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	fc 01       	movw	r30, r24
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	44 0f       	add	r20, r20
    1466:	44 0f       	add	r20, r20
    1468:	44 0f       	add	r20, r20
    146a:	ce 01       	movw	r24, r28
    146c:	05 96       	adiw	r24, 0x05	; 5
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	82 95       	swap	r24
    1474:	86 95       	lsr	r24
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	84 0f       	add	r24, r20
    147a:	f9 01       	movw	r30, r18
    147c:	80 83       	st	Z, r24
    147e:	84 ef       	ldi	r24, 0xF4	; 244
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9e 01       	movw	r18, r28
    1484:	2b 5f       	subi	r18, 0xFB	; 251
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	f9 01       	movw	r30, r18
    148a:	20 81       	ld	r18, Z
    148c:	22 0f       	add	r18, r18
    148e:	22 0f       	add	r18, r18
    1490:	22 0f       	add	r18, r18
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1496:	8f ee       	ldi	r24, 0xEF	; 239
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	2f ee       	ldi	r18, 0xEF	; 239
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	40 81       	ld	r20, Z
    14a2:	29 85       	ldd	r18, Y+9	; 0x09
    14a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a6:	f9 01       	movw	r30, r18
    14a8:	26 81       	ldd	r18, Z+6	; 0x06
    14aa:	24 2b       	or	r18, r20
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	fc 01       	movw	r30, r24
    14b8:	22 87       	std	Z+10, r18	; 0x0a
    14ba:	84 ef       	ldi	r24, 0xF4	; 244
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	24 ef       	ldi	r18, 0xF4	; 244
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	24 60       	ori	r18, 0x04	; 4
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
    14cc:	80 ef       	ldi	r24, 0xF0	; 240
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	20 ef       	ldi	r18, 0xF0	; 240
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	24 60       	ori	r18, 0x04	; 4
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
          Can_clear_rplv();
    14de:	8f ee       	ldi	r24, 0xEF	; 239
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	2f ee       	ldi	r18, 0xEF	; 239
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	2f 7d       	andi	r18, 0xDF	; 223
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
          Can_set_idemsk();
    14f0:	84 ef       	ldi	r24, 0xF4	; 244
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	24 ef       	ldi	r18, 0xF4	; 244
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	f9 01       	movw	r30, r18
    14fa:	20 81       	ld	r18, Z
    14fc:	21 60       	ori	r18, 0x01	; 1
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
          Can_config_rx();       
    1502:	8f ee       	ldi	r24, 0xEF	; 239
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	2f ee       	ldi	r18, 0xEF	; 239
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	f9 01       	movw	r30, r18
    150c:	20 81       	ld	r18, Z
    150e:	2f 73       	andi	r18, 0x3F	; 63
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
    1514:	8f ee       	ldi	r24, 0xEF	; 239
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	2f ee       	ldi	r18, 0xEF	; 239
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	20 81       	ld	r18, Z
    1520:	20 68       	ori	r18, 0x80	; 128
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
          break;
    1526:	1c c2       	rjmp	.+1080   	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1528:	19 82       	std	Y+1, r1	; 0x01
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <__stack+0xc53>
    152c:	8a ef       	ldi	r24, 0xFA	; 250
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	29 85       	ldd	r18, Y+9	; 0x09
    1532:	3a 85       	ldd	r19, Y+10	; 0x0a
    1534:	f9 01       	movw	r30, r18
    1536:	47 81       	ldd	r20, Z+7	; 0x07
    1538:	50 85       	ldd	r21, Z+8	; 0x08
    153a:	29 81       	ldd	r18, Y+1	; 0x01
    153c:	22 2f       	mov	r18, r18
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	24 0f       	add	r18, r20
    1542:	35 1f       	adc	r19, r21
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	fc 01       	movw	r30, r24
    1558:	96 81       	ldd	r25, Z+6	; 0x06
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	89 17       	cp	r24, r25
    155e:	30 f3       	brcs	.-52     	; 0x152c <__stack+0xc2d>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1560:	1d 82       	std	Y+5, r1	; 0x05
    1562:	1e 82       	std	Y+6, r1	; 0x06
    1564:	1f 82       	std	Y+7, r1	; 0x07
    1566:	18 86       	std	Y+8, r1	; 0x08
    1568:	27 ef       	ldi	r18, 0xF7	; 247
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	ce 01       	movw	r24, r28
    156e:	05 96       	adiw	r24, 0x05	; 5
    1570:	03 96       	adiw	r24, 0x03	; 3
    1572:	fc 01       	movw	r30, r24
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	44 0f       	add	r20, r20
    157a:	44 0f       	add	r20, r20
    157c:	44 0f       	add	r20, r20
    157e:	ce 01       	movw	r24, r28
    1580:	05 96       	adiw	r24, 0x05	; 5
    1582:	02 96       	adiw	r24, 0x02	; 2
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	82 95       	swap	r24
    158a:	86 95       	lsr	r24
    158c:	87 70       	andi	r24, 0x07	; 7
    158e:	84 0f       	add	r24, r20
    1590:	f9 01       	movw	r30, r18
    1592:	80 83       	st	Z, r24
    1594:	26 ef       	ldi	r18, 0xF6	; 246
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	ce 01       	movw	r24, r28
    159a:	05 96       	adiw	r24, 0x05	; 5
    159c:	02 96       	adiw	r24, 0x02	; 2
    159e:	fc 01       	movw	r30, r24
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	44 0f       	add	r20, r20
    15a6:	44 0f       	add	r20, r20
    15a8:	44 0f       	add	r20, r20
    15aa:	ce 01       	movw	r24, r28
    15ac:	05 96       	adiw	r24, 0x05	; 5
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	82 95       	swap	r24
    15b6:	86 95       	lsr	r24
    15b8:	87 70       	andi	r24, 0x07	; 7
    15ba:	84 0f       	add	r24, r20
    15bc:	f9 01       	movw	r30, r18
    15be:	80 83       	st	Z, r24
    15c0:	25 ef       	ldi	r18, 0xF5	; 245
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	ce 01       	movw	r24, r28
    15c6:	05 96       	adiw	r24, 0x05	; 5
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	44 0f       	add	r20, r20
    15d2:	44 0f       	add	r20, r20
    15d4:	44 0f       	add	r20, r20
    15d6:	ce 01       	movw	r24, r28
    15d8:	05 96       	adiw	r24, 0x05	; 5
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	82 95       	swap	r24
    15e0:	86 95       	lsr	r24
    15e2:	87 70       	andi	r24, 0x07	; 7
    15e4:	84 0f       	add	r24, r20
    15e6:	f9 01       	movw	r30, r18
    15e8:	80 83       	st	Z, r24
    15ea:	84 ef       	ldi	r24, 0xF4	; 244
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9e 01       	movw	r18, r28
    15f0:	2b 5f       	subi	r18, 0xFB	; 251
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	22 0f       	add	r18, r18
    15fa:	22 0f       	add	r18, r18
    15fc:	22 0f       	add	r18, r18
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1602:	8f ee       	ldi	r24, 0xEF	; 239
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	2f ee       	ldi	r18, 0xEF	; 239
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	40 81       	ld	r20, Z
    160e:	29 85       	ldd	r18, Y+9	; 0x09
    1610:	3a 85       	ldd	r19, Y+10	; 0x0a
    1612:	f9 01       	movw	r30, r18
    1614:	26 81       	ldd	r18, Z+6	; 0x06
    1616:	24 2b       	or	r18, r20
    1618:	fc 01       	movw	r30, r24
    161a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	fc 01       	movw	r30, r24
    1624:	22 87       	std	Z+10, r18	; 0x0a
    1626:	84 ef       	ldi	r24, 0xF4	; 244
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	24 ef       	ldi	r18, 0xF4	; 244
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	24 60       	ori	r18, 0x04	; 4
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
    1638:	80 ef       	ldi	r24, 0xF0	; 240
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	20 ef       	ldi	r18, 0xF0	; 240
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	f9 01       	movw	r30, r18
    1642:	20 81       	ld	r18, Z
    1644:	24 60       	ori	r18, 0x04	; 4
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
          Can_set_rplv();
    164a:	8f ee       	ldi	r24, 0xEF	; 239
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	2f ee       	ldi	r18, 0xEF	; 239
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	f9 01       	movw	r30, r18
    1654:	20 81       	ld	r18, Z
    1656:	20 62       	ori	r18, 0x20	; 32
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
          Can_clear_idemsk();
    165c:	84 ef       	ldi	r24, 0xF4	; 244
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	24 ef       	ldi	r18, 0xF4	; 244
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	2e 7f       	andi	r18, 0xFE	; 254
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
          Can_config_rx();       
    166e:	8f ee       	ldi	r24, 0xEF	; 239
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	2f ee       	ldi	r18, 0xEF	; 239
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	2f 73       	andi	r18, 0x3F	; 63
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	8f ee       	ldi	r24, 0xEF	; 239
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	2f ee       	ldi	r18, 0xEF	; 239
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	f9 01       	movw	r30, r18
    168a:	20 81       	ld	r18, Z
    168c:	20 68       	ori	r18, 0x80	; 128
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18
          break;
    1692:	66 c1       	rjmp	.+716    	; 0x1960 <__stack+0x1061>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	fc 01       	movw	r30, r24
    169a:	83 85       	ldd	r24, Z+11	; 0x0b
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <__stack+0xda3>
    16a0:	69 c0       	rjmp	.+210    	; 0x1774 <__stack+0xe75>
    16a2:	83 ef       	ldi	r24, 0xF3	; 243
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	29 85       	ldd	r18, Y+9	; 0x09
    16a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16aa:	2e 5f       	subi	r18, 0xFE	; 254
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	2d 5f       	subi	r18, 0xFD	; 253
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	f9 01       	movw	r30, r18
    16b4:	20 81       	ld	r18, Z
    16b6:	42 2f       	mov	r20, r18
    16b8:	44 0f       	add	r20, r20
    16ba:	44 0f       	add	r20, r20
    16bc:	44 0f       	add	r20, r20
    16be:	29 85       	ldd	r18, Y+9	; 0x09
    16c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c2:	2e 5f       	subi	r18, 0xFE	; 254
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	2e 5f       	subi	r18, 0xFE	; 254
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	f9 01       	movw	r30, r18
    16cc:	20 81       	ld	r18, Z
    16ce:	22 95       	swap	r18
    16d0:	26 95       	lsr	r18
    16d2:	27 70       	andi	r18, 0x07	; 7
    16d4:	24 0f       	add	r18, r20
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18
    16da:	82 ef       	ldi	r24, 0xF2	; 242
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	29 85       	ldd	r18, Y+9	; 0x09
    16e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e2:	2e 5f       	subi	r18, 0xFE	; 254
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	2e 5f       	subi	r18, 0xFE	; 254
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	f9 01       	movw	r30, r18
    16ec:	20 81       	ld	r18, Z
    16ee:	42 2f       	mov	r20, r18
    16f0:	44 0f       	add	r20, r20
    16f2:	44 0f       	add	r20, r20
    16f4:	44 0f       	add	r20, r20
    16f6:	29 85       	ldd	r18, Y+9	; 0x09
    16f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fa:	2e 5f       	subi	r18, 0xFE	; 254
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	f9 01       	movw	r30, r18
    1704:	20 81       	ld	r18, Z
    1706:	22 95       	swap	r18
    1708:	26 95       	lsr	r18
    170a:	27 70       	andi	r18, 0x07	; 7
    170c:	24 0f       	add	r18, r20
    170e:	fc 01       	movw	r30, r24
    1710:	20 83       	st	Z, r18
    1712:	81 ef       	ldi	r24, 0xF1	; 241
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	29 85       	ldd	r18, Y+9	; 0x09
    1718:	3a 85       	ldd	r19, Y+10	; 0x0a
    171a:	2e 5f       	subi	r18, 0xFE	; 254
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	f9 01       	movw	r30, r18
    1724:	20 81       	ld	r18, Z
    1726:	42 2f       	mov	r20, r18
    1728:	44 0f       	add	r20, r20
    172a:	44 0f       	add	r20, r20
    172c:	44 0f       	add	r20, r20
    172e:	29 85       	ldd	r18, Y+9	; 0x09
    1730:	3a 85       	ldd	r19, Y+10	; 0x0a
    1732:	2e 5f       	subi	r18, 0xFE	; 254
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	f9 01       	movw	r30, r18
    1738:	20 81       	ld	r18, Z
    173a:	22 95       	swap	r18
    173c:	26 95       	lsr	r18
    173e:	27 70       	andi	r18, 0x07	; 7
    1740:	24 0f       	add	r18, r20
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18
    1746:	80 ef       	ldi	r24, 0xF0	; 240
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	29 85       	ldd	r18, Y+9	; 0x09
    174c:	3a 85       	ldd	r19, Y+10	; 0x0a
    174e:	2e 5f       	subi	r18, 0xFE	; 254
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	f9 01       	movw	r30, r18
    1754:	20 81       	ld	r18, Z
    1756:	22 0f       	add	r18, r18
    1758:	22 0f       	add	r18, r18
    175a:	22 0f       	add	r18, r18
    175c:	fc 01       	movw	r30, r24
    175e:	20 83       	st	Z, r18
    1760:	8f ee       	ldi	r24, 0xEF	; 239
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2f ee       	ldi	r18, 0xEF	; 239
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	f9 01       	movw	r30, r18
    176a:	20 81       	ld	r18, Z
    176c:	20 61       	ori	r18, 0x10	; 16
    176e:	fc 01       	movw	r30, r24
    1770:	20 83       	st	Z, r18
    1772:	30 c0       	rjmp	.+96     	; 0x17d4 <__stack+0xed5>
          else              { Can_set_std_id(cmd->id.std);}
    1774:	83 ef       	ldi	r24, 0xF3	; 243
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	29 85       	ldd	r18, Y+9	; 0x09
    177a:	3a 85       	ldd	r19, Y+10	; 0x0a
    177c:	2e 5f       	subi	r18, 0xFE	; 254
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	2f 5f       	subi	r18, 0xFF	; 255
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	f9 01       	movw	r30, r18
    1786:	20 81       	ld	r18, Z
    1788:	42 2f       	mov	r20, r18
    178a:	42 95       	swap	r20
    178c:	44 0f       	add	r20, r20
    178e:	40 7e       	andi	r20, 0xE0	; 224
    1790:	29 85       	ldd	r18, Y+9	; 0x09
    1792:	3a 85       	ldd	r19, Y+10	; 0x0a
    1794:	2e 5f       	subi	r18, 0xFE	; 254
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	f9 01       	movw	r30, r18
    179a:	20 81       	ld	r18, Z
    179c:	26 95       	lsr	r18
    179e:	26 95       	lsr	r18
    17a0:	26 95       	lsr	r18
    17a2:	24 0f       	add	r18, r20
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
    17a8:	82 ef       	ldi	r24, 0xF2	; 242
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	29 85       	ldd	r18, Y+9	; 0x09
    17ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b0:	2e 5f       	subi	r18, 0xFE	; 254
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	f9 01       	movw	r30, r18
    17b6:	20 81       	ld	r18, Z
    17b8:	22 95       	swap	r18
    17ba:	22 0f       	add	r18, r18
    17bc:	20 7e       	andi	r18, 0xE0	; 224
    17be:	fc 01       	movw	r30, r24
    17c0:	20 83       	st	Z, r18
    17c2:	8f ee       	ldi	r24, 0xEF	; 239
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	2f ee       	ldi	r18, 0xEF	; 239
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	2f 7e       	andi	r18, 0xEF	; 239
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <__stack+0xeff>
    17d8:	8a ef       	ldi	r24, 0xFA	; 250
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	29 85       	ldd	r18, Y+9	; 0x09
    17de:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e0:	f9 01       	movw	r30, r18
    17e2:	47 81       	ldd	r20, Z+7	; 0x07
    17e4:	50 85       	ldd	r21, Z+8	; 0x08
    17e6:	29 81       	ldd	r18, Y+1	; 0x01
    17e8:	22 2f       	mov	r18, r18
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	24 0f       	add	r18, r20
    17ee:	35 1f       	adc	r19, r21
    17f0:	f9 01       	movw	r30, r18
    17f2:	20 81       	ld	r18, Z
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	fc 01       	movw	r30, r24
    1804:	96 81       	ldd	r25, Z+6	; 0x06
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	89 17       	cp	r24, r25
    180a:	30 f3       	brcs	.-52     	; 0x17d8 <__stack+0xed9>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	dc 01       	movw	r26, r24
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	af 83       	std	Y+7, r26	; 0x07
    1818:	b8 87       	std	Y+8, r27	; 0x08
    181a:	27 ef       	ldi	r18, 0xF7	; 247
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	ce 01       	movw	r24, r28
    1820:	05 96       	adiw	r24, 0x05	; 5
    1822:	03 96       	adiw	r24, 0x03	; 3
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	44 0f       	add	r20, r20
    182c:	44 0f       	add	r20, r20
    182e:	44 0f       	add	r20, r20
    1830:	ce 01       	movw	r24, r28
    1832:	05 96       	adiw	r24, 0x05	; 5
    1834:	02 96       	adiw	r24, 0x02	; 2
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	82 95       	swap	r24
    183c:	86 95       	lsr	r24
    183e:	87 70       	andi	r24, 0x07	; 7
    1840:	84 0f       	add	r24, r20
    1842:	f9 01       	movw	r30, r18
    1844:	80 83       	st	Z, r24
    1846:	26 ef       	ldi	r18, 0xF6	; 246
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	ce 01       	movw	r24, r28
    184c:	05 96       	adiw	r24, 0x05	; 5
    184e:	02 96       	adiw	r24, 0x02	; 2
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	44 0f       	add	r20, r20
    1858:	44 0f       	add	r20, r20
    185a:	44 0f       	add	r20, r20
    185c:	ce 01       	movw	r24, r28
    185e:	05 96       	adiw	r24, 0x05	; 5
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	fc 01       	movw	r30, r24
    1864:	80 81       	ld	r24, Z
    1866:	82 95       	swap	r24
    1868:	86 95       	lsr	r24
    186a:	87 70       	andi	r24, 0x07	; 7
    186c:	84 0f       	add	r24, r20
    186e:	f9 01       	movw	r30, r18
    1870:	80 83       	st	Z, r24
    1872:	25 ef       	ldi	r18, 0xF5	; 245
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	ce 01       	movw	r24, r28
    1878:	05 96       	adiw	r24, 0x05	; 5
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	44 0f       	add	r20, r20
    1884:	44 0f       	add	r20, r20
    1886:	44 0f       	add	r20, r20
    1888:	ce 01       	movw	r24, r28
    188a:	05 96       	adiw	r24, 0x05	; 5
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	82 95       	swap	r24
    1892:	86 95       	lsr	r24
    1894:	87 70       	andi	r24, 0x07	; 7
    1896:	84 0f       	add	r24, r20
    1898:	f9 01       	movw	r30, r18
    189a:	80 83       	st	Z, r24
    189c:	84 ef       	ldi	r24, 0xF4	; 244
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9e 01       	movw	r18, r28
    18a2:	2b 5f       	subi	r18, 0xFB	; 251
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	22 0f       	add	r18, r18
    18ac:	22 0f       	add	r18, r18
    18ae:	22 0f       	add	r18, r18
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    18b4:	8f ee       	ldi	r24, 0xEF	; 239
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	2f ee       	ldi	r18, 0xEF	; 239
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	f9 01       	movw	r30, r18
    18be:	40 81       	ld	r20, Z
    18c0:	29 85       	ldd	r18, Y+9	; 0x09
    18c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c4:	f9 01       	movw	r30, r18
    18c6:	26 81       	ldd	r18, Z+6	; 0x06
    18c8:	24 2b       	or	r18, r20
    18ca:	fc 01       	movw	r30, r24
    18cc:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	fc 01       	movw	r30, r24
    18d6:	22 87       	std	Z+10, r18	; 0x0a
    18d8:	84 ef       	ldi	r24, 0xF4	; 244
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	24 ef       	ldi	r18, 0xF4	; 244
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	f9 01       	movw	r30, r18
    18e2:	20 81       	ld	r18, Z
    18e4:	24 60       	ori	r18, 0x04	; 4
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18
    18ea:	80 ef       	ldi	r24, 0xF0	; 240
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	20 ef       	ldi	r18, 0xF0	; 240
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	f9 01       	movw	r30, r18
    18f4:	20 81       	ld	r18, Z
    18f6:	24 60       	ori	r18, 0x04	; 4
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
          Can_set_rplv();
    18fc:	8f ee       	ldi	r24, 0xEF	; 239
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	2f ee       	ldi	r18, 0xEF	; 239
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f9 01       	movw	r30, r18
    1906:	20 81       	ld	r18, Z
    1908:	20 62       	ori	r18, 0x20	; 32
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
          Can_set_idemsk();
    190e:	84 ef       	ldi	r24, 0xF4	; 244
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	24 ef       	ldi	r18, 0xF4	; 244
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	f9 01       	movw	r30, r18
    1918:	20 81       	ld	r18, Z
    191a:	21 60       	ori	r18, 0x01	; 1
    191c:	fc 01       	movw	r30, r24
    191e:	20 83       	st	Z, r18
          Can_config_rx();       
    1920:	8f ee       	ldi	r24, 0xEF	; 239
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	2f ee       	ldi	r18, 0xEF	; 239
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	2f 73       	andi	r18, 0x3F	; 63
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
    1932:	8f ee       	ldi	r24, 0xEF	; 239
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	2f ee       	ldi	r18, 0xEF	; 239
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	f9 01       	movw	r30, r18
    193c:	20 81       	ld	r18, Z
    193e:	20 68       	ori	r18, 0x80	; 128
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
          break;
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <__stack+0x1061>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	fc 01       	movw	r30, r24
    194c:	11 86       	std	Z+9, r1	; 0x09
          break;
    194e:	00 00       	nop
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <__stack+0x1061>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	2f e1       	ldi	r18, 0x1F	; 31
    1958:	fc 01       	movw	r30, r24
    195a:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <__stack+0x1063>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1960:	80 e0       	ldi	r24, 0x00	; 0
}
    1962:	2a 96       	adiw	r28, 0x0a	; 10
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	00 d0       	rcall	.+0      	; 0x197a <can_get_status+0x6>
    197a:	00 d0       	rcall	.+0      	; 0x197c <can_get_status+0x8>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	9c 83       	std	Y+4, r25	; 0x04
    1982:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	fc 01       	movw	r30, r24
    198a:	81 85       	ldd	r24, Z+9	; 0x09
    198c:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	88 23       	and	r24, r24
    1992:	31 f0       	breq	.+12     	; 0x19a0 <can_get_status+0x2c>
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	8f 31       	cpi	r24, 0x1F	; 31
    1998:	19 f0       	breq	.+6      	; 0x19a0 <can_get_status+0x2c>
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	8f 3f       	cpi	r24, 0xFF	; 255
    199e:	11 f4       	brne	.+4      	; 0x19a4 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	14 c1       	rjmp	.+552    	; 0x1bcc <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    19a4:	8d ee       	ldi	r24, 0xED	; 237
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	f9 01       	movw	r30, r18
    19ae:	20 81       	ld	r18, Z
    19b0:	22 95       	swap	r18
    19b2:	20 7f       	andi	r18, 0xF0	; 240
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    19b8:	0e 94 87 01 	call	0x30e	; 0x30e <can_get_mob_status>
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	80 32       	cpi	r24, 0x20	; 32
    19c6:	91 05       	cpc	r25, r1
    19c8:	89 f0       	breq	.+34     	; 0x19ec <can_get_status+0x78>
    19ca:	81 32       	cpi	r24, 0x21	; 33
    19cc:	91 05       	cpc	r25, r1
    19ce:	1c f4       	brge	.+6      	; 0x19d6 <can_get_status+0x62>
    19d0:	89 2b       	or	r24, r25
    19d2:	49 f0       	breq	.+18     	; 0x19e6 <can_get_status+0x72>
    19d4:	e5 c0       	rjmp	.+458    	; 0x1ba0 <can_get_status+0x22c>
    19d6:	80 34       	cpi	r24, 0x40	; 64
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <can_get_status+0x6a>
    19dc:	cd c0       	rjmp	.+410    	; 0x1b78 <can_get_status+0x204>
    19de:	80 3a       	cpi	r24, 0xA0	; 160
    19e0:	91 05       	cpc	r25, r1
    19e2:	21 f0       	breq	.+8      	; 0x19ec <can_get_status+0x78>
    19e4:	dd c0       	rjmp	.+442    	; 0x1ba0 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
            break;
    19ea:	ef c0       	rjmp	.+478    	; 0x1bca <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    19ec:	8f ee       	ldi	r24, 0xEF	; 239
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	28 2f       	mov	r18, r24
    19f6:	2f 70       	andi	r18, 0x0F	; 15
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	fc 01       	movw	r30, r24
    19fe:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	87 81       	ldd	r24, Z+7	; 0x07
    1a08:	90 85       	ldd	r25, Z+8	; 0x08
    1a0a:	0e 94 b9 01 	call	0x372	; 0x372 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1a0e:	80 ef       	ldi	r24, 0xF0	; 240
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	84 70       	andi	r24, 0x04	; 4
    1a1c:	99 27       	eor	r25, r25
    1a1e:	95 95       	asr	r25
    1a20:	87 95       	ror	r24
    1a22:	95 95       	asr	r25
    1a24:	87 95       	ror	r24
    1a26:	21 e0       	ldi	r18, 0x01	; 1
    1a28:	89 2b       	or	r24, r25
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <can_get_status+0xba>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	fc 01       	movw	r30, r24
    1a34:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1a36:	8f ee       	ldi	r24, 0xEF	; 239
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	80 71       	andi	r24, 0x10	; 16
    1a44:	99 27       	eor	r25, r25
    1a46:	95 95       	asr	r25
    1a48:	87 95       	ror	r24
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	95 95       	asr	r25
    1a50:	87 95       	ror	r24
    1a52:	95 95       	asr	r25
    1a54:	87 95       	ror	r24
    1a56:	89 2b       	or	r24, r25
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <can_get_status+0xe8>
    1a5a:	54 c0       	rjmp	.+168    	; 0x1b04 <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	fc 01       	movw	r30, r24
    1a64:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	02 96       	adiw	r24, 0x02	; 2
    1a6c:	03 96       	adiw	r24, 0x03	; 3
    1a6e:	23 ef       	ldi	r18, 0xF3	; 243
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	f9 01       	movw	r30, r18
    1a74:	20 81       	ld	r18, Z
    1a76:	26 95       	lsr	r18
    1a78:	26 95       	lsr	r18
    1a7a:	26 95       	lsr	r18
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	02 96       	adiw	r24, 0x02	; 2
    1a86:	02 96       	adiw	r24, 0x02	; 2
    1a88:	22 ef       	ldi	r18, 0xF2	; 242
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	20 81       	ld	r18, Z
    1a90:	42 2f       	mov	r20, r18
    1a92:	46 95       	lsr	r20
    1a94:	46 95       	lsr	r20
    1a96:	46 95       	lsr	r20
    1a98:	23 ef       	ldi	r18, 0xF3	; 243
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	22 95       	swap	r18
    1aa2:	22 0f       	add	r18, r18
    1aa4:	20 7e       	andi	r18, 0xE0	; 224
    1aa6:	24 0f       	add	r18, r20
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	02 96       	adiw	r24, 0x02	; 2
    1ab2:	01 96       	adiw	r24, 0x01	; 1
    1ab4:	21 ef       	ldi	r18, 0xF1	; 241
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	f9 01       	movw	r30, r18
    1aba:	20 81       	ld	r18, Z
    1abc:	42 2f       	mov	r20, r18
    1abe:	46 95       	lsr	r20
    1ac0:	46 95       	lsr	r20
    1ac2:	46 95       	lsr	r20
    1ac4:	22 ef       	ldi	r18, 0xF2	; 242
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	f9 01       	movw	r30, r18
    1aca:	20 81       	ld	r18, Z
    1acc:	22 95       	swap	r18
    1ace:	22 0f       	add	r18, r18
    1ad0:	20 7e       	andi	r18, 0xE0	; 224
    1ad2:	24 0f       	add	r18, r20
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	20 83       	st	Z, r18
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	02 96       	adiw	r24, 0x02	; 2
    1ade:	20 ef       	ldi	r18, 0xF0	; 240
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	20 81       	ld	r18, Z
    1ae6:	42 2f       	mov	r20, r18
    1ae8:	46 95       	lsr	r20
    1aea:	46 95       	lsr	r20
    1aec:	46 95       	lsr	r20
    1aee:	21 ef       	ldi	r18, 0xF1	; 241
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	f9 01       	movw	r30, r18
    1af4:	20 81       	ld	r18, Z
    1af6:	22 95       	swap	r18
    1af8:	22 0f       	add	r18, r18
    1afa:	20 7e       	andi	r18, 0xE0	; 224
    1afc:	24 0f       	add	r18, r20
    1afe:	fc 01       	movw	r30, r24
    1b00:	20 83       	st	Z, r18
    1b02:	26 c0       	rjmp	.+76     	; 0x1b50 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	fc 01       	movw	r30, r24
    1b0a:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	02 96       	adiw	r24, 0x02	; 2
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	23 ef       	ldi	r18, 0xF3	; 243
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	22 95       	swap	r18
    1b1e:	26 95       	lsr	r18
    1b20:	27 70       	andi	r18, 0x07	; 7
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 83       	st	Z, r18
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	02 96       	adiw	r24, 0x02	; 2
    1b2c:	22 ef       	ldi	r18, 0xF2	; 242
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	f9 01       	movw	r30, r18
    1b32:	20 81       	ld	r18, Z
    1b34:	42 2f       	mov	r20, r18
    1b36:	42 95       	swap	r20
    1b38:	46 95       	lsr	r20
    1b3a:	47 70       	andi	r20, 0x07	; 7
    1b3c:	23 ef       	ldi	r18, 0xF3	; 243
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	f9 01       	movw	r30, r18
    1b42:	20 81       	ld	r18, Z
    1b44:	22 0f       	add	r18, r18
    1b46:	22 0f       	add	r18, r18
    1b48:	22 0f       	add	r18, r18
    1b4a:	24 0f       	add	r18, r20
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	2a 81       	ldd	r18, Y+2	; 0x02
    1b56:	fc 01       	movw	r30, r24
    1b58:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b5a:	8f ee       	ldi	r24, 0xEF	; 239
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	2f ee       	ldi	r18, 0xEF	; 239
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	f9 01       	movw	r30, r18
    1b64:	20 81       	ld	r18, Z
    1b66:	2f 73       	andi	r18, 0x3F	; 63
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b6c:	8e ee       	ldi	r24, 0xEE	; 238
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	fc 01       	movw	r30, r24
    1b72:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1b74:	19 82       	std	Y+1, r1	; 0x01
            break;
    1b76:	29 c0       	rjmp	.+82     	; 0x1bca <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7e:	fc 01       	movw	r30, r24
    1b80:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b82:	8f ee       	ldi	r24, 0xEF	; 239
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	2f ee       	ldi	r18, 0xEF	; 239
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	20 81       	ld	r18, Z
    1b8e:	2f 73       	andi	r18, 0x3F	; 63
    1b90:	fc 01       	movw	r30, r24
    1b92:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b94:	8e ee       	ldi	r24, 0xEE	; 238
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1b9c:	19 82       	std	Y+1, r1	; 0x01
            break;
    1b9e:	15 c0       	rjmp	.+42     	; 0x1bca <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1baa:	8f ee       	ldi	r24, 0xEF	; 239
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	2f ee       	ldi	r18, 0xEF	; 239
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	f9 01       	movw	r30, r18
    1bb4:	20 81       	ld	r18, Z
    1bb6:	2f 73       	andi	r18, 0x3F	; 63
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1bbc:	8e ee       	ldi	r24, 0xEE	; 238
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	89 83       	std	Y+1, r24	; 0x01
            break;
    1bc8:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	08 95       	ret

00001bda <chip_init>:
 */ 

#include "chip.h"

void chip_init (void)
{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
    1be2:	81 e6       	ldi	r24, 0x61	; 97
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	20 e8       	ldi	r18, 0x80	; 128
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 83       	st	Z, r18
	CLKPR = 0x00;
    1bec:	81 e6       	ldi	r24, 0x61	; 97
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	10 82       	st	Z, r1
	
	// leds at pb5 (led2) and pb6 (led3), active high
	// leds are off
	LEDS |= (1 << CPC1017)|(1 << LED2)|(1 << LED3);
    1bf4:	84 e2       	ldi	r24, 0x24	; 36
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	24 e2       	ldi	r18, 0x24	; 36
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	20 81       	ld	r18, Z
    1c00:	28 66       	ori	r18, 0x68	; 104
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
	
	LED2_OFF;
    1c06:	85 e2       	ldi	r24, 0x25	; 37
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	25 e2       	ldi	r18, 0x25	; 37
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	f9 01       	movw	r30, r18
    1c10:	20 81       	ld	r18, Z
    1c12:	2f 7d       	andi	r18, 0xDF	; 223
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 83       	st	Z, r18
	LED3_OFF;
    1c18:	85 e2       	ldi	r24, 0x25	; 37
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	25 e2       	ldi	r18, 0x25	; 37
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	f9 01       	movw	r30, r18
    1c22:	20 81       	ld	r18, Z
    1c24:	2f 7b       	andi	r18, 0xBF	; 191
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18
	CPC1017_OFF;
    1c2a:	85 e2       	ldi	r24, 0x25	; 37
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	25 e2       	ldi	r18, 0x25	; 37
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	27 7f       	andi	r18, 0xF7	; 247
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
	
	// spi
	LEDS |= (1 << SPI_MOSI)|(1 << SPI_SCK);
    1c3c:	84 e2       	ldi	r24, 0x24	; 36
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	24 e2       	ldi	r18, 0x24	; 36
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	f9 01       	movw	r30, r18
    1c46:	20 81       	ld	r18, Z
    1c48:	22 68       	ori	r18, 0x82	; 130
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18
	// spi ss
	DDRD |= (1 << SPI_SS);
    1c4e:	8a e2       	ldi	r24, 0x2A	; 42
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	2a e2       	ldi	r18, 0x2A	; 42
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	20 62       	ori	r18, 0x20	; 32
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
	SPI_SS_DESELECT;
    1c60:	8b e2       	ldi	r24, 0x2B	; 43
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	2b e2       	ldi	r18, 0x2B	; 43
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	20 81       	ld	r18, Z
    1c6c:	20 62       	ori	r18, 0x20	; 32
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
	
	// probe heater, output
	DDRC |= (1 << HEATER_PIN);
    1c72:	87 e2       	ldi	r24, 0x27	; 39
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	27 e2       	ldi	r18, 0x27	; 39
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	20 81       	ld	r18, Z
    1c7e:	22 60       	ori	r18, 0x02	; 2
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
    1c84:	00 00       	nop
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <cj125_read_diag>:
{
	return spi_read_write(CJ125_IDENT_REG_REQUEST);
}

uint16_t cj125_read_diag (void)
{
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_DIAG_REG_REQUEST);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	98 e7       	ldi	r25, 0x78	; 120
    1c98:	0e 94 97 11 	call	0x232e	; 0x232e <spi_read_write>
}
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <cj125_set_calibration_mode>:

void cj125_set_calibration_mode (void)
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	spi_read_write(CJ125_INIT_REG1_MODE_CALIBRATE);
    1caa:	8d e9       	ldi	r24, 0x9D	; 157
    1cac:	96 e5       	ldi	r25, 0x56	; 86
    1cae:	0e 94 97 11 	call	0x232e	; 0x232e <spi_read_write>
}
    1cb2:	00 00       	nop
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <cj125_end_calibration_mode_v8>:

void cj125_end_calibration_mode_v8 (void)
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	spi_read_write(CJ125_INIT_REG1_MODE_NORMAL_V8);
    1cc2:	88 e8       	ldi	r24, 0x88	; 136
    1cc4:	96 e5       	ldi	r25, 0x56	; 86
    1cc6:	0e 94 97 11 	call	0x232e	; 0x232e <spi_read_write>
}
    1cca:	00 00       	nop
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <dac_init>:
 */ 

#include "dac.h"

void dac_init (void)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
    1cda:	80 e9       	ldi	r24, 0x90	; 144
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	23 e0       	ldi	r18, 0x03	; 3
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 83       	st	Z, r18
}
    1ce4:	00 00       	nop
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <is_between>:

bool is_ubat_ok (void)
{
	inputs.UBat=adc_ad12v();
	return inputs.UBat_OK = is_between(UBat_MIN, UBat_MAX, inputs.UBat);
}
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <is_between+0x6>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <is_between+0x8>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <is_between+0xa>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	7c 83       	std	Y+4, r23	; 0x04
    1d00:	6b 83       	std	Y+3, r22	; 0x03
    1d02:	5e 83       	std	Y+6, r21	; 0x06
    1d04:	4d 83       	std	Y+5, r20	; 0x05
    1d06:	2d 81       	ldd	r18, Y+5	; 0x05
    1d08:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	82 17       	cp	r24, r18
    1d10:	93 07       	cpc	r25, r19
    1d12:	48 f4       	brcc	.+18     	; 0x1d26 <is_between+0x3a>
    1d14:	2d 81       	ldd	r18, Y+5	; 0x05
    1d16:	3e 81       	ldd	r19, Y+6	; 0x06
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	10 f4       	brcc	.+4      	; 0x1d26 <is_between+0x3a>
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <is_between+0x3c>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	26 96       	adiw	r28, 0x06	; 6
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <gpio_read_inputs>:
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <gpio_read_inputs+0x6>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <adc_ua>
    1d4c:	9c 01       	movw	r18, r24
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	fc 01       	movw	r30, r24
    1d54:	31 83       	std	Z+1, r19	; 0x01
    1d56:	20 83       	st	Z, r18
    1d58:	0e 94 fe 00 	call	0x1fc	; 0x1fc <adc_ur>
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	fc 01       	movw	r30, r24
    1d64:	35 83       	std	Z+5, r19	; 0x05
    1d66:	24 83       	std	Z+4, r18	; 0x04
    1d68:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_ad12v>
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	fc 01       	movw	r30, r24
    1d74:	31 87       	std	Z+9, r19	; 0x09
    1d76:	20 87       	std	Z+8, r18	; 0x08
    1d78:	0e 94 b4 00 	call	0x168	; 0x168 <adc_reference>
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	88 e8       	ldi	r24, 0x88	; 136
    1d84:	93 e1       	ldi	r25, 0x13	; 19
    1d86:	dc 01       	movw	r26, r24
    1d88:	0e 94 cd 13 	call	0x279a	; 0x279a <__muluhisi3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	07 2e       	mov	r0, r23
    1d92:	7a e0       	ldi	r23, 0x0A	; 10
    1d94:	b6 95       	lsr	r27
    1d96:	a7 95       	ror	r26
    1d98:	97 95       	ror	r25
    1d9a:	87 95       	ror	r24
    1d9c:	7a 95       	dec	r23
    1d9e:	d1 f7       	brne	.-12     	; 0x1d94 <gpio_read_inputs+0x5a>
    1da0:	70 2d       	mov	r23, r0
    1da2:	9c 01       	movw	r18, r24
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	fc 01       	movw	r30, r24
    1daa:	33 87       	std	Z+11, r19	; 0x0b
    1dac:	22 87       	std	Z+10, r18	; 0x0a
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 85       	ldd	r24, Z+8	; 0x08
    1db6:	91 85       	ldd	r25, Z+9	; 0x09
    1db8:	ac 01       	movw	r20, r24
    1dba:	60 eb       	ldi	r22, 0xB0	; 176
    1dbc:	72 e0       	ldi	r23, 0x02	; 2
    1dbe:	84 ec       	ldi	r24, 0xC4	; 196
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <is_between>
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	fc 01       	movw	r30, r24
    1dce:	24 87       	std	Z+12, r18	; 0x0c
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	82 85       	ldd	r24, Z+10	; 0x0a
    1dd8:	93 85       	ldd	r25, Z+11	; 0x0b
    1dda:	29 ec       	ldi	r18, 0xC9	; 201
    1ddc:	34 e0       	ldi	r19, 0x04	; 4
    1dde:	28 1b       	sub	r18, r24
    1de0:	39 0b       	sbc	r19, r25
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	fc 01       	movw	r30, r24
    1de8:	36 87       	std	Z+14, r19	; 0x0e
    1dea:	25 87       	std	Z+13, r18	; 0x0d
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 85       	ldd	r24, Z+8	; 0x08
    1df4:	91 85       	ldd	r25, Z+9	; 0x09
    1df6:	29 81       	ldd	r18, Y+1	; 0x01
    1df8:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	25 85       	ldd	r18, Z+13	; 0x0d
    1dfe:	36 85       	ldd	r19, Z+14	; 0x0e
    1e00:	82 0f       	add	r24, r18
    1e02:	93 1f       	adc	r25, r19
    1e04:	9c 01       	movw	r18, r24
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	84 eb       	ldi	r24, 0xB4	; 180
    1e0c:	9f e5       	ldi	r25, 0x5F	; 95
    1e0e:	dc 01       	movw	r26, r24
    1e10:	0e 94 cd 13 	call	0x279a	; 0x279a <__muluhisi3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	07 2e       	mov	r0, r23
    1e1a:	7a e0       	ldi	r23, 0x0A	; 10
    1e1c:	b6 95       	lsr	r27
    1e1e:	a7 95       	ror	r26
    1e20:	97 95       	ror	r25
    1e22:	87 95       	ror	r24
    1e24:	7a 95       	dec	r23
    1e26:	d1 f7       	brne	.-12     	; 0x1e1c <gpio_read_inputs+0xe2>
    1e28:	70 2d       	mov	r23, r0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	fc 01       	movw	r30, r24
    1e32:	30 8b       	std	Z+16, r19	; 0x10
    1e34:	27 87       	std	Z+15, r18	; 0x0f
    1e36:	00 00       	nop
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <calculate_pwm_for_voltage>:

uint16_t calculate_pwm_for_voltage (uint16_t voltage)
{	
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <calculate_pwm_for_voltage+0xe>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	89 83       	std	Y+1, r24	; 0x01
	return (uint16_t) ((float)voltage/inputs.USupply*1024.0);
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	cc 01       	movw	r24, r24
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 bd 12 	call	0x257a	; 0x257a <__floatunsisf>
    1e6a:	6b 01       	movw	r12, r22
    1e6c:	7c 01       	movw	r14, r24
    1e6e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
    1e72:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
    1e76:	09 2e       	mov	r0, r25
    1e78:	00 0c       	add	r0, r0
    1e7a:	aa 0b       	sbc	r26, r26
    1e7c:	bb 0b       	sbc	r27, r27
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 bf 12 	call	0x257e	; 0x257e <__floatsisf>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	ad 01       	movw	r20, r26
    1e8e:	c7 01       	movw	r24, r14
    1e90:	b6 01       	movw	r22, r12
    1e92:	0e 94 1c 12 	call	0x2438	; 0x2438 <__divsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	54 e4       	ldi	r21, 0x44	; 68
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 8e 12 	call	0x251c	; 0x251c <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	08 95       	ret

00001ecc <main>:

#include "config.h"
#include "helpers.h"

int main(void)
{
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	a0 97       	sbiw	r28, 0x20	; 32
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
	chip_init();
    1ee0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <chip_init>
	can_init(1);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	0e 94 07 02 	call	0x40e	; 0x40e <can_init>
	timer_delay_ms(50);
    1eea:	82 e3       	ldi	r24, 0x32	; 50
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <timer_delay_ms>
	adc_init();
    1ef2:	0e 94 70 00 	call	0xe0	; 0xe0 <adc_init>
	dac_init();
    1ef6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <dac_init>
	spi_init();
    1efa:	0e 94 86 11 	call	0x230c	; 0x230c <spi_init>
	pwm_init();
    1efe:	0e 94 3e 11 	call	0x227c	; 0x227c <pwm_init>
	sei();
    1f02:	78 94       	sei
	
	uint16_t cj125_diag;
	uint16_t pwm_duty = 0;
    1f04:	1a 86       	std	Y+10, r1	; 0x0a
    1f06:	19 86       	std	Y+9, r1	; 0x09
	uint16_t timer_value = 0;
    1f08:	1a 82       	std	Y+2, r1	; 0x02
    1f0a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t heater_voltage = 0;
    1f0c:	1c 82       	std	Y+4, r1	; 0x04
    1f0e:	1b 82       	std	Y+3, r1	; 0x03
	int counter = 0;
    1f10:	1e 82       	std	Y+6, r1	; 0x06
    1f12:	1d 82       	std	Y+5, r1	; 0x05
	
   	uint8_t pt_data[CAN_DLC];
	st_cmd_t msg;
	msg.id.ext = CAN_ID;
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	8f 8b       	std	Y+23, r24	; 0x17
    1f1e:	98 8f       	std	Y+24, r25	; 0x18
    1f20:	a9 8f       	std	Y+25, r26	; 0x19
    1f22:	ba 8f       	std	Y+26, r27	; 0x1a
	msg.dlc = CAN_DLC;
    1f24:	88 e0       	ldi	r24, 0x08	; 8
    1f26:	8b 8f       	std	Y+27, r24	; 0x1b
	msg.cmd = CMD_TX_DATA;
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	8e 8b       	std	Y+22, r24	; 0x16
	
	// check cj125 diag register after start, if all clear go to INIT:
	switch (cj125_diag = cj125_read_diag())
    1f2c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <cj125_read_diag>
    1f30:	9c 87       	std	Y+12, r25	; 0x0c
    1f32:	8b 87       	std	Y+11, r24	; 0x0b
    1f34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f36:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f38:	8f 37       	cpi	r24, 0x7F	; 127
    1f3a:	28 e2       	ldi	r18, 0x28	; 40
    1f3c:	92 07       	cpc	r25, r18
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <main+0x8a>
    1f40:	8f 3f       	cpi	r24, 0xFF	; 255
    1f42:	e8 e2       	ldi	r30, 0x28	; 40
    1f44:	9e 07       	cpc	r25, r30
    1f46:	21 f0       	breq	.+8      	; 0x1f50 <main+0x84>
    1f48:	85 35       	cpi	r24, 0x55	; 85
    1f4a:	98 42       	sbci	r25, 0x28	; 40
    1f4c:	41 f0       	breq	.+16     	; 0x1f5e <main+0x92>
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <main+0x9a>
	{
		case CJ125_DIAG_REG_STATUS_OK:
			state = INIT;
    1f50:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state>
		break;
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <main+0x9a>
		
		case CJ125_DIAG_REG_STATUS_NOSENSOR:
			state = NO_PROBE;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
		break;
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <main+0x9a>
		
		case CJ125_DIAG_REG_STATUS_NOPOWER:
			state = ERROR;
    1f5e:	87 e0       	ldi	r24, 0x07	; 7
    1f60:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
		break;
    1f64:	00 00       	nop
	}
			
    while (1) 
    {
		gpio_read_inputs(&inputs);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <gpio_read_inputs>
		
		switch (state)
    1f6e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	09 2e       	mov	r0, r25
    1f78:	00 0c       	add	r0, r0
    1f7a:	aa 0b       	sbc	r26, r26
    1f7c:	bb 0b       	sbc	r27, r27
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	27 e0       	ldi	r18, 0x07	; 7
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	84 1b       	sub	r24, r20
    1f88:	95 0b       	sbc	r25, r21
    1f8a:	28 17       	cp	r18, r24
    1f8c:	39 07       	cpc	r19, r25
    1f8e:	58 f3       	brcs	.-42     	; 0x1f66 <main+0x9a>
    1f90:	87 5b       	subi	r24, 0xB7	; 183
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	fc 01       	movw	r30, r24
    1f96:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__tablejump2__>
		{
			case INIT:
				state = CALIBRATE;
    1f9a:	85 e0       	ldi	r24, 0x05	; 5
    1f9c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
			break;
    1fa0:	6c c1       	rjmp	.+728    	; 0x227a <main+0x3ae>
			case WAIT_FOR_START:
			break;
			
			
			case CALIBRATE:
				counter = 0;
    1fa2:	1e 82       	std	Y+6, r1	; 0x06
    1fa4:	1d 82       	std	Y+5, r1	; 0x05
				cj125_set_calibration_mode();
    1fa6:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <cj125_set_calibration_mode>
				while (counter < CJ125_CALIBRATION_SAMPLE_COUNT)
    1faa:	2f c0       	rjmp	.+94     	; 0x200a <main+0x13e>
				{
					inputs.UA_calibration += (adc_ua() + inputs.UOffset);
    1fac:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <adc_ua>
    1fb0:	9c 01       	movw	r18, r24
    1fb2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1fb6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1fc2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1fce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					inputs.UR_calibration += (adc_ur() + inputs.UOffset);
    1fd2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <adc_ur>
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1fdc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    1fe8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1ff4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
					timer_delay_ms(10);
    1ff8:	8a e0       	ldi	r24, 0x0A	; 10
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <timer_delay_ms>
					counter++;
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
			
			
			case CALIBRATE:
				counter = 0;
				cj125_set_calibration_mode();
				while (counter < CJ125_CALIBRATION_SAMPLE_COUNT)
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	0a 97       	sbiw	r24, 0x0a	; 10
    2010:	6c f2       	brlt	.-102    	; 0x1fac <main+0xe0>
					inputs.UR_calibration += (adc_ur() + inputs.UOffset);
					timer_delay_ms(10);
					counter++;
				}
				
				inputs.UA_calibration /= CJ125_CALIBRATION_SAMPLE_COUNT;
    2012:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    2016:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    201a:	9c 01       	movw	r18, r24
    201c:	ad ec       	ldi	r26, 0xCD	; 205
    201e:	bc ec       	ldi	r27, 0xCC	; 204
    2020:	0e 94 be 13 	call	0x277c	; 0x277c <__umulhisi3>
    2024:	96 95       	lsr	r25
    2026:	87 95       	ror	r24
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	96 95       	lsr	r25
    202e:	87 95       	ror	r24
    2030:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2034:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
				inputs.UR_calibration /= CJ125_CALIBRATION_SAMPLE_COUNT;
    2038:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    203c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    2040:	9c 01       	movw	r18, r24
    2042:	ad ec       	ldi	r26, 0xCD	; 205
    2044:	bc ec       	ldi	r27, 0xCC	; 204
    2046:	0e 94 be 13 	call	0x277c	; 0x277c <__umulhisi3>
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	96 95       	lsr	r25
    2050:	87 95       	ror	r24
    2052:	96 95       	lsr	r25
    2054:	87 95       	ror	r24
    2056:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    205a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
				
				// go to normal mode, ampl. 8x
				cj125_end_calibration_mode_v8();
    205e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <cj125_end_calibration_mode_v8>
				
				state = CONDENSATE;
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
				
			break;
    2068:	08 c1       	rjmp	.+528    	; 0x227a <main+0x3ae>
			
			case CONDENSATE:
				// heating the probe on 1.5v for 5 seconds
				heater_voltage = 1500;
    206a:	8c ed       	ldi	r24, 0xDC	; 220
    206c:	95 e0       	ldi	r25, 0x05	; 5
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
				pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <calculate_pwm_for_voltage>
    207a:	9a 87       	std	Y+10, r25	; 0x0a
    207c:	89 87       	std	Y+9, r24	; 0x09
				pwm_set_duty(pwm_duty);
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <pwm_set_duty>
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
    2086:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    208a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    208e:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    2092:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    2096:	82 0f       	add	r24, r18
    2098:	93 1f       	adc	r25, r19
    209a:	9c 01       	movw	r18, r24
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	85 ef       	ldi	r24, 0xF5	; 245
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	dc 01       	movw	r26, r24
    20a6:	0e 94 cd 13 	call	0x279a	; 0x279a <__muluhisi3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	07 2e       	mov	r0, r23
    20b0:	7a e0       	ldi	r23, 0x0A	; 10
    20b2:	b6 95       	lsr	r27
    20b4:	a7 95       	ror	r26
    20b6:	97 95       	ror	r25
    20b8:	87 95       	ror	r24
    20ba:	7a 95       	dec	r23
    20bc:	d1 f7       	brne	.-12     	; 0x20b2 <main+0x1e6>
    20be:	70 2d       	mov	r23, r0
    20c0:	89 8b       	std	Y+17, r24	; 0x11
				pt_data[5] = 15;
    20c2:	8f e0       	ldi	r24, 0x0F	; 15
    20c4:	8a 8b       	std	Y+18, r24	; 0x12
				pt_data[6] = (1 << 1);	// bosch lsu4.9
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
				pt_data[7] = 0xf;	// evap startup
    20ca:	8f e0       	ldi	r24, 0x0F	; 15
    20cc:	8c 8b       	std	Y+20, r24	; 0x14
				
				// stay for 5 seconds in this case and send every 10ms a can message
				for (int i = 0; i <= 500; i++)
    20ce:	18 86       	std	Y+8, r1	; 0x08
    20d0:	1f 82       	std	Y+7, r1	; 0x07
    20d2:	17 c0       	rjmp	.+46     	; 0x2102 <main+0x236>
				{
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    20d4:	00 00       	nop
    20d6:	ce 01       	movw	r24, r28
    20d8:	45 96       	adiw	r24, 0x15	; 21
    20da:	0e 94 24 02 	call	0x448	; 0x448 <can_cmd>
    20de:	88 23       	and	r24, r24
    20e0:	d1 f7       	brne	.-12     	; 0x20d6 <main+0x20a>
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
    20e2:	00 00       	nop
    20e4:	ce 01       	movw	r24, r28
    20e6:	45 96       	adiw	r24, 0x15	; 21
    20e8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <can_get_status>
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	d1 f3       	breq	.-12     	; 0x20e4 <main+0x218>
					timer_delay_ms(10);					
    20f0:	8a e0       	ldi	r24, 0x0A	; 10
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <timer_delay_ms>
				pt_data[5] = 15;
				pt_data[6] = (1 << 1);	// bosch lsu4.9
				pt_data[7] = 0xf;	// evap startup
				
				// stay for 5 seconds in this case and send every 10ms a can message
				for (int i = 0; i <= 500; i++)
    20f8:	8f 81       	ldd	r24, Y+7	; 0x07
    20fa:	98 85       	ldd	r25, Y+8	; 0x08
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	8f 83       	std	Y+7, r24	; 0x07
    2102:	8f 81       	ldd	r24, Y+7	; 0x07
    2104:	98 85       	ldd	r25, Y+8	; 0x08
    2106:	85 3f       	cpi	r24, 0xF5	; 245
    2108:	91 40       	sbci	r25, 0x01	; 1
    210a:	24 f3       	brlt	.-56     	; 0x20d4 <main+0x208>
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
					timer_delay_ms(10);					
				}
				
				state = PREHEATING;
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
				
			break;
    2112:	b3 c0       	rjmp	.+358    	; 0x227a <main+0x3ae>
			
			case PREHEATING:
				// bring the probe on temperature, start at 8v and go up to 13v with 0.4v/sec
				heater_voltage = 8000;
    2114:	80 e4       	ldi	r24, 0x40	; 64
    2116:	9f e1       	ldi	r25, 0x1F	; 31
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
				gpio_read_inputs(&inputs);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <gpio_read_inputs>
				pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <calculate_pwm_for_voltage>
    212c:	9a 87       	std	Y+10, r25	; 0x0a
    212e:	89 87       	std	Y+9, r24	; 0x09
				// pwm_set_duty(pwm_duty);
			
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
    2130:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    2134:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    2138:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    213c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	9c 01       	movw	r18, r24
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	85 ef       	ldi	r24, 0xF5	; 245
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	dc 01       	movw	r26, r24
    2150:	0e 94 cd 13 	call	0x279a	; 0x279a <__muluhisi3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	07 2e       	mov	r0, r23
    215a:	7a e0       	ldi	r23, 0x0A	; 10
    215c:	b6 95       	lsr	r27
    215e:	a7 95       	ror	r26
    2160:	97 95       	ror	r25
    2162:	87 95       	ror	r24
    2164:	7a 95       	dec	r23
    2166:	d1 f7       	brne	.-12     	; 0x215c <main+0x290>
    2168:	70 2d       	mov	r23, r0
    216a:	89 8b       	std	Y+17, r24	; 0x11
				pt_data[6] = (1 << 1);	// bosch lsu4.9
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	8b 8b       	std	Y+19, r24	; 0x13
				pt_data[7] = 0x1;	// warm up
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	8c 8b       	std	Y+20, r24	; 0x14
				
				while (heater_voltage < 13000)
    2174:	72 c0       	rjmp	.+228    	; 0x225a <main+0x38e>
				{
					
					// increate heater voltage every second
					if (timer_value != 0 && timer_value % 1000 == 0)
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	89 2b       	or	r24, r25
    217c:	d9 f1       	breq	.+118    	; 0x21f4 <main+0x328>
    217e:	49 81       	ldd	r20, Y+1	; 0x01
    2180:	5a 81       	ldd	r21, Y+2	; 0x02
    2182:	ca 01       	movw	r24, r20
    2184:	96 95       	lsr	r25
    2186:	87 95       	ror	r24
    2188:	96 95       	lsr	r25
    218a:	87 95       	ror	r24
    218c:	96 95       	lsr	r25
    218e:	87 95       	ror	r24
    2190:	9c 01       	movw	r18, r24
    2192:	a5 ec       	ldi	r26, 0xC5	; 197
    2194:	b0 e2       	ldi	r27, 0x20	; 32
    2196:	0e 94 be 13 	call	0x277c	; 0x277c <__umulhisi3>
    219a:	92 95       	swap	r25
    219c:	82 95       	swap	r24
    219e:	8f 70       	andi	r24, 0x0F	; 15
    21a0:	89 27       	eor	r24, r25
    21a2:	9f 70       	andi	r25, 0x0F	; 15
    21a4:	89 27       	eor	r24, r25
    21a6:	68 ee       	ldi	r22, 0xE8	; 232
    21a8:	73 e0       	ldi	r23, 0x03	; 3
    21aa:	86 9f       	mul	r24, r22
    21ac:	90 01       	movw	r18, r0
    21ae:	87 9f       	mul	r24, r23
    21b0:	30 0d       	add	r19, r0
    21b2:	96 9f       	mul	r25, r22
    21b4:	30 0d       	add	r19, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	ca 01       	movw	r24, r20
    21ba:	82 1b       	sub	r24, r18
    21bc:	93 0b       	sbc	r25, r19
    21be:	89 2b       	or	r24, r25
    21c0:	c9 f4       	brne	.+50     	; 0x21f4 <main+0x328>
					{
						heater_voltage += 400;
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	80 57       	subi	r24, 0x70	; 112
    21c8:	9e 4f       	sbci	r25, 0xFE	; 254
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
						gpio_read_inputs(&inputs);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <gpio_read_inputs>
						// limit heater voltage to 13v
						if (heater_voltage > 13000) heater_voltage = 13000;
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	89 3c       	cpi	r24, 0xC9	; 201
    21dc:	92 43       	sbci	r25, 0x32	; 50
    21de:	20 f0       	brcs	.+8      	; 0x21e8 <main+0x31c>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	92 e3       	ldi	r25, 0x32	; 50
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
						pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <calculate_pwm_for_voltage>
    21f0:	9a 87       	std	Y+10, r25	; 0x0a
    21f2:	89 87       	std	Y+9, r24	; 0x09
						// pwm_set_duty(pwm_duty);
					}
					
					pt_data[5] = (uint8_t)((float) heater_voltage *0.01f);
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	cc 01       	movw	r24, r24
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 bd 12 	call	0x257a	; 0x257a <__floatunsisf>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	2a e0       	ldi	r18, 0x0A	; 10
    220c:	37 ed       	ldi	r19, 0xD7	; 215
    220e:	43 e2       	ldi	r20, 0x23	; 35
    2210:	5c e3       	ldi	r21, 0x3C	; 60
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 8e 12 	call	0x251c	; 0x251c <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8a 8b       	std	Y+18, r24	; 0x12
					timer_delay_ms(10);
    222c:	8a e0       	ldi	r24, 0x0A	; 10
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <timer_delay_ms>
					timer_value += 10;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	0a 96       	adiw	r24, 0x0a	; 10
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
					
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    223e:	00 00       	nop
    2240:	ce 01       	movw	r24, r28
    2242:	45 96       	adiw	r24, 0x15	; 21
    2244:	0e 94 24 02 	call	0x448	; 0x448 <can_cmd>
    2248:	88 23       	and	r24, r24
    224a:	d1 f7       	brne	.-12     	; 0x2240 <main+0x374>
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
    224c:	00 00       	nop
    224e:	ce 01       	movw	r24, r28
    2250:	45 96       	adiw	r24, 0x15	; 21
    2252:	0e 94 ba 0c 	call	0x1974	; 0x1974 <can_get_status>
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	d1 f3       	breq	.-12     	; 0x224e <main+0x382>
			
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
				pt_data[6] = (1 << 1);	// bosch lsu4.9
				pt_data[7] = 0x1;	// warm up
				
				while (heater_voltage < 13000)
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	88 3c       	cpi	r24, 0xC8	; 200
    2260:	92 43       	sbci	r25, 0x32	; 50
    2262:	08 f4       	brcc	.+2      	; 0x2266 <main+0x39a>
    2264:	88 cf       	rjmp	.-240    	; 0x2176 <main+0x2aa>
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
				}
				
				// preheating done, go to run
				state = RUNNING;
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
			
			break;
    226c:	06 c0       	rjmp	.+12     	; 0x227a <main+0x3ae>
			
			
			case ERROR:
			case NO_PROBE:
			
				pwm_duty = 10;
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a 87       	std	Y+10, r25	; 0x0a
    2274:	89 87       	std	Y+9, r24	; 0x09
			
			break;
    2276:	01 c0       	rjmp	.+2      	; 0x227a <main+0x3ae>
			break;
			
			case RUNNING:
			// TODO: PID
			
			break;
    2278:	00 00       	nop
		
		power_ok = is_ubat_ok();
		
		timer_delay_ms(200);
		*/
	}
    227a:	75 ce       	rjmp	.-790    	; 0x1f66 <main+0x9a>

0000227c <pwm_init>:
 */ 

#include "pwm.h"

void pwm_init (void)
{
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	// pin pc1 (OC1B, Timer 1 output compare B) connected to probe heater
	// fast pwm mode, prescaler 64,  top 0x03ff (1023) = 244Hz
	// pwm mode 7, 10-bit resolution
	// clear oc1b on compare match
	
	TCCR1A |= (1 << WGM11)|(1 << WGM10)|(1 << COM1B1);
    2284:	80 e8       	ldi	r24, 0x80	; 128
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	20 e8       	ldi	r18, 0x80	; 128
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	f9 01       	movw	r30, r18
    228e:	20 81       	ld	r18, Z
    2290:	23 62       	ori	r18, 0x23	; 35
    2292:	fc 01       	movw	r30, r24
    2294:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
    2296:	81 e8       	ldi	r24, 0x81	; 129
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	21 e8       	ldi	r18, 0x81	; 129
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f9 01       	movw	r30, r18
    22a0:	20 81       	ld	r18, Z
    22a2:	2b 60       	ori	r18, 0x0B	; 11
    22a4:	fc 01       	movw	r30, r24
    22a6:	20 83       	st	Z, r18
	pwm_set_duty(0);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <pwm_set_duty>
}
    22b0:	00 00       	nop
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <pwm_set_duty>:

void pwm_set_duty (uint16_t duty)
{
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	00 d0       	rcall	.+0      	; 0x22be <pwm_set_duty+0x6>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = duty;
    22c6:	8a e8       	ldi	r24, 0x8A	; 138
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	29 81       	ldd	r18, Y+1	; 0x01
    22cc:	3a 81       	ldd	r19, Y+2	; 0x02
    22ce:	fc 01       	movw	r30, r24
    22d0:	31 83       	std	Z+1, r19	; 0x01
    22d2:	20 83       	st	Z, r18
    22d4:	00 00       	nop
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <__make_u16t+0x6>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	38 2f       	mov	r19, r24
    22f6:	22 27       	eor	r18, r18
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	82 2b       	or	r24, r18
    2300:	93 2b       	or	r25, r19
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	// enable spi, 2MHz (div 128), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPR1)|(1 << SPR0);
    2314:	8c e4       	ldi	r24, 0x4C	; 76
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	2c e4       	ldi	r18, 0x4C	; 76
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	f9 01       	movw	r30, r18
    231e:	20 81       	ld	r18, Z
    2320:	27 65       	ori	r18, 0x57	; 87
    2322:	fc 01       	movw	r30, r24
    2324:	20 83       	st	Z, r18
}
    2326:	00 00       	nop
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	00 d0       	rcall	.+0      	; 0x2334 <spi_read_write+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <spi_read_write+0x8>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
    233e:	8b e2       	ldi	r24, 0x2B	; 43
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	2b e2       	ldi	r18, 0x2B	; 43
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	f9 01       	movw	r30, r18
    2348:	20 81       	ld	r18, Z
    234a:	2f 7d       	andi	r18, 0xDF	; 223
    234c:	fc 01       	movw	r30, r24
    234e:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
    2350:	8e e4       	ldi	r24, 0x4E	; 78
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	23 2f       	mov	r18, r19
    235a:	33 27       	eor	r19, r19
    235c:	fc 01       	movw	r30, r24
    235e:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    2360:	00 00       	nop
    2362:	8d e4       	ldi	r24, 0x4D	; 77
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	fc 01       	movw	r30, r24
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	d4 f7       	brge	.-12     	; 0x2362 <spi_read_write+0x34>
	byte1 = SPDR;
    236e:	8e e4       	ldi	r24, 0x4E	; 78
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	fc 01       	movw	r30, r24
    2374:	80 81       	ld	r24, Z
    2376:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	8f 73       	andi	r24, 0x3F	; 63
    237c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
    237e:	8e e4       	ldi	r24, 0x4E	; 78
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	2b 81       	ldd	r18, Y+3	; 0x03
    2384:	fc 01       	movw	r30, r24
    2386:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    2388:	00 00       	nop
    238a:	8d e4       	ldi	r24, 0x4D	; 77
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	fc 01       	movw	r30, r24
    2390:	80 81       	ld	r24, Z
    2392:	88 23       	and	r24, r24
    2394:	d4 f7       	brge	.-12     	; 0x238a <spi_read_write+0x5c>
	byte2 = SPDR;
    2396:	8e e4       	ldi	r24, 0x4E	; 78
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
    23a0:	8b e2       	ldi	r24, 0x2B	; 43
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	2b e2       	ldi	r18, 0x2B	; 43
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	20 81       	ld	r18, Z
    23ac:	20 62       	ori	r18, 0x20	; 32
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
    23b2:	6a 81       	ldd	r22, Y+2	; 0x02
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__make_u16t>
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <timer_delay_ms>:
	TIMSK0 |= (1 << TOIE0);
	
}

void timer_delay_ms (uint16_t delay)
{
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <timer_delay_ms+0x6>
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		TCNT0 = 6;
    23d6:	86 e4       	ldi	r24, 0x46	; 70
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	26 e0       	ldi	r18, 0x06	; 6
    23dc:	fc 01       	movw	r30, r24
    23de:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);
    23e0:	85 e4       	ldi	r24, 0x45	; 69
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	25 e4       	ldi	r18, 0x45	; 69
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	f9 01       	movw	r30, r18
    23ea:	20 81       	ld	r18, Z
    23ec:	23 60       	ori	r18, 0x03	; 3
    23ee:	fc 01       	movw	r30, r24
    23f0:	20 83       	st	Z, r18
		while ((TIFR0 & (1 << TOV0)) == 0);
    23f2:	00 00       	nop
    23f4:	85 e3       	ldi	r24, 0x35	; 53
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	fc 01       	movw	r30, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	81 70       	andi	r24, 0x01	; 1
    2402:	99 27       	eor	r25, r25
    2404:	89 2b       	or	r24, r25
    2406:	b1 f3       	breq	.-20     	; 0x23f4 <timer_delay_ms+0x2c>
		TIFR0 |= (1 << TOV0);
    2408:	85 e3       	ldi	r24, 0x35	; 53
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	25 e3       	ldi	r18, 0x35	; 53
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	f9 01       	movw	r30, r18
    2412:	20 81       	ld	r18, Z
    2414:	21 60       	ori	r18, 0x01	; 1
    2416:	fc 01       	movw	r30, r24
    2418:	20 83       	st	Z, r18
		delay--;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
	} while (delay > 0);
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	89 2b       	or	r24, r25
    242a:	a9 f6       	brne	.-86     	; 0x23d6 <timer_delay_ms+0xe>
}
    242c:	00 00       	nop
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <__divsf3>:
    2438:	0e 94 30 12 	call	0x2460	; 0x2460 <__divsf3x>
    243c:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__fp_round>
    2440:	0e 94 0a 13 	call	0x2614	; 0x2614 <__fp_pscB>
    2444:	58 f0       	brcs	.+22     	; 0x245c <__divsf3+0x24>
    2446:	0e 94 03 13 	call	0x2606	; 0x2606 <__fp_pscA>
    244a:	40 f0       	brcs	.+16     	; 0x245c <__divsf3+0x24>
    244c:	29 f4       	brne	.+10     	; 0x2458 <__divsf3+0x20>
    244e:	5f 3f       	cpi	r21, 0xFF	; 255
    2450:	29 f0       	breq	.+10     	; 0x245c <__divsf3+0x24>
    2452:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_inf>
    2456:	51 11       	cpse	r21, r1
    2458:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_szero>
    245c:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__fp_nan>

00002460 <__divsf3x>:
    2460:	0e 94 22 13 	call	0x2644	; 0x2644 <__fp_split3>
    2464:	68 f3       	brcs	.-38     	; 0x2440 <__divsf3+0x8>

00002466 <__divsf3_pse>:
    2466:	99 23       	and	r25, r25
    2468:	b1 f3       	breq	.-20     	; 0x2456 <__divsf3+0x1e>
    246a:	55 23       	and	r21, r21
    246c:	91 f3       	breq	.-28     	; 0x2452 <__divsf3+0x1a>
    246e:	95 1b       	sub	r25, r21
    2470:	55 0b       	sbc	r21, r21
    2472:	bb 27       	eor	r27, r27
    2474:	aa 27       	eor	r26, r26
    2476:	62 17       	cp	r22, r18
    2478:	73 07       	cpc	r23, r19
    247a:	84 07       	cpc	r24, r20
    247c:	38 f0       	brcs	.+14     	; 0x248c <__divsf3_pse+0x26>
    247e:	9f 5f       	subi	r25, 0xFF	; 255
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	22 0f       	add	r18, r18
    2484:	33 1f       	adc	r19, r19
    2486:	44 1f       	adc	r20, r20
    2488:	aa 1f       	adc	r26, r26
    248a:	a9 f3       	breq	.-22     	; 0x2476 <__divsf3_pse+0x10>
    248c:	35 d0       	rcall	.+106    	; 0x24f8 <__divsf3_pse+0x92>
    248e:	0e 2e       	mov	r0, r30
    2490:	3a f0       	brmi	.+14     	; 0x24a0 <__divsf3_pse+0x3a>
    2492:	e0 e8       	ldi	r30, 0x80	; 128
    2494:	32 d0       	rcall	.+100    	; 0x24fa <__divsf3_pse+0x94>
    2496:	91 50       	subi	r25, 0x01	; 1
    2498:	50 40       	sbci	r21, 0x00	; 0
    249a:	e6 95       	lsr	r30
    249c:	00 1c       	adc	r0, r0
    249e:	ca f7       	brpl	.-14     	; 0x2492 <__divsf3_pse+0x2c>
    24a0:	2b d0       	rcall	.+86     	; 0x24f8 <__divsf3_pse+0x92>
    24a2:	fe 2f       	mov	r31, r30
    24a4:	29 d0       	rcall	.+82     	; 0x24f8 <__divsf3_pse+0x92>
    24a6:	66 0f       	add	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 1f       	adc	r24, r24
    24ac:	bb 1f       	adc	r27, r27
    24ae:	26 17       	cp	r18, r22
    24b0:	37 07       	cpc	r19, r23
    24b2:	48 07       	cpc	r20, r24
    24b4:	ab 07       	cpc	r26, r27
    24b6:	b0 e8       	ldi	r27, 0x80	; 128
    24b8:	09 f0       	breq	.+2      	; 0x24bc <__divsf3_pse+0x56>
    24ba:	bb 0b       	sbc	r27, r27
    24bc:	80 2d       	mov	r24, r0
    24be:	bf 01       	movw	r22, r30
    24c0:	ff 27       	eor	r31, r31
    24c2:	93 58       	subi	r25, 0x83	; 131
    24c4:	5f 4f       	sbci	r21, 0xFF	; 255
    24c6:	3a f0       	brmi	.+14     	; 0x24d6 <__divsf3_pse+0x70>
    24c8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ca:	51 05       	cpc	r21, r1
    24cc:	78 f0       	brcs	.+30     	; 0x24ec <__divsf3_pse+0x86>
    24ce:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_inf>
    24d2:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_szero>
    24d6:	5f 3f       	cpi	r21, 0xFF	; 255
    24d8:	e4 f3       	brlt	.-8      	; 0x24d2 <__divsf3_pse+0x6c>
    24da:	98 3e       	cpi	r25, 0xE8	; 232
    24dc:	d4 f3       	brlt	.-12     	; 0x24d2 <__divsf3_pse+0x6c>
    24de:	86 95       	lsr	r24
    24e0:	77 95       	ror	r23
    24e2:	67 95       	ror	r22
    24e4:	b7 95       	ror	r27
    24e6:	f7 95       	ror	r31
    24e8:	9f 5f       	subi	r25, 0xFF	; 255
    24ea:	c9 f7       	brne	.-14     	; 0x24de <__divsf3_pse+0x78>
    24ec:	88 0f       	add	r24, r24
    24ee:	91 1d       	adc	r25, r1
    24f0:	96 95       	lsr	r25
    24f2:	87 95       	ror	r24
    24f4:	97 f9       	bld	r25, 7
    24f6:	08 95       	ret
    24f8:	e1 e0       	ldi	r30, 0x01	; 1
    24fa:	66 0f       	add	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	88 1f       	adc	r24, r24
    2500:	bb 1f       	adc	r27, r27
    2502:	62 17       	cp	r22, r18
    2504:	73 07       	cpc	r23, r19
    2506:	84 07       	cpc	r24, r20
    2508:	ba 07       	cpc	r27, r26
    250a:	20 f0       	brcs	.+8      	; 0x2514 <__divsf3_pse+0xae>
    250c:	62 1b       	sub	r22, r18
    250e:	73 0b       	sbc	r23, r19
    2510:	84 0b       	sbc	r24, r20
    2512:	ba 0b       	sbc	r27, r26
    2514:	ee 1f       	adc	r30, r30
    2516:	88 f7       	brcc	.-30     	; 0x24fa <__divsf3_pse+0x94>
    2518:	e0 95       	com	r30
    251a:	08 95       	ret

0000251c <__fixunssfsi>:
    251c:	0e 94 2a 13 	call	0x2654	; 0x2654 <__fp_splitA>
    2520:	88 f0       	brcs	.+34     	; 0x2544 <__fixunssfsi+0x28>
    2522:	9f 57       	subi	r25, 0x7F	; 127
    2524:	98 f0       	brcs	.+38     	; 0x254c <__fixunssfsi+0x30>
    2526:	b9 2f       	mov	r27, r25
    2528:	99 27       	eor	r25, r25
    252a:	b7 51       	subi	r27, 0x17	; 23
    252c:	b0 f0       	brcs	.+44     	; 0x255a <__fixunssfsi+0x3e>
    252e:	e1 f0       	breq	.+56     	; 0x2568 <__fixunssfsi+0x4c>
    2530:	66 0f       	add	r22, r22
    2532:	77 1f       	adc	r23, r23
    2534:	88 1f       	adc	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	1a f0       	brmi	.+6      	; 0x2540 <__fixunssfsi+0x24>
    253a:	ba 95       	dec	r27
    253c:	c9 f7       	brne	.-14     	; 0x2530 <__fixunssfsi+0x14>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <__fixunssfsi+0x4c>
    2540:	b1 30       	cpi	r27, 0x01	; 1
    2542:	91 f0       	breq	.+36     	; 0x2568 <__fixunssfsi+0x4c>
    2544:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_zero>
    2548:	b1 e0       	ldi	r27, 0x01	; 1
    254a:	08 95       	ret
    254c:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__fp_zero>
    2550:	67 2f       	mov	r22, r23
    2552:	78 2f       	mov	r23, r24
    2554:	88 27       	eor	r24, r24
    2556:	b8 5f       	subi	r27, 0xF8	; 248
    2558:	39 f0       	breq	.+14     	; 0x2568 <__fixunssfsi+0x4c>
    255a:	b9 3f       	cpi	r27, 0xF9	; 249
    255c:	cc f3       	brlt	.-14     	; 0x2550 <__fixunssfsi+0x34>
    255e:	86 95       	lsr	r24
    2560:	77 95       	ror	r23
    2562:	67 95       	ror	r22
    2564:	b3 95       	inc	r27
    2566:	d9 f7       	brne	.-10     	; 0x255e <__fixunssfsi+0x42>
    2568:	3e f4       	brtc	.+14     	; 0x2578 <__fixunssfsi+0x5c>
    256a:	90 95       	com	r25
    256c:	80 95       	com	r24
    256e:	70 95       	com	r23
    2570:	61 95       	neg	r22
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	8f 4f       	sbci	r24, 0xFF	; 255
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	08 95       	ret

0000257a <__floatunsisf>:
    257a:	e8 94       	clt
    257c:	09 c0       	rjmp	.+18     	; 0x2590 <__floatsisf+0x12>

0000257e <__floatsisf>:
    257e:	97 fb       	bst	r25, 7
    2580:	3e f4       	brtc	.+14     	; 0x2590 <__floatsisf+0x12>
    2582:	90 95       	com	r25
    2584:	80 95       	com	r24
    2586:	70 95       	com	r23
    2588:	61 95       	neg	r22
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	8f 4f       	sbci	r24, 0xFF	; 255
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	99 23       	and	r25, r25
    2592:	a9 f0       	breq	.+42     	; 0x25be <__floatsisf+0x40>
    2594:	f9 2f       	mov	r31, r25
    2596:	96 e9       	ldi	r25, 0x96	; 150
    2598:	bb 27       	eor	r27, r27
    259a:	93 95       	inc	r25
    259c:	f6 95       	lsr	r31
    259e:	87 95       	ror	r24
    25a0:	77 95       	ror	r23
    25a2:	67 95       	ror	r22
    25a4:	b7 95       	ror	r27
    25a6:	f1 11       	cpse	r31, r1
    25a8:	f8 cf       	rjmp	.-16     	; 0x259a <__floatsisf+0x1c>
    25aa:	fa f4       	brpl	.+62     	; 0x25ea <__floatsisf+0x6c>
    25ac:	bb 0f       	add	r27, r27
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <__floatsisf+0x36>
    25b0:	60 ff       	sbrs	r22, 0
    25b2:	1b c0       	rjmp	.+54     	; 0x25ea <__floatsisf+0x6c>
    25b4:	6f 5f       	subi	r22, 0xFF	; 255
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	16 c0       	rjmp	.+44     	; 0x25ea <__floatsisf+0x6c>
    25be:	88 23       	and	r24, r24
    25c0:	11 f0       	breq	.+4      	; 0x25c6 <__floatsisf+0x48>
    25c2:	96 e9       	ldi	r25, 0x96	; 150
    25c4:	11 c0       	rjmp	.+34     	; 0x25e8 <__floatsisf+0x6a>
    25c6:	77 23       	and	r23, r23
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <__floatsisf+0x54>
    25ca:	9e e8       	ldi	r25, 0x8E	; 142
    25cc:	87 2f       	mov	r24, r23
    25ce:	76 2f       	mov	r23, r22
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <__floatsisf+0x5e>
    25d2:	66 23       	and	r22, r22
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <__floatsisf+0x74>
    25d6:	96 e8       	ldi	r25, 0x86	; 134
    25d8:	86 2f       	mov	r24, r22
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	2a f0       	brmi	.+10     	; 0x25ea <__floatsisf+0x6c>
    25e0:	9a 95       	dec	r25
    25e2:	66 0f       	add	r22, r22
    25e4:	77 1f       	adc	r23, r23
    25e6:	88 1f       	adc	r24, r24
    25e8:	da f7       	brpl	.-10     	; 0x25e0 <__floatsisf+0x62>
    25ea:	88 0f       	add	r24, r24
    25ec:	96 95       	lsr	r25
    25ee:	87 95       	ror	r24
    25f0:	97 f9       	bld	r25, 7
    25f2:	08 95       	ret

000025f4 <__fp_inf>:
    25f4:	97 f9       	bld	r25, 7
    25f6:	9f 67       	ori	r25, 0x7F	; 127
    25f8:	80 e8       	ldi	r24, 0x80	; 128
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	08 95       	ret

00002600 <__fp_nan>:
    2600:	9f ef       	ldi	r25, 0xFF	; 255
    2602:	80 ec       	ldi	r24, 0xC0	; 192
    2604:	08 95       	ret

00002606 <__fp_pscA>:
    2606:	00 24       	eor	r0, r0
    2608:	0a 94       	dec	r0
    260a:	16 16       	cp	r1, r22
    260c:	17 06       	cpc	r1, r23
    260e:	18 06       	cpc	r1, r24
    2610:	09 06       	cpc	r0, r25
    2612:	08 95       	ret

00002614 <__fp_pscB>:
    2614:	00 24       	eor	r0, r0
    2616:	0a 94       	dec	r0
    2618:	12 16       	cp	r1, r18
    261a:	13 06       	cpc	r1, r19
    261c:	14 06       	cpc	r1, r20
    261e:	05 06       	cpc	r0, r21
    2620:	08 95       	ret

00002622 <__fp_round>:
    2622:	09 2e       	mov	r0, r25
    2624:	03 94       	inc	r0
    2626:	00 0c       	add	r0, r0
    2628:	11 f4       	brne	.+4      	; 0x262e <__fp_round+0xc>
    262a:	88 23       	and	r24, r24
    262c:	52 f0       	brmi	.+20     	; 0x2642 <__fp_round+0x20>
    262e:	bb 0f       	add	r27, r27
    2630:	40 f4       	brcc	.+16     	; 0x2642 <__fp_round+0x20>
    2632:	bf 2b       	or	r27, r31
    2634:	11 f4       	brne	.+4      	; 0x263a <__fp_round+0x18>
    2636:	60 ff       	sbrs	r22, 0
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <__fp_round+0x20>
    263a:	6f 5f       	subi	r22, 0xFF	; 255
    263c:	7f 4f       	sbci	r23, 0xFF	; 255
    263e:	8f 4f       	sbci	r24, 0xFF	; 255
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	08 95       	ret

00002644 <__fp_split3>:
    2644:	57 fd       	sbrc	r21, 7
    2646:	90 58       	subi	r25, 0x80	; 128
    2648:	44 0f       	add	r20, r20
    264a:	55 1f       	adc	r21, r21
    264c:	59 f0       	breq	.+22     	; 0x2664 <__fp_splitA+0x10>
    264e:	5f 3f       	cpi	r21, 0xFF	; 255
    2650:	71 f0       	breq	.+28     	; 0x266e <__fp_splitA+0x1a>
    2652:	47 95       	ror	r20

00002654 <__fp_splitA>:
    2654:	88 0f       	add	r24, r24
    2656:	97 fb       	bst	r25, 7
    2658:	99 1f       	adc	r25, r25
    265a:	61 f0       	breq	.+24     	; 0x2674 <__fp_splitA+0x20>
    265c:	9f 3f       	cpi	r25, 0xFF	; 255
    265e:	79 f0       	breq	.+30     	; 0x267e <__fp_splitA+0x2a>
    2660:	87 95       	ror	r24
    2662:	08 95       	ret
    2664:	12 16       	cp	r1, r18
    2666:	13 06       	cpc	r1, r19
    2668:	14 06       	cpc	r1, r20
    266a:	55 1f       	adc	r21, r21
    266c:	f2 cf       	rjmp	.-28     	; 0x2652 <__fp_split3+0xe>
    266e:	46 95       	lsr	r20
    2670:	f1 df       	rcall	.-30     	; 0x2654 <__fp_splitA>
    2672:	08 c0       	rjmp	.+16     	; 0x2684 <__fp_splitA+0x30>
    2674:	16 16       	cp	r1, r22
    2676:	17 06       	cpc	r1, r23
    2678:	18 06       	cpc	r1, r24
    267a:	99 1f       	adc	r25, r25
    267c:	f1 cf       	rjmp	.-30     	; 0x2660 <__fp_splitA+0xc>
    267e:	86 95       	lsr	r24
    2680:	71 05       	cpc	r23, r1
    2682:	61 05       	cpc	r22, r1
    2684:	08 94       	sec
    2686:	08 95       	ret

00002688 <__fp_zero>:
    2688:	e8 94       	clt

0000268a <__fp_szero>:
    268a:	bb 27       	eor	r27, r27
    268c:	66 27       	eor	r22, r22
    268e:	77 27       	eor	r23, r23
    2690:	cb 01       	movw	r24, r22
    2692:	97 f9       	bld	r25, 7
    2694:	08 95       	ret

00002696 <__mulsf3>:
    2696:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__mulsf3x>
    269a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__fp_round>
    269e:	0e 94 03 13 	call	0x2606	; 0x2606 <__fp_pscA>
    26a2:	38 f0       	brcs	.+14     	; 0x26b2 <__mulsf3+0x1c>
    26a4:	0e 94 0a 13 	call	0x2614	; 0x2614 <__fp_pscB>
    26a8:	20 f0       	brcs	.+8      	; 0x26b2 <__mulsf3+0x1c>
    26aa:	95 23       	and	r25, r21
    26ac:	11 f0       	breq	.+4      	; 0x26b2 <__mulsf3+0x1c>
    26ae:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_inf>
    26b2:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__fp_nan>
    26b6:	11 24       	eor	r1, r1
    26b8:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_szero>

000026bc <__mulsf3x>:
    26bc:	0e 94 22 13 	call	0x2644	; 0x2644 <__fp_split3>
    26c0:	70 f3       	brcs	.-36     	; 0x269e <__mulsf3+0x8>

000026c2 <__mulsf3_pse>:
    26c2:	95 9f       	mul	r25, r21
    26c4:	c1 f3       	breq	.-16     	; 0x26b6 <__mulsf3+0x20>
    26c6:	95 0f       	add	r25, r21
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	55 1f       	adc	r21, r21
    26cc:	62 9f       	mul	r22, r18
    26ce:	f0 01       	movw	r30, r0
    26d0:	72 9f       	mul	r23, r18
    26d2:	bb 27       	eor	r27, r27
    26d4:	f0 0d       	add	r31, r0
    26d6:	b1 1d       	adc	r27, r1
    26d8:	63 9f       	mul	r22, r19
    26da:	aa 27       	eor	r26, r26
    26dc:	f0 0d       	add	r31, r0
    26de:	b1 1d       	adc	r27, r1
    26e0:	aa 1f       	adc	r26, r26
    26e2:	64 9f       	mul	r22, r20
    26e4:	66 27       	eor	r22, r22
    26e6:	b0 0d       	add	r27, r0
    26e8:	a1 1d       	adc	r26, r1
    26ea:	66 1f       	adc	r22, r22
    26ec:	82 9f       	mul	r24, r18
    26ee:	22 27       	eor	r18, r18
    26f0:	b0 0d       	add	r27, r0
    26f2:	a1 1d       	adc	r26, r1
    26f4:	62 1f       	adc	r22, r18
    26f6:	73 9f       	mul	r23, r19
    26f8:	b0 0d       	add	r27, r0
    26fa:	a1 1d       	adc	r26, r1
    26fc:	62 1f       	adc	r22, r18
    26fe:	83 9f       	mul	r24, r19
    2700:	a0 0d       	add	r26, r0
    2702:	61 1d       	adc	r22, r1
    2704:	22 1f       	adc	r18, r18
    2706:	74 9f       	mul	r23, r20
    2708:	33 27       	eor	r19, r19
    270a:	a0 0d       	add	r26, r0
    270c:	61 1d       	adc	r22, r1
    270e:	23 1f       	adc	r18, r19
    2710:	84 9f       	mul	r24, r20
    2712:	60 0d       	add	r22, r0
    2714:	21 1d       	adc	r18, r1
    2716:	82 2f       	mov	r24, r18
    2718:	76 2f       	mov	r23, r22
    271a:	6a 2f       	mov	r22, r26
    271c:	11 24       	eor	r1, r1
    271e:	9f 57       	subi	r25, 0x7F	; 127
    2720:	50 40       	sbci	r21, 0x00	; 0
    2722:	9a f0       	brmi	.+38     	; 0x274a <__mulsf3_pse+0x88>
    2724:	f1 f0       	breq	.+60     	; 0x2762 <__mulsf3_pse+0xa0>
    2726:	88 23       	and	r24, r24
    2728:	4a f0       	brmi	.+18     	; 0x273c <__mulsf3_pse+0x7a>
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	bb 1f       	adc	r27, r27
    2730:	66 1f       	adc	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	88 1f       	adc	r24, r24
    2736:	91 50       	subi	r25, 0x01	; 1
    2738:	50 40       	sbci	r21, 0x00	; 0
    273a:	a9 f7       	brne	.-22     	; 0x2726 <__mulsf3_pse+0x64>
    273c:	9e 3f       	cpi	r25, 0xFE	; 254
    273e:	51 05       	cpc	r21, r1
    2740:	80 f0       	brcs	.+32     	; 0x2762 <__mulsf3_pse+0xa0>
    2742:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__fp_inf>
    2746:	0c 94 45 13 	jmp	0x268a	; 0x268a <__fp_szero>
    274a:	5f 3f       	cpi	r21, 0xFF	; 255
    274c:	e4 f3       	brlt	.-8      	; 0x2746 <__mulsf3_pse+0x84>
    274e:	98 3e       	cpi	r25, 0xE8	; 232
    2750:	d4 f3       	brlt	.-12     	; 0x2746 <__mulsf3_pse+0x84>
    2752:	86 95       	lsr	r24
    2754:	77 95       	ror	r23
    2756:	67 95       	ror	r22
    2758:	b7 95       	ror	r27
    275a:	f7 95       	ror	r31
    275c:	e7 95       	ror	r30
    275e:	9f 5f       	subi	r25, 0xFF	; 255
    2760:	c1 f7       	brne	.-16     	; 0x2752 <__mulsf3_pse+0x90>
    2762:	fe 2b       	or	r31, r30
    2764:	88 0f       	add	r24, r24
    2766:	91 1d       	adc	r25, r1
    2768:	96 95       	lsr	r25
    276a:	87 95       	ror	r24
    276c:	97 f9       	bld	r25, 7
    276e:	08 95       	ret

00002770 <__tablejump2__>:
    2770:	ee 0f       	add	r30, r30
    2772:	ff 1f       	adc	r31, r31
    2774:	05 90       	lpm	r0, Z+
    2776:	f4 91       	lpm	r31, Z
    2778:	e0 2d       	mov	r30, r0
    277a:	09 94       	ijmp

0000277c <__umulhisi3>:
    277c:	a2 9f       	mul	r26, r18
    277e:	b0 01       	movw	r22, r0
    2780:	b3 9f       	mul	r27, r19
    2782:	c0 01       	movw	r24, r0
    2784:	a3 9f       	mul	r26, r19
    2786:	70 0d       	add	r23, r0
    2788:	81 1d       	adc	r24, r1
    278a:	11 24       	eor	r1, r1
    278c:	91 1d       	adc	r25, r1
    278e:	b2 9f       	mul	r27, r18
    2790:	70 0d       	add	r23, r0
    2792:	81 1d       	adc	r24, r1
    2794:	11 24       	eor	r1, r1
    2796:	91 1d       	adc	r25, r1
    2798:	08 95       	ret

0000279a <__muluhisi3>:
    279a:	0e 94 be 13 	call	0x277c	; 0x277c <__umulhisi3>
    279e:	a5 9f       	mul	r26, r21
    27a0:	90 0d       	add	r25, r0
    27a2:	b4 9f       	mul	r27, r20
    27a4:	90 0d       	add	r25, r0
    27a6:	a4 9f       	mul	r26, r20
    27a8:	80 0d       	add	r24, r0
    27aa:	91 1d       	adc	r25, r1
    27ac:	11 24       	eor	r1, r1
    27ae:	08 95       	ret

000027b0 <_exit>:
    27b0:	f8 94       	cli

000027b2 <__stop_program>:
    27b2:	ff cf       	rjmp	.-2      	; 0x27b2 <__stop_program>
