
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000279c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00002810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c39  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001206  00000000  00000000  00004701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000303c  00000000  00000000  00005907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00008944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000abf4  00000000  00000000  00008ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bc  00000000  00000000  00013ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00014484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000493a  00000000  00000000  00014604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      7c:	97 02       	muls	r25, r23
      7e:	8d 03       	fmulsu	r16, r21
      80:	77 04       	cpc	r7, r7
      82:	45 05       	cpc	r20, r5
      84:	c8 05       	cpc	r28, r8
      86:	58 06       	cpc	r5, r24
      88:	f2 06       	cpc	r15, r18
      8a:	18 08       	sbc	r1, r8
      8c:	4b 09       	sbc	r20, r11
      8e:	88 0a       	sbc	r8, r24
      90:	3e 0b       	sbc	r19, r30
      92:	c1 0f       	add	r28, r17
      94:	2b 11       	cpse	r18, r11
      96:	29 10       	cpse	r2, r9
      98:	7e 10       	cpse	r7, r14
      9a:	c5 0f       	add	r28, r21
      9c:	30 11       	cpse	r19, r0
      9e:	2b 11       	cpse	r18, r11

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_clear_bss>:
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a2 31       	cpi	r26, 0x12	; 18
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <main>
      c0:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <adc_init>:
	ADCSRA |= (1<<ADSC);		// start single conversion
	while(ADCSRA & (1<<ADSC));	// wait till done
	
	temp1 = ADC * (5.0/1024)*1000.0/25;	
	return temp1;
}
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	8b e7       	ldi	r24, 0x7B	; 123
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	2b e7       	ldi	r18, 0x7B	; 123
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	f9 01       	movw	r30, r18
      da:	20 81       	ld	r18, Z
      dc:	20 62       	ori	r18, 0x20	; 32
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	8c e7       	ldi	r24, 0x7C	; 124
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	20 e4       	ldi	r18, 0x40	; 64
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
      ec:	8a e7       	ldi	r24, 0x7A	; 122
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2a e7       	ldi	r18, 0x7A	; 122
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	27 68       	ori	r18, 0x87	; 135
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	00 00       	nop
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <adc_ad12v>:

uint16_t adc_ad12v (void)	// adc channel 5
{
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX2)|(1 << MUX0);			// select channel
     10e:	8c e7       	ldi	r24, 0x7C	; 124
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	25 e4       	ldi	r18, 0x45	; 69
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     118:	8a e7       	ldi	r24, 0x7A	; 122
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	2a e7       	ldi	r18, 0x7A	; 122
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	20 64       	ori	r18, 0x40	; 64
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     12a:	00 00       	nop
     12c:	8a e7       	ldi	r24, 0x7A	; 122
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	80 81       	ld	r24, Z
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	80 74       	andi	r24, 0x40	; 64
     13a:	99 27       	eor	r25, r25
     13c:	89 2b       	or	r24, r25
     13e:	b1 f7       	brne	.-20     	; 0x12c <adc_ad12v+0x26>
	return ADC;
     140:	88 e7       	ldi	r24, 0x78	; 120
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	91 81       	ldd	r25, Z+1	; 0x01
}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <adc_reference>:


uint16_t adc_reference (void)	// adc channel 3
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX1)|(1 << MUX0);			// select channel
     158:	8c e7       	ldi	r24, 0x7C	; 124
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	23 e4       	ldi	r18, 0x43	; 67
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     162:	8a e7       	ldi	r24, 0x7A	; 122
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	2a e7       	ldi	r18, 0x7A	; 122
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	20 64       	ori	r18, 0x40	; 64
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     174:	00 00       	nop
     176:	8a e7       	ldi	r24, 0x7A	; 122
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	fc 01       	movw	r30, r24
     17c:	80 81       	ld	r24, Z
     17e:	88 2f       	mov	r24, r24
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	80 74       	andi	r24, 0x40	; 64
     184:	99 27       	eor	r25, r25
     186:	89 2b       	or	r24, r25
     188:	b1 f7       	brne	.-20     	; 0x176 <adc_reference+0x26>
	return ADC;
     18a:	88 e7       	ldi	r24, 0x78	; 120
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	91 81       	ldd	r25, Z+1	; 0x01
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <adc_ua>:

uint16_t adc_ua (void)	// adc channel 8
{
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3);			// select channel
     1a2:	8c e7       	ldi	r24, 0x7C	; 124
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	28 e4       	ldi	r18, 0x48	; 72
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     1ac:	8a e7       	ldi	r24, 0x7A	; 122
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2a e7       	ldi	r18, 0x7A	; 122
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 64       	ori	r18, 0x40	; 64
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     1be:	00 00       	nop
     1c0:	8a e7       	ldi	r24, 0x7A	; 122
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	80 81       	ld	r24, Z
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	80 74       	andi	r24, 0x40	; 64
     1ce:	99 27       	eor	r25, r25
     1d0:	89 2b       	or	r24, r25
     1d2:	b1 f7       	brne	.-20     	; 0x1c0 <adc_ua+0x26>
	return ADC;
     1d4:	88 e7       	ldi	r24, 0x78	; 120
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <adc_ur>:

uint16_t adc_ur (void)	// adc channel 9
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS0)|(1 << MUX3)|(1 << MUX0);			// select channel
     1ec:	8c e7       	ldi	r24, 0x7C	; 124
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	29 e4       	ldi	r18, 0x49	; 73
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     1f6:	8a e7       	ldi	r24, 0x7A	; 122
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2a e7       	ldi	r18, 0x7A	; 122
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	20 81       	ld	r18, Z
     202:	20 64       	ori	r18, 0x40	; 64
     204:	fc 01       	movw	r30, r24
     206:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     208:	00 00       	nop
     20a:	8a e7       	ldi	r24, 0x7A	; 122
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	88 2f       	mov	r24, r24
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	80 74       	andi	r24, 0x40	; 64
     218:	99 27       	eor	r25, r25
     21a:	89 2b       	or	r24, r25
     21c:	b1 f7       	brne	.-20     	; 0x20a <adc_ur+0x26>
	return ADC;
     21e:	88 e7       	ldi	r24, 0x78	; 120
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	91 81       	ldd	r25, Z+1	; 0x01
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <can_clear_all_mob+0x6>
     234:	1f 92       	push	r1
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	19 82       	std	Y+1, r1	; 0x01
     23c:	1d c0       	rjmp	.+58     	; 0x278 <can_clear_all_mob+0x4a>
     23e:	8d ee       	ldi	r24, 0xED	; 237
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	29 81       	ldd	r18, Y+1	; 0x01
     244:	22 95       	swap	r18
     246:	20 7f       	andi	r18, 0xF0	; 240
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
     24c:	8e ee       	ldi	r24, 0xEE	; 238
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9b 83       	std	Y+3, r25	; 0x03
     252:	8a 83       	std	Y+2, r24	; 0x02
     254:	09 c0       	rjmp	.+18     	; 0x268 <can_clear_all_mob+0x3a>
     256:	8a 81       	ldd	r24, Y+2	; 0x02
     258:	9b 81       	ldd	r25, Y+3	; 0x03
     25a:	fc 01       	movw	r30, r24
     25c:	10 82       	st	Z, r1
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	9b 83       	std	Y+3, r25	; 0x03
     266:	8a 83       	std	Y+2, r24	; 0x02
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	9b 81       	ldd	r25, Y+3	; 0x03
     26c:	88 3f       	cpi	r24, 0xF8	; 248
     26e:	91 05       	cpc	r25, r1
     270:	90 f3       	brcs	.-28     	; 0x256 <can_clear_all_mob+0x28>
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	86 30       	cpi	r24, 0x06	; 6
     27c:	00 f3       	brcs	.-64     	; 0x23e <can_clear_all_mob+0x10>
     27e:	00 00       	nop
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <can_get_mob_free>:
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <can_get_mob_free+0x6>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	8d ee       	ldi	r24, 0xED	; 237
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	fc 01       	movw	r30, r24
     29c:	80 81       	ld	r24, Z
     29e:	8a 83       	std	Y+2, r24	; 0x02
     2a0:	19 82       	std	Y+1, r1	; 0x01
     2a2:	1b c0       	rjmp	.+54     	; 0x2da <can_get_mob_free+0x4e>
     2a4:	8d ee       	ldi	r24, 0xED	; 237
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	29 81       	ldd	r18, Y+1	; 0x01
     2aa:	22 95       	swap	r18
     2ac:	20 7f       	andi	r18, 0xF0	; 240
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
     2b2:	8f ee       	ldi	r24, 0xEF	; 239
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	80 7c       	andi	r24, 0xC0	; 192
     2c0:	99 27       	eor	r25, r25
     2c2:	89 2b       	or	r24, r25
     2c4:	39 f4       	brne	.+14     	; 0x2d4 <can_get_mob_free+0x48>
     2c6:	8d ee       	ldi	r24, 0xED	; 237
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	0c c0       	rjmp	.+24     	; 0x2ec <can_get_mob_free+0x60>
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	8f 5f       	subi	r24, 0xFF	; 255
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	86 30       	cpi	r24, 0x06	; 6
     2de:	10 f3       	brcs	.-60     	; 0x2a4 <can_get_mob_free+0x18>
     2e0:	8d ee       	ldi	r24, 0xED	; 237
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2a 81       	ldd	r18, Y+2	; 0x02
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <can_get_mob_status>:
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <can_get_mob_status+0x6>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	8f ee       	ldi	r24, 0xEF	; 239
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	80 7c       	andi	r24, 0xC0	; 192
     30e:	99 27       	eor	r25, r25
     310:	89 2b       	or	r24, r25
     312:	11 f4       	brne	.+4      	; 0x318 <can_get_mob_status+0x22>
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	1c c0       	rjmp	.+56     	; 0x350 <can_get_mob_status+0x5a>
     318:	8e ee       	ldi	r24, 0xEE	; 238
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	80 7e       	andi	r24, 0xE0	; 224
     326:	8a 83       	std	Y+2, r24	; 0x02
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	80 32       	cpi	r24, 0x20	; 32
     32c:	31 f0       	breq	.+12     	; 0x33a <can_get_mob_status+0x44>
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	80 34       	cpi	r24, 0x40	; 64
     332:	19 f0       	breq	.+6      	; 0x33a <can_get_mob_status+0x44>
     334:	8a 81       	ldd	r24, Y+2	; 0x02
     336:	80 3a       	cpi	r24, 0xA0	; 160
     338:	11 f4       	brne	.+4      	; 0x33e <can_get_mob_status+0x48>
     33a:	8a 81       	ldd	r24, Y+2	; 0x02
     33c:	09 c0       	rjmp	.+18     	; 0x350 <can_get_mob_status+0x5a>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	8f 71       	andi	r24, 0x1F	; 31
     342:	8a 83       	std	Y+2, r24	; 0x02
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	88 23       	and	r24, r24
     348:	11 f0       	breq	.+4      	; 0x34e <can_get_mob_status+0x58>
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	01 c0       	rjmp	.+2      	; 0x350 <can_get_mob_status+0x5a>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <can_get_data>:
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	00 d0       	rcall	.+0      	; 0x360 <can_get_data+0x6>
     360:	1f 92       	push	r1
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	9b 83       	std	Y+3, r25	; 0x03
     368:	8a 83       	std	Y+2, r24	; 0x02
     36a:	19 82       	std	Y+1, r1	; 0x01
     36c:	10 c0       	rjmp	.+32     	; 0x38e <can_get_data+0x34>
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	88 2f       	mov	r24, r24
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	2a 81       	ldd	r18, Y+2	; 0x02
     376:	3b 81       	ldd	r19, Y+3	; 0x03
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
     37c:	2a ef       	ldi	r18, 0xFA	; 250
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f9 01       	movw	r30, r18
     382:	20 81       	ld	r18, Z
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	28 2f       	mov	r18, r24
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	8f ee       	ldi	r24, 0xEF	; 239
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	8f 70       	andi	r24, 0x0F	; 15
     3a2:	99 27       	eor	r25, r25
     3a4:	28 17       	cp	r18, r24
     3a6:	39 07       	cpc	r19, r25
     3a8:	14 f3       	brlt	.-60     	; 0x36e <can_get_data+0x14>
     3aa:	00 00       	nop
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     3c4:	88 ed       	ldi	r24, 0xD8	; 216
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
    Can_conf_bt();
     3ce:	82 ee       	ldi	r24, 0xE2	; 226
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	26 e0       	ldi	r18, 0x06	; 6
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
     3d8:	83 ee       	ldi	r24, 0xE3	; 227
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	24 e0       	ldi	r18, 0x04	; 4
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
     3e2:	84 ee       	ldi	r24, 0xE4	; 228
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	23 e1       	ldi	r18, 0x13	; 19
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
    return 1;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	1f 92       	push	r1
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <can_fixed_baudrate>
     408:	88 23       	and	r24, r24
     40a:	11 f4       	brne	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0c c0       	rjmp	.+24     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     410:	0e 94 17 01 	call	0x22e	; 0x22e <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     414:	88 ed       	ldi	r24, 0xD8	; 216
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	28 ed       	ldi	r18, 0xD8	; 216
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	20 81       	ld	r18, Z
     420:	22 60       	ori	r18, 0x02	; 2
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
    return (1);
     426:	81 e0       	ldi	r24, 0x01	; 1
}
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	2a 97       	sbiw	r28, 0x0a	; 10
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	9a 87       	std	Y+10, r25	; 0x0a
     446:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     448:	89 85       	ldd	r24, Y+9	; 0x09
     44a:	9a 85       	ldd	r25, Y+10	; 0x0a
     44c:	fc 01       	movw	r30, r24
     44e:	81 81       	ldd	r24, Z+1	; 0x01
     450:	8c 30       	cpi	r24, 0x0C	; 12
     452:	39 f5       	brne	.+78     	; 0x4a2 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     454:	89 85       	ldd	r24, Y+9	; 0x09
     456:	9a 85       	ldd	r25, Y+10	; 0x0a
     458:	fc 01       	movw	r30, r24
     45a:	81 85       	ldd	r24, Z+9	; 0x09
     45c:	80 36       	cpi	r24, 0x60	; 96
     45e:	d9 f4       	brne	.+54     	; 0x496 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     460:	8d ee       	ldi	r24, 0xED	; 237
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	29 85       	ldd	r18, Y+9	; 0x09
     466:	3a 85       	ldd	r19, Y+10	; 0x0a
     468:	f9 01       	movw	r30, r18
     46a:	20 81       	ld	r18, Z
     46c:	22 95       	swap	r18
     46e:	20 7f       	andi	r18, 0xF0	; 240
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
      Can_mob_abort();
     474:	8f ee       	ldi	r24, 0xEF	; 239
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	2f ee       	ldi	r18, 0xEF	; 239
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	2f 73       	andi	r18, 0x3F	; 63
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     486:	8e ee       	ldi	r24, 0xEE	; 238
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	fc 01       	movw	r30, r24
     48c:	10 82       	st	Z, r1
      cmd->handle = 0;
     48e:	89 85       	ldd	r24, Y+9	; 0x09
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	fc 01       	movw	r30, r24
     494:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     496:	89 85       	ldd	r24, Y+9	; 0x09
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	fc 01       	movw	r30, r24
     49c:	11 86       	std	Z+9, r1	; 0x09
     49e:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__stack+0x1049>
  }
  else
  {
    mob_handle = can_get_mob_free();
     4a2:	0e 94 46 01 	call	0x28c	; 0x28c <can_get_mob_free>
     4a6:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     4a8:	8c 81       	ldd	r24, Y+4	; 0x04
     4aa:	8f 3f       	cpi	r24, 0xFF	; 255
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <can_cmd+0x82>
     4ae:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__stack+0x103b>
    {
      cmd->status = MOB_PENDING; 
     4b2:	89 85       	ldd	r24, Y+9	; 0x09
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	20 e6       	ldi	r18, 0x60	; 96
     4b8:	fc 01       	movw	r30, r24
     4ba:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     4bc:	89 85       	ldd	r24, Y+9	; 0x09
     4be:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c0:	2c 81       	ldd	r18, Y+4	; 0x04
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     4c6:	8d ee       	ldi	r24, 0xED	; 237
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	2c 81       	ldd	r18, Y+4	; 0x04
     4cc:	22 95       	swap	r18
     4ce:	20 7f       	andi	r18, 0xF0	; 240
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
      Can_clear_mob();
     4d4:	8e ee       	ldi	r24, 0xEE	; 238
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	9b 83       	std	Y+3, r25	; 0x03
     4da:	8a 83       	std	Y+2, r24	; 0x02
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <can_cmd+0xc0>
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	9b 81       	ldd	r25, Y+3	; 0x03
     4e2:	fc 01       	movw	r30, r24
     4e4:	10 82       	st	Z, r1
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	9b 81       	ldd	r25, Y+3	; 0x03
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	9b 83       	std	Y+3, r25	; 0x03
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	9b 81       	ldd	r25, Y+3	; 0x03
     4f4:	88 3f       	cpi	r24, 0xF8	; 248
     4f6:	91 05       	cpc	r25, r1
     4f8:	90 f3       	brcs	.-28     	; 0x4de <can_cmd+0xae>
          
      switch (cmd->cmd)
     4fa:	89 85       	ldd	r24, Y+9	; 0x09
     4fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fe:	fc 01       	movw	r30, r24
     500:	81 81       	ldd	r24, Z+1	; 0x01
     502:	88 2f       	mov	r24, r24
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	09 2e       	mov	r0, r25
     508:	00 0c       	add	r0, r0
     50a:	aa 0b       	sbc	r26, r26
     50c:	bb 0b       	sbc	r27, r27
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	2a e0       	ldi	r18, 0x0A	; 10
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	84 1b       	sub	r24, r20
     518:	95 0b       	sbc	r25, r21
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	10 f4       	brcc	.+4      	; 0x524 <can_cmd+0xf4>
     520:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__stack+0x102f>
     524:	82 5c       	subi	r24, 0xC2	; 194
     526:	9f 4f       	sbci	r25, 0xFF	; 255
     528:	fc 01       	movw	r30, r24
     52a:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     52e:	89 85       	ldd	r24, Y+9	; 0x09
     530:	9a 85       	ldd	r25, Y+10	; 0x0a
     532:	fc 01       	movw	r30, r24
     534:	83 85       	ldd	r24, Z+11	; 0x0b
     536:	88 23       	and	r24, r24
     538:	09 f4       	brne	.+2      	; 0x53c <can_cmd+0x10c>
     53a:	69 c0       	rjmp	.+210    	; 0x60e <can_cmd+0x1de>
     53c:	83 ef       	ldi	r24, 0xF3	; 243
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	29 85       	ldd	r18, Y+9	; 0x09
     542:	3a 85       	ldd	r19, Y+10	; 0x0a
     544:	2e 5f       	subi	r18, 0xFE	; 254
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	2d 5f       	subi	r18, 0xFD	; 253
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	42 2f       	mov	r20, r18
     552:	44 0f       	add	r20, r20
     554:	44 0f       	add	r20, r20
     556:	44 0f       	add	r20, r20
     558:	29 85       	ldd	r18, Y+9	; 0x09
     55a:	3a 85       	ldd	r19, Y+10	; 0x0a
     55c:	2e 5f       	subi	r18, 0xFE	; 254
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	2e 5f       	subi	r18, 0xFE	; 254
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	f9 01       	movw	r30, r18
     566:	20 81       	ld	r18, Z
     568:	22 95       	swap	r18
     56a:	26 95       	lsr	r18
     56c:	27 70       	andi	r18, 0x07	; 7
     56e:	24 0f       	add	r18, r20
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
     574:	82 ef       	ldi	r24, 0xF2	; 242
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	29 85       	ldd	r18, Y+9	; 0x09
     57a:	3a 85       	ldd	r19, Y+10	; 0x0a
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	2e 5f       	subi	r18, 0xFE	; 254
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	42 2f       	mov	r20, r18
     58a:	44 0f       	add	r20, r20
     58c:	44 0f       	add	r20, r20
     58e:	44 0f       	add	r20, r20
     590:	29 85       	ldd	r18, Y+9	; 0x09
     592:	3a 85       	ldd	r19, Y+10	; 0x0a
     594:	2e 5f       	subi	r18, 0xFE	; 254
     596:	3f 4f       	sbci	r19, 0xFF	; 255
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	f9 01       	movw	r30, r18
     59e:	20 81       	ld	r18, Z
     5a0:	22 95       	swap	r18
     5a2:	26 95       	lsr	r18
     5a4:	27 70       	andi	r18, 0x07	; 7
     5a6:	24 0f       	add	r18, r20
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
     5ac:	81 ef       	ldi	r24, 0xF1	; 241
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	29 85       	ldd	r18, Y+9	; 0x09
     5b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	42 2f       	mov	r20, r18
     5c2:	44 0f       	add	r20, r20
     5c4:	44 0f       	add	r20, r20
     5c6:	44 0f       	add	r20, r20
     5c8:	29 85       	ldd	r18, Y+9	; 0x09
     5ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     5cc:	2e 5f       	subi	r18, 0xFE	; 254
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	22 95       	swap	r18
     5d6:	26 95       	lsr	r18
     5d8:	27 70       	andi	r18, 0x07	; 7
     5da:	24 0f       	add	r18, r20
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
     5e0:	80 ef       	ldi	r24, 0xF0	; 240
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	29 85       	ldd	r18, Y+9	; 0x09
     5e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e8:	2e 5f       	subi	r18, 0xFE	; 254
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	22 0f       	add	r18, r18
     5f2:	22 0f       	add	r18, r18
     5f4:	22 0f       	add	r18, r18
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
     5fa:	8f ee       	ldi	r24, 0xEF	; 239
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2f ee       	ldi	r18, 0xEF	; 239
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f9 01       	movw	r30, r18
     604:	20 81       	ld	r18, Z
     606:	20 61       	ori	r18, 0x10	; 16
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
     60c:	30 c0       	rjmp	.+96     	; 0x66e <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     60e:	83 ef       	ldi	r24, 0xF3	; 243
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	29 85       	ldd	r18, Y+9	; 0x09
     614:	3a 85       	ldd	r19, Y+10	; 0x0a
     616:	2e 5f       	subi	r18, 0xFE	; 254
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	42 2f       	mov	r20, r18
     624:	42 95       	swap	r20
     626:	44 0f       	add	r20, r20
     628:	40 7e       	andi	r20, 0xE0	; 224
     62a:	29 85       	ldd	r18, Y+9	; 0x09
     62c:	3a 85       	ldd	r19, Y+10	; 0x0a
     62e:	2e 5f       	subi	r18, 0xFE	; 254
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	26 95       	lsr	r18
     638:	26 95       	lsr	r18
     63a:	26 95       	lsr	r18
     63c:	24 0f       	add	r18, r20
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
     642:	82 ef       	ldi	r24, 0xF2	; 242
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	29 85       	ldd	r18, Y+9	; 0x09
     648:	3a 85       	ldd	r19, Y+10	; 0x0a
     64a:	2e 5f       	subi	r18, 0xFE	; 254
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	22 95       	swap	r18
     654:	22 0f       	add	r18, r18
     656:	20 7e       	andi	r18, 0xE0	; 224
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
     65c:	8f ee       	ldi	r24, 0xEF	; 239
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2f ee       	ldi	r18, 0xEF	; 239
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	2f 7e       	andi	r18, 0xEF	; 239
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     66e:	19 82       	std	Y+1, r1	; 0x01
     670:	13 c0       	rjmp	.+38     	; 0x698 <can_cmd+0x268>
     672:	8a ef       	ldi	r24, 0xFA	; 250
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	29 85       	ldd	r18, Y+9	; 0x09
     678:	3a 85       	ldd	r19, Y+10	; 0x0a
     67a:	f9 01       	movw	r30, r18
     67c:	47 81       	ldd	r20, Z+7	; 0x07
     67e:	50 85       	ldd	r21, Z+8	; 0x08
     680:	29 81       	ldd	r18, Y+1	; 0x01
     682:	22 2f       	mov	r18, r18
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	24 0f       	add	r18, r20
     688:	35 1f       	adc	r19, r21
     68a:	f9 01       	movw	r30, r18
     68c:	20 81       	ld	r18, Z
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	8f 5f       	subi	r24, 0xFF	; 255
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	89 85       	ldd	r24, Y+9	; 0x09
     69a:	9a 85       	ldd	r25, Y+10	; 0x0a
     69c:	fc 01       	movw	r30, r24
     69e:	96 81       	ldd	r25, Z+6	; 0x06
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	89 17       	cp	r24, r25
     6a4:	30 f3       	brcs	.-52     	; 0x672 <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6aa:	fc 01       	movw	r30, r24
     6ac:	82 85       	ldd	r24, Z+10	; 0x0a
     6ae:	88 23       	and	r24, r24
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <can_cmd+0x296>
     6b2:	80 ef       	ldi	r24, 0xF0	; 240
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	20 ef       	ldi	r18, 0xF0	; 240
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	f9 01       	movw	r30, r18
     6bc:	20 81       	ld	r18, Z
     6be:	24 60       	ori	r18, 0x04	; 4
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     6c6:	80 ef       	ldi	r24, 0xF0	; 240
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	20 ef       	ldi	r18, 0xF0	; 240
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	f9 01       	movw	r30, r18
     6d0:	20 81       	ld	r18, Z
     6d2:	2b 7f       	andi	r18, 0xFB	; 251
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     6d8:	8f ee       	ldi	r24, 0xEF	; 239
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	2f ee       	ldi	r18, 0xEF	; 239
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	40 81       	ld	r20, Z
     6e4:	29 85       	ldd	r18, Y+9	; 0x09
     6e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e8:	f9 01       	movw	r30, r18
     6ea:	26 81       	ldd	r18, Z+6	; 0x06
     6ec:	24 2b       	or	r18, r20
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
          Can_config_tx();
     6f2:	8f ee       	ldi	r24, 0xEF	; 239
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2f ee       	ldi	r18, 0xEF	; 239
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	20 81       	ld	r18, Z
     6fe:	2f 73       	andi	r18, 0x3F	; 63
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
     704:	8f ee       	ldi	r24, 0xEF	; 239
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	2f ee       	ldi	r18, 0xEF	; 239
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	20 64       	ori	r18, 0x40	; 64
     712:	fc 01       	movw	r30, r24
     714:	20 83       	st	Z, r18
          break;
     716:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	9a 85       	ldd	r25, Y+10	; 0x0a
     71e:	fc 01       	movw	r30, r24
     720:	83 85       	ldd	r24, Z+11	; 0x0b
     722:	88 23       	and	r24, r24
     724:	09 f4       	brne	.+2      	; 0x728 <can_cmd+0x2f8>
     726:	69 c0       	rjmp	.+210    	; 0x7fa <can_cmd+0x3ca>
     728:	83 ef       	ldi	r24, 0xF3	; 243
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	29 85       	ldd	r18, Y+9	; 0x09
     72e:	3a 85       	ldd	r19, Y+10	; 0x0a
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	2d 5f       	subi	r18, 0xFD	; 253
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	f9 01       	movw	r30, r18
     73a:	20 81       	ld	r18, Z
     73c:	42 2f       	mov	r20, r18
     73e:	44 0f       	add	r20, r20
     740:	44 0f       	add	r20, r20
     742:	44 0f       	add	r20, r20
     744:	29 85       	ldd	r18, Y+9	; 0x09
     746:	3a 85       	ldd	r19, Y+10	; 0x0a
     748:	2e 5f       	subi	r18, 0xFE	; 254
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	2e 5f       	subi	r18, 0xFE	; 254
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	22 95       	swap	r18
     756:	26 95       	lsr	r18
     758:	27 70       	andi	r18, 0x07	; 7
     75a:	24 0f       	add	r18, r20
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
     760:	82 ef       	ldi	r24, 0xF2	; 242
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	29 85       	ldd	r18, Y+9	; 0x09
     766:	3a 85       	ldd	r19, Y+10	; 0x0a
     768:	2e 5f       	subi	r18, 0xFE	; 254
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	2e 5f       	subi	r18, 0xFE	; 254
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	42 2f       	mov	r20, r18
     776:	44 0f       	add	r20, r20
     778:	44 0f       	add	r20, r20
     77a:	44 0f       	add	r20, r20
     77c:	29 85       	ldd	r18, Y+9	; 0x09
     77e:	3a 85       	ldd	r19, Y+10	; 0x0a
     780:	2e 5f       	subi	r18, 0xFE	; 254
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	22 95       	swap	r18
     78e:	26 95       	lsr	r18
     790:	27 70       	andi	r18, 0x07	; 7
     792:	24 0f       	add	r18, r20
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
     798:	81 ef       	ldi	r24, 0xF1	; 241
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	29 85       	ldd	r18, Y+9	; 0x09
     79e:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a0:	2e 5f       	subi	r18, 0xFE	; 254
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	42 2f       	mov	r20, r18
     7ae:	44 0f       	add	r20, r20
     7b0:	44 0f       	add	r20, r20
     7b2:	44 0f       	add	r20, r20
     7b4:	29 85       	ldd	r18, Y+9	; 0x09
     7b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b8:	2e 5f       	subi	r18, 0xFE	; 254
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	22 95       	swap	r18
     7c2:	26 95       	lsr	r18
     7c4:	27 70       	andi	r18, 0x07	; 7
     7c6:	24 0f       	add	r18, r20
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
     7cc:	80 ef       	ldi	r24, 0xF0	; 240
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	29 85       	ldd	r18, Y+9	; 0x09
     7d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d4:	2e 5f       	subi	r18, 0xFE	; 254
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	22 0f       	add	r18, r18
     7de:	22 0f       	add	r18, r18
     7e0:	22 0f       	add	r18, r18
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
     7e6:	8f ee       	ldi	r24, 0xEF	; 239
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2f ee       	ldi	r18, 0xEF	; 239
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	20 61       	ori	r18, 0x10	; 16
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	30 c0       	rjmp	.+96     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
          else              { Can_set_std_id(cmd->id.std);}
     7fa:	83 ef       	ldi	r24, 0xF3	; 243
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	29 85       	ldd	r18, Y+9	; 0x09
     800:	3a 85       	ldd	r19, Y+10	; 0x0a
     802:	2e 5f       	subi	r18, 0xFE	; 254
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	42 2f       	mov	r20, r18
     810:	42 95       	swap	r20
     812:	44 0f       	add	r20, r20
     814:	40 7e       	andi	r20, 0xE0	; 224
     816:	29 85       	ldd	r18, Y+9	; 0x09
     818:	3a 85       	ldd	r19, Y+10	; 0x0a
     81a:	2e 5f       	subi	r18, 0xFE	; 254
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	26 95       	lsr	r18
     824:	26 95       	lsr	r18
     826:	26 95       	lsr	r18
     828:	24 0f       	add	r18, r20
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
     82e:	82 ef       	ldi	r24, 0xF2	; 242
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	29 85       	ldd	r18, Y+9	; 0x09
     834:	3a 85       	ldd	r19, Y+10	; 0x0a
     836:	2e 5f       	subi	r18, 0xFE	; 254
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	22 95       	swap	r18
     840:	22 0f       	add	r18, r18
     842:	20 7e       	andi	r18, 0xE0	; 224
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	8f ee       	ldi	r24, 0xEF	; 239
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2f ee       	ldi	r18, 0xEF	; 239
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	2f 7e       	andi	r18, 0xEF	; 239
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     85a:	19 82       	std	Y+1, r1	; 0x01
     85c:	13 c0       	rjmp	.+38     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     85e:	8a ef       	ldi	r24, 0xFA	; 250
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	29 85       	ldd	r18, Y+9	; 0x09
     864:	3a 85       	ldd	r19, Y+10	; 0x0a
     866:	f9 01       	movw	r30, r18
     868:	47 81       	ldd	r20, Z+7	; 0x07
     86a:	50 85       	ldd	r21, Z+8	; 0x08
     86c:	29 81       	ldd	r18, Y+1	; 0x01
     86e:	22 2f       	mov	r18, r18
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	24 0f       	add	r18, r20
     874:	35 1f       	adc	r19, r21
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	fc 01       	movw	r30, r24
     88a:	96 81       	ldd	r25, Z+6	; 0x06
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	89 17       	cp	r24, r25
     890:	30 f3       	brcs	.-52     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	9a 85       	ldd	r25, Y+10	; 0x0a
     896:	fc 01       	movw	r30, r24
     898:	12 86       	std	Z+10, r1	; 0x0a
     89a:	80 ef       	ldi	r24, 0xF0	; 240
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	20 ef       	ldi	r18, 0xF0	; 240
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	2b 7f       	andi	r18, 0xFB	; 251
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     8ac:	8f ee       	ldi	r24, 0xEF	; 239
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2f ee       	ldi	r18, 0xEF	; 239
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	40 81       	ld	r20, Z
     8b8:	29 85       	ldd	r18, Y+9	; 0x09
     8ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     8bc:	f9 01       	movw	r30, r18
     8be:	26 81       	ldd	r18, Z+6	; 0x06
     8c0:	24 2b       	or	r18, r20
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
          Can_config_tx();
     8c6:	8f ee       	ldi	r24, 0xEF	; 239
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	2f ee       	ldi	r18, 0xEF	; 239
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	2f 73       	andi	r18, 0x3F	; 63
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
     8d8:	8f ee       	ldi	r24, 0xEF	; 239
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	2f ee       	ldi	r18, 0xEF	; 239
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	20 64       	ori	r18, 0x40	; 64
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
          break;
     8ea:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8ee:	89 85       	ldd	r24, Y+9	; 0x09
     8f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f2:	fc 01       	movw	r30, r24
     8f4:	83 85       	ldd	r24, Z+11	; 0x0b
     8f6:	88 23       	and	r24, r24
     8f8:	09 f4       	brne	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     8fa:	69 c0       	rjmp	.+210    	; 0x9ce <__stack+0xcf>
     8fc:	83 ef       	ldi	r24, 0xF3	; 243
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	2e 5f       	subi	r18, 0xFE	; 254
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	2d 5f       	subi	r18, 0xFD	; 253
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	42 2f       	mov	r20, r18
     912:	44 0f       	add	r20, r20
     914:	44 0f       	add	r20, r20
     916:	44 0f       	add	r20, r20
     918:	29 85       	ldd	r18, Y+9	; 0x09
     91a:	3a 85       	ldd	r19, Y+10	; 0x0a
     91c:	2e 5f       	subi	r18, 0xFE	; 254
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	2e 5f       	subi	r18, 0xFE	; 254
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	22 95       	swap	r18
     92a:	26 95       	lsr	r18
     92c:	27 70       	andi	r18, 0x07	; 7
     92e:	24 0f       	add	r18, r20
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
     934:	82 ef       	ldi	r24, 0xF2	; 242
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	29 85       	ldd	r18, Y+9	; 0x09
     93a:	3a 85       	ldd	r19, Y+10	; 0x0a
     93c:	2e 5f       	subi	r18, 0xFE	; 254
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	2e 5f       	subi	r18, 0xFE	; 254
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	42 2f       	mov	r20, r18
     94a:	44 0f       	add	r20, r20
     94c:	44 0f       	add	r20, r20
     94e:	44 0f       	add	r20, r20
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	2e 5f       	subi	r18, 0xFE	; 254
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	22 95       	swap	r18
     962:	26 95       	lsr	r18
     964:	27 70       	andi	r18, 0x07	; 7
     966:	24 0f       	add	r18, r20
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
     96c:	81 ef       	ldi	r24, 0xF1	; 241
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	29 85       	ldd	r18, Y+9	; 0x09
     972:	3a 85       	ldd	r19, Y+10	; 0x0a
     974:	2e 5f       	subi	r18, 0xFE	; 254
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	2f 5f       	subi	r18, 0xFF	; 255
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	42 2f       	mov	r20, r18
     982:	44 0f       	add	r20, r20
     984:	44 0f       	add	r20, r20
     986:	44 0f       	add	r20, r20
     988:	29 85       	ldd	r18, Y+9	; 0x09
     98a:	3a 85       	ldd	r19, Y+10	; 0x0a
     98c:	2e 5f       	subi	r18, 0xFE	; 254
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	f9 01       	movw	r30, r18
     992:	20 81       	ld	r18, Z
     994:	22 95       	swap	r18
     996:	26 95       	lsr	r18
     998:	27 70       	andi	r18, 0x07	; 7
     99a:	24 0f       	add	r18, r20
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
     9a0:	80 ef       	ldi	r24, 0xF0	; 240
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	29 85       	ldd	r18, Y+9	; 0x09
     9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a8:	2e 5f       	subi	r18, 0xFE	; 254
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	22 0f       	add	r18, r18
     9b2:	22 0f       	add	r18, r18
     9b4:	22 0f       	add	r18, r18
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	8f ee       	ldi	r24, 0xEF	; 239
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	2f ee       	ldi	r18, 0xEF	; 239
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	20 61       	ori	r18, 0x10	; 16
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
     9cc:	30 c0       	rjmp	.+96     	; 0xa2e <__stack+0x12f>
          else              { Can_set_std_id(cmd->id.std);}
     9ce:	83 ef       	ldi	r24, 0xF3	; 243
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	29 85       	ldd	r18, Y+9	; 0x09
     9d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     9d6:	2e 5f       	subi	r18, 0xFE	; 254
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	2f 5f       	subi	r18, 0xFF	; 255
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	f9 01       	movw	r30, r18
     9e0:	20 81       	ld	r18, Z
     9e2:	42 2f       	mov	r20, r18
     9e4:	42 95       	swap	r20
     9e6:	44 0f       	add	r20, r20
     9e8:	40 7e       	andi	r20, 0xE0	; 224
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	2e 5f       	subi	r18, 0xFE	; 254
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	26 95       	lsr	r18
     9f8:	26 95       	lsr	r18
     9fa:	26 95       	lsr	r18
     9fc:	24 0f       	add	r18, r20
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	82 ef       	ldi	r24, 0xF2	; 242
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	29 85       	ldd	r18, Y+9	; 0x09
     a08:	3a 85       	ldd	r19, Y+10	; 0x0a
     a0a:	2e 5f       	subi	r18, 0xFE	; 254
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	f9 01       	movw	r30, r18
     a10:	20 81       	ld	r18, Z
     a12:	22 95       	swap	r18
     a14:	22 0f       	add	r18, r18
     a16:	20 7e       	andi	r18, 0xE0	; 224
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
     a1c:	8f ee       	ldi	r24, 0xEF	; 239
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	2f ee       	ldi	r18, 0xEF	; 239
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	2f 7e       	andi	r18, 0xEF	; 239
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     a2e:	89 85       	ldd	r24, Y+9	; 0x09
     a30:	9a 85       	ldd	r25, Y+10	; 0x0a
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	fc 01       	movw	r30, r24
     a36:	22 87       	std	Z+10, r18	; 0x0a
     a38:	80 ef       	ldi	r24, 0xF0	; 240
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	20 ef       	ldi	r18, 0xF0	; 240
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	24 60       	ori	r18, 0x04	; 4
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a4a:	8f ee       	ldi	r24, 0xEF	; 239
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	2f ee       	ldi	r18, 0xEF	; 239
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	40 81       	ld	r20, Z
     a56:	29 85       	ldd	r18, Y+9	; 0x09
     a58:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5a:	f9 01       	movw	r30, r18
     a5c:	26 81       	ldd	r18, Z+6	; 0x06
     a5e:	24 2b       	or	r18, r20
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
          Can_config_tx();
     a64:	8f ee       	ldi	r24, 0xEF	; 239
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	2f ee       	ldi	r18, 0xEF	; 239
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	20 81       	ld	r18, Z
     a70:	2f 73       	andi	r18, 0x3F	; 63
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
     a76:	8f ee       	ldi	r24, 0xEF	; 239
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2f ee       	ldi	r18, 0xEF	; 239
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	20 81       	ld	r18, Z
     a82:	20 64       	ori	r18, 0x40	; 64
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
          break;
     a88:	5f c7       	rjmp	.+3774   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     a8a:	1d 82       	std	Y+5, r1	; 0x05
     a8c:	1e 82       	std	Y+6, r1	; 0x06
     a8e:	1f 82       	std	Y+7, r1	; 0x07
     a90:	18 86       	std	Y+8, r1	; 0x08
     a92:	27 ef       	ldi	r18, 0xF7	; 247
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	ce 01       	movw	r24, r28
     a98:	05 96       	adiw	r24, 0x05	; 5
     a9a:	03 96       	adiw	r24, 0x03	; 3
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	48 2f       	mov	r20, r24
     aa2:	44 0f       	add	r20, r20
     aa4:	44 0f       	add	r20, r20
     aa6:	44 0f       	add	r20, r20
     aa8:	ce 01       	movw	r24, r28
     aaa:	05 96       	adiw	r24, 0x05	; 5
     aac:	02 96       	adiw	r24, 0x02	; 2
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	82 95       	swap	r24
     ab4:	86 95       	lsr	r24
     ab6:	87 70       	andi	r24, 0x07	; 7
     ab8:	84 0f       	add	r24, r20
     aba:	f9 01       	movw	r30, r18
     abc:	80 83       	st	Z, r24
     abe:	26 ef       	ldi	r18, 0xF6	; 246
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	ce 01       	movw	r24, r28
     ac4:	05 96       	adiw	r24, 0x05	; 5
     ac6:	02 96       	adiw	r24, 0x02	; 2
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	48 2f       	mov	r20, r24
     ace:	44 0f       	add	r20, r20
     ad0:	44 0f       	add	r20, r20
     ad2:	44 0f       	add	r20, r20
     ad4:	ce 01       	movw	r24, r28
     ad6:	05 96       	adiw	r24, 0x05	; 5
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	82 95       	swap	r24
     ae0:	86 95       	lsr	r24
     ae2:	87 70       	andi	r24, 0x07	; 7
     ae4:	84 0f       	add	r24, r20
     ae6:	f9 01       	movw	r30, r18
     ae8:	80 83       	st	Z, r24
     aea:	25 ef       	ldi	r18, 0xF5	; 245
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	ce 01       	movw	r24, r28
     af0:	05 96       	adiw	r24, 0x05	; 5
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	48 2f       	mov	r20, r24
     afa:	44 0f       	add	r20, r20
     afc:	44 0f       	add	r20, r20
     afe:	44 0f       	add	r20, r20
     b00:	ce 01       	movw	r24, r28
     b02:	05 96       	adiw	r24, 0x05	; 5
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	82 95       	swap	r24
     b0a:	86 95       	lsr	r24
     b0c:	87 70       	andi	r24, 0x07	; 7
     b0e:	84 0f       	add	r24, r20
     b10:	f9 01       	movw	r30, r18
     b12:	80 83       	st	Z, r24
     b14:	84 ef       	ldi	r24, 0xF4	; 244
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9e 01       	movw	r18, r28
     b1a:	2b 5f       	subi	r18, 0xFB	; 251
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	22 0f       	add	r18, r18
     b24:	22 0f       	add	r18, r18
     b26:	22 0f       	add	r18, r18
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b2c:	8f ee       	ldi	r24, 0xEF	; 239
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	2f ee       	ldi	r18, 0xEF	; 239
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	40 81       	ld	r20, Z
     b38:	29 85       	ldd	r18, Y+9	; 0x09
     b3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b3c:	f9 01       	movw	r30, r18
     b3e:	26 81       	ldd	r18, Z+6	; 0x06
     b40:	24 2b       	or	r18, r20
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b46:	84 ef       	ldi	r24, 0xF4	; 244
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	24 ef       	ldi	r18, 0xF4	; 244
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	2b 7f       	andi	r18, 0xFB	; 251
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b58:	84 ef       	ldi	r24, 0xF4	; 244
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	24 ef       	ldi	r18, 0xF4	; 244
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	f9 01       	movw	r30, r18
     b62:	20 81       	ld	r18, Z
     b64:	2e 7f       	andi	r18, 0xFE	; 254
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
          Can_config_rx();       
     b6a:	8f ee       	ldi	r24, 0xEF	; 239
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	2f ee       	ldi	r18, 0xEF	; 239
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	2f 73       	andi	r18, 0x3F	; 63
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
     b7c:	8f ee       	ldi	r24, 0xEF	; 239
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	2f ee       	ldi	r18, 0xEF	; 239
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	f9 01       	movw	r30, r18
     b86:	20 81       	ld	r18, Z
     b88:	20 68       	ori	r18, 0x80	; 128
     b8a:	fc 01       	movw	r30, r24
     b8c:	20 83       	st	Z, r18
          break;
     b8e:	dc c6       	rjmp	.+3512   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     b90:	1d 82       	std	Y+5, r1	; 0x05
     b92:	1e 82       	std	Y+6, r1	; 0x06
     b94:	1f 82       	std	Y+7, r1	; 0x07
     b96:	18 86       	std	Y+8, r1	; 0x08
     b98:	27 ef       	ldi	r18, 0xF7	; 247
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	ce 01       	movw	r24, r28
     b9e:	05 96       	adiw	r24, 0x05	; 5
     ba0:	03 96       	adiw	r24, 0x03	; 3
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	44 0f       	add	r20, r20
     baa:	44 0f       	add	r20, r20
     bac:	44 0f       	add	r20, r20
     bae:	ce 01       	movw	r24, r28
     bb0:	05 96       	adiw	r24, 0x05	; 5
     bb2:	02 96       	adiw	r24, 0x02	; 2
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	82 95       	swap	r24
     bba:	86 95       	lsr	r24
     bbc:	87 70       	andi	r24, 0x07	; 7
     bbe:	84 0f       	add	r24, r20
     bc0:	f9 01       	movw	r30, r18
     bc2:	80 83       	st	Z, r24
     bc4:	26 ef       	ldi	r18, 0xF6	; 246
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	ce 01       	movw	r24, r28
     bca:	05 96       	adiw	r24, 0x05	; 5
     bcc:	02 96       	adiw	r24, 0x02	; 2
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	48 2f       	mov	r20, r24
     bd4:	44 0f       	add	r20, r20
     bd6:	44 0f       	add	r20, r20
     bd8:	44 0f       	add	r20, r20
     bda:	ce 01       	movw	r24, r28
     bdc:	05 96       	adiw	r24, 0x05	; 5
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	82 95       	swap	r24
     be6:	86 95       	lsr	r24
     be8:	87 70       	andi	r24, 0x07	; 7
     bea:	84 0f       	add	r24, r20
     bec:	f9 01       	movw	r30, r18
     bee:	80 83       	st	Z, r24
     bf0:	25 ef       	ldi	r18, 0xF5	; 245
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	ce 01       	movw	r24, r28
     bf6:	05 96       	adiw	r24, 0x05	; 5
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	44 0f       	add	r20, r20
     c02:	44 0f       	add	r20, r20
     c04:	44 0f       	add	r20, r20
     c06:	ce 01       	movw	r24, r28
     c08:	05 96       	adiw	r24, 0x05	; 5
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	86 95       	lsr	r24
     c12:	87 70       	andi	r24, 0x07	; 7
     c14:	84 0f       	add	r24, r20
     c16:	f9 01       	movw	r30, r18
     c18:	80 83       	st	Z, r24
     c1a:	84 ef       	ldi	r24, 0xF4	; 244
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9e 01       	movw	r18, r28
     c20:	2b 5f       	subi	r18, 0xFB	; 251
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	22 0f       	add	r18, r18
     c2a:	22 0f       	add	r18, r18
     c2c:	22 0f       	add	r18, r18
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c32:	8f ee       	ldi	r24, 0xEF	; 239
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	2f ee       	ldi	r18, 0xEF	; 239
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	40 81       	ld	r20, Z
     c3e:	29 85       	ldd	r18, Y+9	; 0x09
     c40:	3a 85       	ldd	r19, Y+10	; 0x0a
     c42:	f9 01       	movw	r30, r18
     c44:	26 81       	ldd	r18, Z+6	; 0x06
     c46:	24 2b       	or	r18, r20
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	fc 01       	movw	r30, r24
     c52:	12 86       	std	Z+10, r1	; 0x0a
     c54:	84 ef       	ldi	r24, 0xF4	; 244
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	24 ef       	ldi	r18, 0xF4	; 244
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	f9 01       	movw	r30, r18
     c5e:	20 81       	ld	r18, Z
     c60:	24 60       	ori	r18, 0x04	; 4
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
     c66:	80 ef       	ldi	r24, 0xF0	; 240
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	20 ef       	ldi	r18, 0xF0	; 240
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	20 81       	ld	r18, Z
     c72:	2b 7f       	andi	r18, 0xFB	; 251
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c78:	84 ef       	ldi	r24, 0xF4	; 244
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	24 ef       	ldi	r18, 0xF4	; 244
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	f9 01       	movw	r30, r18
     c82:	20 81       	ld	r18, Z
     c84:	2e 7f       	andi	r18, 0xFE	; 254
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
          Can_config_rx();       
     c8a:	8f ee       	ldi	r24, 0xEF	; 239
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2f ee       	ldi	r18, 0xEF	; 239
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	2f 73       	andi	r18, 0x3F	; 63
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	8f ee       	ldi	r24, 0xEF	; 239
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	2f ee       	ldi	r18, 0xEF	; 239
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	20 68       	ori	r18, 0x80	; 128
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
          break;
     cae:	4c c6       	rjmp	.+3224   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     cb0:	1d 82       	std	Y+5, r1	; 0x05
     cb2:	1e 82       	std	Y+6, r1	; 0x06
     cb4:	1f 82       	std	Y+7, r1	; 0x07
     cb6:	18 86       	std	Y+8, r1	; 0x08
     cb8:	27 ef       	ldi	r18, 0xF7	; 247
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	ce 01       	movw	r24, r28
     cbe:	05 96       	adiw	r24, 0x05	; 5
     cc0:	03 96       	adiw	r24, 0x03	; 3
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	44 0f       	add	r20, r20
     cca:	44 0f       	add	r20, r20
     ccc:	44 0f       	add	r20, r20
     cce:	ce 01       	movw	r24, r28
     cd0:	05 96       	adiw	r24, 0x05	; 5
     cd2:	02 96       	adiw	r24, 0x02	; 2
     cd4:	fc 01       	movw	r30, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	82 95       	swap	r24
     cda:	86 95       	lsr	r24
     cdc:	87 70       	andi	r24, 0x07	; 7
     cde:	84 0f       	add	r24, r20
     ce0:	f9 01       	movw	r30, r18
     ce2:	80 83       	st	Z, r24
     ce4:	26 ef       	ldi	r18, 0xF6	; 246
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	ce 01       	movw	r24, r28
     cea:	05 96       	adiw	r24, 0x05	; 5
     cec:	02 96       	adiw	r24, 0x02	; 2
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	44 0f       	add	r20, r20
     cf6:	44 0f       	add	r20, r20
     cf8:	44 0f       	add	r20, r20
     cfa:	ce 01       	movw	r24, r28
     cfc:	05 96       	adiw	r24, 0x05	; 5
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	82 95       	swap	r24
     d06:	86 95       	lsr	r24
     d08:	87 70       	andi	r24, 0x07	; 7
     d0a:	84 0f       	add	r24, r20
     d0c:	f9 01       	movw	r30, r18
     d0e:	80 83       	st	Z, r24
     d10:	25 ef       	ldi	r18, 0xF5	; 245
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	ce 01       	movw	r24, r28
     d16:	05 96       	adiw	r24, 0x05	; 5
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	fc 01       	movw	r30, r24
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	44 0f       	add	r20, r20
     d22:	44 0f       	add	r20, r20
     d24:	44 0f       	add	r20, r20
     d26:	ce 01       	movw	r24, r28
     d28:	05 96       	adiw	r24, 0x05	; 5
     d2a:	fc 01       	movw	r30, r24
     d2c:	80 81       	ld	r24, Z
     d2e:	82 95       	swap	r24
     d30:	86 95       	lsr	r24
     d32:	87 70       	andi	r24, 0x07	; 7
     d34:	84 0f       	add	r24, r20
     d36:	f9 01       	movw	r30, r18
     d38:	80 83       	st	Z, r24
     d3a:	84 ef       	ldi	r24, 0xF4	; 244
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9e 01       	movw	r18, r28
     d40:	2b 5f       	subi	r18, 0xFB	; 251
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	22 0f       	add	r18, r18
     d4a:	22 0f       	add	r18, r18
     d4c:	22 0f       	add	r18, r18
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d52:	8f ee       	ldi	r24, 0xEF	; 239
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2f ee       	ldi	r18, 0xEF	; 239
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	40 81       	ld	r20, Z
     d5e:	29 85       	ldd	r18, Y+9	; 0x09
     d60:	3a 85       	ldd	r19, Y+10	; 0x0a
     d62:	f9 01       	movw	r30, r18
     d64:	26 81       	ldd	r18, Z+6	; 0x06
     d66:	24 2b       	or	r18, r20
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d6c:	89 85       	ldd	r24, Y+9	; 0x09
     d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	fc 01       	movw	r30, r24
     d74:	22 87       	std	Z+10, r18	; 0x0a
     d76:	84 ef       	ldi	r24, 0xF4	; 244
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	24 ef       	ldi	r18, 0xF4	; 244
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	f9 01       	movw	r30, r18
     d80:	20 81       	ld	r18, Z
     d82:	24 60       	ori	r18, 0x04	; 4
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
     d88:	80 ef       	ldi	r24, 0xF0	; 240
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	20 ef       	ldi	r18, 0xF0	; 240
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	f9 01       	movw	r30, r18
     d92:	20 81       	ld	r18, Z
     d94:	24 60       	ori	r18, 0x04	; 4
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18
          Can_clear_rplv();
     d9a:	8f ee       	ldi	r24, 0xEF	; 239
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	2f ee       	ldi	r18, 0xEF	; 239
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	f9 01       	movw	r30, r18
     da4:	20 81       	ld	r18, Z
     da6:	2f 7d       	andi	r18, 0xDF	; 223
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dac:	84 ef       	ldi	r24, 0xF4	; 244
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	24 ef       	ldi	r18, 0xF4	; 244
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	f9 01       	movw	r30, r18
     db6:	20 81       	ld	r18, Z
     db8:	2e 7f       	andi	r18, 0xFE	; 254
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18
          Can_config_rx();       
     dbe:	8f ee       	ldi	r24, 0xEF	; 239
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2f ee       	ldi	r18, 0xEF	; 239
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	f9 01       	movw	r30, r18
     dc8:	20 81       	ld	r18, Z
     dca:	2f 73       	andi	r18, 0x3F	; 63
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	8f ee       	ldi	r24, 0xEF	; 239
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	2f ee       	ldi	r18, 0xEF	; 239
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	f9 01       	movw	r30, r18
     dda:	20 81       	ld	r18, Z
     ddc:	20 68       	ori	r18, 0x80	; 128
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
          break;
     de2:	b2 c5       	rjmp	.+2916   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	fc 01       	movw	r30, r24
     dea:	83 85       	ldd	r24, Z+11	; 0x0b
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <__stack+0x4f3>
     df0:	69 c0       	rjmp	.+210    	; 0xec4 <__stack+0x5c5>
     df2:	83 ef       	ldi	r24, 0xF3	; 243
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	29 85       	ldd	r18, Y+9	; 0x09
     df8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dfa:	2e 5f       	subi	r18, 0xFE	; 254
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	2d 5f       	subi	r18, 0xFD	; 253
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	f9 01       	movw	r30, r18
     e04:	20 81       	ld	r18, Z
     e06:	42 2f       	mov	r20, r18
     e08:	44 0f       	add	r20, r20
     e0a:	44 0f       	add	r20, r20
     e0c:	44 0f       	add	r20, r20
     e0e:	29 85       	ldd	r18, Y+9	; 0x09
     e10:	3a 85       	ldd	r19, Y+10	; 0x0a
     e12:	2e 5f       	subi	r18, 0xFE	; 254
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	2e 5f       	subi	r18, 0xFE	; 254
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	f9 01       	movw	r30, r18
     e1c:	20 81       	ld	r18, Z
     e1e:	22 95       	swap	r18
     e20:	26 95       	lsr	r18
     e22:	27 70       	andi	r18, 0x07	; 7
     e24:	24 0f       	add	r18, r20
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
     e2a:	82 ef       	ldi	r24, 0xF2	; 242
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	29 85       	ldd	r18, Y+9	; 0x09
     e30:	3a 85       	ldd	r19, Y+10	; 0x0a
     e32:	2e 5f       	subi	r18, 0xFE	; 254
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	2e 5f       	subi	r18, 0xFE	; 254
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	f9 01       	movw	r30, r18
     e3c:	20 81       	ld	r18, Z
     e3e:	42 2f       	mov	r20, r18
     e40:	44 0f       	add	r20, r20
     e42:	44 0f       	add	r20, r20
     e44:	44 0f       	add	r20, r20
     e46:	29 85       	ldd	r18, Y+9	; 0x09
     e48:	3a 85       	ldd	r19, Y+10	; 0x0a
     e4a:	2e 5f       	subi	r18, 0xFE	; 254
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	22 95       	swap	r18
     e58:	26 95       	lsr	r18
     e5a:	27 70       	andi	r18, 0x07	; 7
     e5c:	24 0f       	add	r18, r20
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
     e62:	81 ef       	ldi	r24, 0xF1	; 241
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	29 85       	ldd	r18, Y+9	; 0x09
     e68:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6a:	2e 5f       	subi	r18, 0xFE	; 254
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	f9 01       	movw	r30, r18
     e74:	20 81       	ld	r18, Z
     e76:	42 2f       	mov	r20, r18
     e78:	44 0f       	add	r20, r20
     e7a:	44 0f       	add	r20, r20
     e7c:	44 0f       	add	r20, r20
     e7e:	29 85       	ldd	r18, Y+9	; 0x09
     e80:	3a 85       	ldd	r19, Y+10	; 0x0a
     e82:	2e 5f       	subi	r18, 0xFE	; 254
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	f9 01       	movw	r30, r18
     e88:	20 81       	ld	r18, Z
     e8a:	22 95       	swap	r18
     e8c:	26 95       	lsr	r18
     e8e:	27 70       	andi	r18, 0x07	; 7
     e90:	24 0f       	add	r18, r20
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
     e96:	80 ef       	ldi	r24, 0xF0	; 240
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	29 85       	ldd	r18, Y+9	; 0x09
     e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e9e:	2e 5f       	subi	r18, 0xFE	; 254
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	f9 01       	movw	r30, r18
     ea4:	20 81       	ld	r18, Z
     ea6:	22 0f       	add	r18, r18
     ea8:	22 0f       	add	r18, r18
     eaa:	22 0f       	add	r18, r18
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
     eb0:	8f ee       	ldi	r24, 0xEF	; 239
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	2f ee       	ldi	r18, 0xEF	; 239
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	20 81       	ld	r18, Z
     ebc:	20 61       	ori	r18, 0x10	; 16
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
     ec2:	30 c0       	rjmp	.+96     	; 0xf24 <__stack+0x625>
          else              { Can_set_std_id(cmd->id.std);}
     ec4:	83 ef       	ldi	r24, 0xF3	; 243
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	29 85       	ldd	r18, Y+9	; 0x09
     eca:	3a 85       	ldd	r19, Y+10	; 0x0a
     ecc:	2e 5f       	subi	r18, 0xFE	; 254
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	42 2f       	mov	r20, r18
     eda:	42 95       	swap	r20
     edc:	44 0f       	add	r20, r20
     ede:	40 7e       	andi	r20, 0xE0	; 224
     ee0:	29 85       	ldd	r18, Y+9	; 0x09
     ee2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee4:	2e 5f       	subi	r18, 0xFE	; 254
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	26 95       	lsr	r18
     eee:	26 95       	lsr	r18
     ef0:	26 95       	lsr	r18
     ef2:	24 0f       	add	r18, r20
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
     ef8:	82 ef       	ldi	r24, 0xF2	; 242
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	29 85       	ldd	r18, Y+9	; 0x09
     efe:	3a 85       	ldd	r19, Y+10	; 0x0a
     f00:	2e 5f       	subi	r18, 0xFE	; 254
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	22 95       	swap	r18
     f0a:	22 0f       	add	r18, r18
     f0c:	20 7e       	andi	r18, 0xE0	; 224
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
     f12:	8f ee       	ldi	r24, 0xEF	; 239
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	2f ee       	ldi	r18, 0xEF	; 239
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	f9 01       	movw	r30, r18
     f1c:	20 81       	ld	r18, Z
     f1e:	2f 7e       	andi	r18, 0xEF	; 239
     f20:	fc 01       	movw	r30, r24
     f22:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	dc 01       	movw	r26, r24
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	af 83       	std	Y+7, r26	; 0x07
     f30:	b8 87       	std	Y+8, r27	; 0x08
     f32:	27 ef       	ldi	r18, 0xF7	; 247
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	ce 01       	movw	r24, r28
     f38:	05 96       	adiw	r24, 0x05	; 5
     f3a:	03 96       	adiw	r24, 0x03	; 3
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	44 0f       	add	r20, r20
     f44:	44 0f       	add	r20, r20
     f46:	44 0f       	add	r20, r20
     f48:	ce 01       	movw	r24, r28
     f4a:	05 96       	adiw	r24, 0x05	; 5
     f4c:	02 96       	adiw	r24, 0x02	; 2
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	82 95       	swap	r24
     f54:	86 95       	lsr	r24
     f56:	87 70       	andi	r24, 0x07	; 7
     f58:	84 0f       	add	r24, r20
     f5a:	f9 01       	movw	r30, r18
     f5c:	80 83       	st	Z, r24
     f5e:	26 ef       	ldi	r18, 0xF6	; 246
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	05 96       	adiw	r24, 0x05	; 5
     f66:	02 96       	adiw	r24, 0x02	; 2
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	44 0f       	add	r20, r20
     f70:	44 0f       	add	r20, r20
     f72:	44 0f       	add	r20, r20
     f74:	ce 01       	movw	r24, r28
     f76:	05 96       	adiw	r24, 0x05	; 5
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	82 95       	swap	r24
     f80:	86 95       	lsr	r24
     f82:	87 70       	andi	r24, 0x07	; 7
     f84:	84 0f       	add	r24, r20
     f86:	f9 01       	movw	r30, r18
     f88:	80 83       	st	Z, r24
     f8a:	25 ef       	ldi	r18, 0xF5	; 245
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	ce 01       	movw	r24, r28
     f90:	05 96       	adiw	r24, 0x05	; 5
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	44 0f       	add	r20, r20
     f9c:	44 0f       	add	r20, r20
     f9e:	44 0f       	add	r20, r20
     fa0:	ce 01       	movw	r24, r28
     fa2:	05 96       	adiw	r24, 0x05	; 5
     fa4:	fc 01       	movw	r30, r24
     fa6:	80 81       	ld	r24, Z
     fa8:	82 95       	swap	r24
     faa:	86 95       	lsr	r24
     fac:	87 70       	andi	r24, 0x07	; 7
     fae:	84 0f       	add	r24, r20
     fb0:	f9 01       	movw	r30, r18
     fb2:	80 83       	st	Z, r24
     fb4:	84 ef       	ldi	r24, 0xF4	; 244
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9e 01       	movw	r18, r28
     fba:	2b 5f       	subi	r18, 0xFB	; 251
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	f9 01       	movw	r30, r18
     fc0:	20 81       	ld	r18, Z
     fc2:	22 0f       	add	r18, r18
     fc4:	22 0f       	add	r18, r18
     fc6:	22 0f       	add	r18, r18
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fcc:	8f ee       	ldi	r24, 0xEF	; 239
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	2f ee       	ldi	r18, 0xEF	; 239
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	f9 01       	movw	r30, r18
     fd6:	40 81       	ld	r20, Z
     fd8:	29 85       	ldd	r18, Y+9	; 0x09
     fda:	3a 85       	ldd	r19, Y+10	; 0x0a
     fdc:	f9 01       	movw	r30, r18
     fde:	26 81       	ldd	r18, Z+6	; 0x06
     fe0:	24 2b       	or	r18, r20
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     fe6:	84 ef       	ldi	r24, 0xF4	; 244
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	24 ef       	ldi	r18, 0xF4	; 244
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	2b 7f       	andi	r18, 0xFB	; 251
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18
          Can_set_idemsk();
     ff8:	84 ef       	ldi	r24, 0xF4	; 244
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	24 ef       	ldi	r18, 0xF4	; 244
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	21 60       	ori	r18, 0x01	; 1
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
          Can_config_rx();       
    100a:	8f ee       	ldi	r24, 0xEF	; 239
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	2f ee       	ldi	r18, 0xEF	; 239
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	20 81       	ld	r18, Z
    1016:	2f 73       	andi	r18, 0x3F	; 63
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	8f ee       	ldi	r24, 0xEF	; 239
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	2f ee       	ldi	r18, 0xEF	; 239
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	20 81       	ld	r18, Z
    1028:	20 68       	ori	r18, 0x80	; 128
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18
          break;
    102e:	8c c4       	rjmp	.+2328   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	fc 01       	movw	r30, r24
    1036:	83 85       	ldd	r24, Z+11	; 0x0b
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <__stack+0x73f>
    103c:	69 c0       	rjmp	.+210    	; 0x1110 <__stack+0x811>
    103e:	83 ef       	ldi	r24, 0xF3	; 243
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	29 85       	ldd	r18, Y+9	; 0x09
    1044:	3a 85       	ldd	r19, Y+10	; 0x0a
    1046:	2e 5f       	subi	r18, 0xFE	; 254
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	2d 5f       	subi	r18, 0xFD	; 253
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	42 2f       	mov	r20, r18
    1054:	44 0f       	add	r20, r20
    1056:	44 0f       	add	r20, r20
    1058:	44 0f       	add	r20, r20
    105a:	29 85       	ldd	r18, Y+9	; 0x09
    105c:	3a 85       	ldd	r19, Y+10	; 0x0a
    105e:	2e 5f       	subi	r18, 0xFE	; 254
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	2e 5f       	subi	r18, 0xFE	; 254
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	f9 01       	movw	r30, r18
    1068:	20 81       	ld	r18, Z
    106a:	22 95       	swap	r18
    106c:	26 95       	lsr	r18
    106e:	27 70       	andi	r18, 0x07	; 7
    1070:	24 0f       	add	r18, r20
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
    1076:	82 ef       	ldi	r24, 0xF2	; 242
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	29 85       	ldd	r18, Y+9	; 0x09
    107c:	3a 85       	ldd	r19, Y+10	; 0x0a
    107e:	2e 5f       	subi	r18, 0xFE	; 254
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	42 2f       	mov	r20, r18
    108c:	44 0f       	add	r20, r20
    108e:	44 0f       	add	r20, r20
    1090:	44 0f       	add	r20, r20
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	2e 5f       	subi	r18, 0xFE	; 254
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	22 95       	swap	r18
    10a4:	26 95       	lsr	r18
    10a6:	27 70       	andi	r18, 0x07	; 7
    10a8:	24 0f       	add	r18, r20
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
    10ae:	81 ef       	ldi	r24, 0xF1	; 241
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	29 85       	ldd	r18, Y+9	; 0x09
    10b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b6:	2e 5f       	subi	r18, 0xFE	; 254
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	42 2f       	mov	r20, r18
    10c4:	44 0f       	add	r20, r20
    10c6:	44 0f       	add	r20, r20
    10c8:	44 0f       	add	r20, r20
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	2e 5f       	subi	r18, 0xFE	; 254
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	f9 01       	movw	r30, r18
    10d4:	20 81       	ld	r18, Z
    10d6:	22 95       	swap	r18
    10d8:	26 95       	lsr	r18
    10da:	27 70       	andi	r18, 0x07	; 7
    10dc:	24 0f       	add	r18, r20
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
    10e2:	80 ef       	ldi	r24, 0xF0	; 240
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	29 85       	ldd	r18, Y+9	; 0x09
    10e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ea:	2e 5f       	subi	r18, 0xFE	; 254
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	f9 01       	movw	r30, r18
    10f0:	20 81       	ld	r18, Z
    10f2:	22 0f       	add	r18, r18
    10f4:	22 0f       	add	r18, r18
    10f6:	22 0f       	add	r18, r18
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
    10fc:	8f ee       	ldi	r24, 0xEF	; 239
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	2f ee       	ldi	r18, 0xEF	; 239
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	f9 01       	movw	r30, r18
    1106:	20 81       	ld	r18, Z
    1108:	20 61       	ori	r18, 0x10	; 16
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
    110e:	30 c0       	rjmp	.+96     	; 0x1170 <__stack+0x871>
          else              { Can_set_std_id(cmd->id.std);}
    1110:	83 ef       	ldi	r24, 0xF3	; 243
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	29 85       	ldd	r18, Y+9	; 0x09
    1116:	3a 85       	ldd	r19, Y+10	; 0x0a
    1118:	2e 5f       	subi	r18, 0xFE	; 254
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	f9 01       	movw	r30, r18
    1122:	20 81       	ld	r18, Z
    1124:	42 2f       	mov	r20, r18
    1126:	42 95       	swap	r20
    1128:	44 0f       	add	r20, r20
    112a:	40 7e       	andi	r20, 0xE0	; 224
    112c:	29 85       	ldd	r18, Y+9	; 0x09
    112e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1130:	2e 5f       	subi	r18, 0xFE	; 254
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	f9 01       	movw	r30, r18
    1136:	20 81       	ld	r18, Z
    1138:	26 95       	lsr	r18
    113a:	26 95       	lsr	r18
    113c:	26 95       	lsr	r18
    113e:	24 0f       	add	r18, r20
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	82 ef       	ldi	r24, 0xF2	; 242
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	29 85       	ldd	r18, Y+9	; 0x09
    114a:	3a 85       	ldd	r19, Y+10	; 0x0a
    114c:	2e 5f       	subi	r18, 0xFE	; 254
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	f9 01       	movw	r30, r18
    1152:	20 81       	ld	r18, Z
    1154:	22 95       	swap	r18
    1156:	22 0f       	add	r18, r18
    1158:	20 7e       	andi	r18, 0xE0	; 224
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
    115e:	8f ee       	ldi	r24, 0xEF	; 239
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	2f ee       	ldi	r18, 0xEF	; 239
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	2f 7e       	andi	r18, 0xEF	; 239
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	dc 01       	movw	r26, r24
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	af 83       	std	Y+7, r26	; 0x07
    117c:	b8 87       	std	Y+8, r27	; 0x08
    117e:	27 ef       	ldi	r18, 0xF7	; 247
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	ce 01       	movw	r24, r28
    1184:	05 96       	adiw	r24, 0x05	; 5
    1186:	03 96       	adiw	r24, 0x03	; 3
    1188:	fc 01       	movw	r30, r24
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	44 0f       	add	r20, r20
    1190:	44 0f       	add	r20, r20
    1192:	44 0f       	add	r20, r20
    1194:	ce 01       	movw	r24, r28
    1196:	05 96       	adiw	r24, 0x05	; 5
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	fc 01       	movw	r30, r24
    119c:	80 81       	ld	r24, Z
    119e:	82 95       	swap	r24
    11a0:	86 95       	lsr	r24
    11a2:	87 70       	andi	r24, 0x07	; 7
    11a4:	84 0f       	add	r24, r20
    11a6:	f9 01       	movw	r30, r18
    11a8:	80 83       	st	Z, r24
    11aa:	26 ef       	ldi	r18, 0xF6	; 246
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	ce 01       	movw	r24, r28
    11b0:	05 96       	adiw	r24, 0x05	; 5
    11b2:	02 96       	adiw	r24, 0x02	; 2
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	44 0f       	add	r20, r20
    11bc:	44 0f       	add	r20, r20
    11be:	44 0f       	add	r20, r20
    11c0:	ce 01       	movw	r24, r28
    11c2:	05 96       	adiw	r24, 0x05	; 5
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
    11ca:	82 95       	swap	r24
    11cc:	86 95       	lsr	r24
    11ce:	87 70       	andi	r24, 0x07	; 7
    11d0:	84 0f       	add	r24, r20
    11d2:	f9 01       	movw	r30, r18
    11d4:	80 83       	st	Z, r24
    11d6:	25 ef       	ldi	r18, 0xF5	; 245
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	ce 01       	movw	r24, r28
    11dc:	05 96       	adiw	r24, 0x05	; 5
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	fc 01       	movw	r30, r24
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
    11ea:	44 0f       	add	r20, r20
    11ec:	ce 01       	movw	r24, r28
    11ee:	05 96       	adiw	r24, 0x05	; 5
    11f0:	fc 01       	movw	r30, r24
    11f2:	80 81       	ld	r24, Z
    11f4:	82 95       	swap	r24
    11f6:	86 95       	lsr	r24
    11f8:	87 70       	andi	r24, 0x07	; 7
    11fa:	84 0f       	add	r24, r20
    11fc:	f9 01       	movw	r30, r18
    11fe:	80 83       	st	Z, r24
    1200:	84 ef       	ldi	r24, 0xF4	; 244
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9e 01       	movw	r18, r28
    1206:	2b 5f       	subi	r18, 0xFB	; 251
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	f9 01       	movw	r30, r18
    120c:	20 81       	ld	r18, Z
    120e:	22 0f       	add	r18, r18
    1210:	22 0f       	add	r18, r18
    1212:	22 0f       	add	r18, r18
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1218:	8f ee       	ldi	r24, 0xEF	; 239
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	2f ee       	ldi	r18, 0xEF	; 239
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	f9 01       	movw	r30, r18
    1222:	40 81       	ld	r20, Z
    1224:	29 85       	ldd	r18, Y+9	; 0x09
    1226:	3a 85       	ldd	r19, Y+10	; 0x0a
    1228:	f9 01       	movw	r30, r18
    122a:	26 81       	ldd	r18, Z+6	; 0x06
    122c:	24 2b       	or	r18, r20
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	9a 85       	ldd	r25, Y+10	; 0x0a
    1236:	fc 01       	movw	r30, r24
    1238:	12 86       	std	Z+10, r1	; 0x0a
    123a:	84 ef       	ldi	r24, 0xF4	; 244
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	24 ef       	ldi	r18, 0xF4	; 244
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	24 60       	ori	r18, 0x04	; 4
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18
    124c:	80 ef       	ldi	r24, 0xF0	; 240
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	20 ef       	ldi	r18, 0xF0	; 240
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	2b 7f       	andi	r18, 0xFB	; 251
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
          Can_set_idemsk();
    125e:	84 ef       	ldi	r24, 0xF4	; 244
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	24 ef       	ldi	r18, 0xF4	; 244
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	f9 01       	movw	r30, r18
    1268:	20 81       	ld	r18, Z
    126a:	21 60       	ori	r18, 0x01	; 1
    126c:	fc 01       	movw	r30, r24
    126e:	20 83       	st	Z, r18
          Can_config_rx();       
    1270:	8f ee       	ldi	r24, 0xEF	; 239
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2f ee       	ldi	r18, 0xEF	; 239
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	2f 73       	andi	r18, 0x3F	; 63
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
    1282:	8f ee       	ldi	r24, 0xEF	; 239
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2f ee       	ldi	r18, 0xEF	; 239
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	20 68       	ori	r18, 0x80	; 128
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
          break;
    1294:	59 c3       	rjmp	.+1714   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	fc 01       	movw	r30, r24
    129c:	83 85       	ldd	r24, Z+11	; 0x0b
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__stack+0x9a5>
    12a2:	69 c0       	rjmp	.+210    	; 0x1376 <__stack+0xa77>
    12a4:	83 ef       	ldi	r24, 0xF3	; 243
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	29 85       	ldd	r18, Y+9	; 0x09
    12aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ac:	2e 5f       	subi	r18, 0xFE	; 254
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	2d 5f       	subi	r18, 0xFD	; 253
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	f9 01       	movw	r30, r18
    12b6:	20 81       	ld	r18, Z
    12b8:	42 2f       	mov	r20, r18
    12ba:	44 0f       	add	r20, r20
    12bc:	44 0f       	add	r20, r20
    12be:	44 0f       	add	r20, r20
    12c0:	29 85       	ldd	r18, Y+9	; 0x09
    12c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c4:	2e 5f       	subi	r18, 0xFE	; 254
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	2e 5f       	subi	r18, 0xFE	; 254
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	22 95       	swap	r18
    12d2:	26 95       	lsr	r18
    12d4:	27 70       	andi	r18, 0x07	; 7
    12d6:	24 0f       	add	r18, r20
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	82 ef       	ldi	r24, 0xF2	; 242
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	29 85       	ldd	r18, Y+9	; 0x09
    12e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e4:	2e 5f       	subi	r18, 0xFE	; 254
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	2e 5f       	subi	r18, 0xFE	; 254
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	f9 01       	movw	r30, r18
    12ee:	20 81       	ld	r18, Z
    12f0:	42 2f       	mov	r20, r18
    12f2:	44 0f       	add	r20, r20
    12f4:	44 0f       	add	r20, r20
    12f6:	44 0f       	add	r20, r20
    12f8:	29 85       	ldd	r18, Y+9	; 0x09
    12fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    12fc:	2e 5f       	subi	r18, 0xFE	; 254
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	22 95       	swap	r18
    130a:	26 95       	lsr	r18
    130c:	27 70       	andi	r18, 0x07	; 7
    130e:	24 0f       	add	r18, r20
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
    1314:	81 ef       	ldi	r24, 0xF1	; 241
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	29 85       	ldd	r18, Y+9	; 0x09
    131a:	3a 85       	ldd	r19, Y+10	; 0x0a
    131c:	2e 5f       	subi	r18, 0xFE	; 254
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	42 2f       	mov	r20, r18
    132a:	44 0f       	add	r20, r20
    132c:	44 0f       	add	r20, r20
    132e:	44 0f       	add	r20, r20
    1330:	29 85       	ldd	r18, Y+9	; 0x09
    1332:	3a 85       	ldd	r19, Y+10	; 0x0a
    1334:	2e 5f       	subi	r18, 0xFE	; 254
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	22 95       	swap	r18
    133e:	26 95       	lsr	r18
    1340:	27 70       	andi	r18, 0x07	; 7
    1342:	24 0f       	add	r18, r20
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
    1348:	80 ef       	ldi	r24, 0xF0	; 240
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	29 85       	ldd	r18, Y+9	; 0x09
    134e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1350:	2e 5f       	subi	r18, 0xFE	; 254
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	22 0f       	add	r18, r18
    135a:	22 0f       	add	r18, r18
    135c:	22 0f       	add	r18, r18
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
    1362:	8f ee       	ldi	r24, 0xEF	; 239
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2f ee       	ldi	r18, 0xEF	; 239
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f9 01       	movw	r30, r18
    136c:	20 81       	ld	r18, Z
    136e:	20 61       	ori	r18, 0x10	; 16
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
    1374:	30 c0       	rjmp	.+96     	; 0x13d6 <__stack+0xad7>
          else              { Can_set_std_id(cmd->id.std);}
    1376:	83 ef       	ldi	r24, 0xF3	; 243
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	29 85       	ldd	r18, Y+9	; 0x09
    137c:	3a 85       	ldd	r19, Y+10	; 0x0a
    137e:	2e 5f       	subi	r18, 0xFE	; 254
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	2f 5f       	subi	r18, 0xFF	; 255
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	f9 01       	movw	r30, r18
    1388:	20 81       	ld	r18, Z
    138a:	42 2f       	mov	r20, r18
    138c:	42 95       	swap	r20
    138e:	44 0f       	add	r20, r20
    1390:	40 7e       	andi	r20, 0xE0	; 224
    1392:	29 85       	ldd	r18, Y+9	; 0x09
    1394:	3a 85       	ldd	r19, Y+10	; 0x0a
    1396:	2e 5f       	subi	r18, 0xFE	; 254
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	f9 01       	movw	r30, r18
    139c:	20 81       	ld	r18, Z
    139e:	26 95       	lsr	r18
    13a0:	26 95       	lsr	r18
    13a2:	26 95       	lsr	r18
    13a4:	24 0f       	add	r18, r20
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
    13aa:	82 ef       	ldi	r24, 0xF2	; 242
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	29 85       	ldd	r18, Y+9	; 0x09
    13b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b2:	2e 5f       	subi	r18, 0xFE	; 254
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	f9 01       	movw	r30, r18
    13b8:	20 81       	ld	r18, Z
    13ba:	22 95       	swap	r18
    13bc:	22 0f       	add	r18, r18
    13be:	20 7e       	andi	r18, 0xE0	; 224
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
    13c4:	8f ee       	ldi	r24, 0xEF	; 239
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	2f ee       	ldi	r18, 0xEF	; 239
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	f9 01       	movw	r30, r18
    13ce:	20 81       	ld	r18, Z
    13d0:	2f 7e       	andi	r18, 0xEF	; 239
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	9f ef       	ldi	r25, 0xFF	; 255
    13da:	dc 01       	movw	r26, r24
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	af 83       	std	Y+7, r26	; 0x07
    13e2:	b8 87       	std	Y+8, r27	; 0x08
    13e4:	27 ef       	ldi	r18, 0xF7	; 247
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	ce 01       	movw	r24, r28
    13ea:	05 96       	adiw	r24, 0x05	; 5
    13ec:	03 96       	adiw	r24, 0x03	; 3
    13ee:	fc 01       	movw	r30, r24
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	44 0f       	add	r20, r20
    13f6:	44 0f       	add	r20, r20
    13f8:	44 0f       	add	r20, r20
    13fa:	ce 01       	movw	r24, r28
    13fc:	05 96       	adiw	r24, 0x05	; 5
    13fe:	02 96       	adiw	r24, 0x02	; 2
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	82 95       	swap	r24
    1406:	86 95       	lsr	r24
    1408:	87 70       	andi	r24, 0x07	; 7
    140a:	84 0f       	add	r24, r20
    140c:	f9 01       	movw	r30, r18
    140e:	80 83       	st	Z, r24
    1410:	26 ef       	ldi	r18, 0xF6	; 246
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	ce 01       	movw	r24, r28
    1416:	05 96       	adiw	r24, 0x05	; 5
    1418:	02 96       	adiw	r24, 0x02	; 2
    141a:	fc 01       	movw	r30, r24
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	44 0f       	add	r20, r20
    1422:	44 0f       	add	r20, r20
    1424:	44 0f       	add	r20, r20
    1426:	ce 01       	movw	r24, r28
    1428:	05 96       	adiw	r24, 0x05	; 5
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	82 95       	swap	r24
    1432:	86 95       	lsr	r24
    1434:	87 70       	andi	r24, 0x07	; 7
    1436:	84 0f       	add	r24, r20
    1438:	f9 01       	movw	r30, r18
    143a:	80 83       	st	Z, r24
    143c:	25 ef       	ldi	r18, 0xF5	; 245
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	05 96       	adiw	r24, 0x05	; 5
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	fc 01       	movw	r30, r24
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	44 0f       	add	r20, r20
    144e:	44 0f       	add	r20, r20
    1450:	44 0f       	add	r20, r20
    1452:	ce 01       	movw	r24, r28
    1454:	05 96       	adiw	r24, 0x05	; 5
    1456:	fc 01       	movw	r30, r24
    1458:	80 81       	ld	r24, Z
    145a:	82 95       	swap	r24
    145c:	86 95       	lsr	r24
    145e:	87 70       	andi	r24, 0x07	; 7
    1460:	84 0f       	add	r24, r20
    1462:	f9 01       	movw	r30, r18
    1464:	80 83       	st	Z, r24
    1466:	84 ef       	ldi	r24, 0xF4	; 244
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9e 01       	movw	r18, r28
    146c:	2b 5f       	subi	r18, 0xFB	; 251
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	22 0f       	add	r18, r18
    1476:	22 0f       	add	r18, r18
    1478:	22 0f       	add	r18, r18
    147a:	fc 01       	movw	r30, r24
    147c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    147e:	8f ee       	ldi	r24, 0xEF	; 239
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2f ee       	ldi	r18, 0xEF	; 239
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	f9 01       	movw	r30, r18
    1488:	40 81       	ld	r20, Z
    148a:	29 85       	ldd	r18, Y+9	; 0x09
    148c:	3a 85       	ldd	r19, Y+10	; 0x0a
    148e:	f9 01       	movw	r30, r18
    1490:	26 81       	ldd	r18, Z+6	; 0x06
    1492:	24 2b       	or	r18, r20
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	fc 01       	movw	r30, r24
    14a0:	22 87       	std	Z+10, r18	; 0x0a
    14a2:	84 ef       	ldi	r24, 0xF4	; 244
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	24 ef       	ldi	r18, 0xF4	; 244
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	f9 01       	movw	r30, r18
    14ac:	20 81       	ld	r18, Z
    14ae:	24 60       	ori	r18, 0x04	; 4
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
    14b4:	80 ef       	ldi	r24, 0xF0	; 240
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	20 ef       	ldi	r18, 0xF0	; 240
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	f9 01       	movw	r30, r18
    14be:	20 81       	ld	r18, Z
    14c0:	24 60       	ori	r18, 0x04	; 4
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
          Can_clear_rplv();
    14c6:	8f ee       	ldi	r24, 0xEF	; 239
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	2f ee       	ldi	r18, 0xEF	; 239
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	f9 01       	movw	r30, r18
    14d0:	20 81       	ld	r18, Z
    14d2:	2f 7d       	andi	r18, 0xDF	; 223
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
          Can_set_idemsk();
    14d8:	84 ef       	ldi	r24, 0xF4	; 244
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	24 ef       	ldi	r18, 0xF4	; 244
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	f9 01       	movw	r30, r18
    14e2:	20 81       	ld	r18, Z
    14e4:	21 60       	ori	r18, 0x01	; 1
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
          Can_config_rx();       
    14ea:	8f ee       	ldi	r24, 0xEF	; 239
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	2f ee       	ldi	r18, 0xEF	; 239
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 81       	ld	r18, Z
    14f6:	2f 73       	andi	r18, 0x3F	; 63
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
    14fc:	8f ee       	ldi	r24, 0xEF	; 239
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	2f ee       	ldi	r18, 0xEF	; 239
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	f9 01       	movw	r30, r18
    1506:	20 81       	ld	r18, Z
    1508:	20 68       	ori	r18, 0x80	; 128
    150a:	fc 01       	movw	r30, r24
    150c:	20 83       	st	Z, r18
          break;
    150e:	1c c2       	rjmp	.+1080   	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	13 c0       	rjmp	.+38     	; 0x153a <__stack+0xc3b>
    1514:	8a ef       	ldi	r24, 0xFA	; 250
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	29 85       	ldd	r18, Y+9	; 0x09
    151a:	3a 85       	ldd	r19, Y+10	; 0x0a
    151c:	f9 01       	movw	r30, r18
    151e:	47 81       	ldd	r20, Z+7	; 0x07
    1520:	50 85       	ldd	r21, Z+8	; 0x08
    1522:	29 81       	ldd	r18, Y+1	; 0x01
    1524:	22 2f       	mov	r18, r18
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	24 0f       	add	r18, r20
    152a:	35 1f       	adc	r19, r21
    152c:	f9 01       	movw	r30, r18
    152e:	20 81       	ld	r18, Z
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	fc 01       	movw	r30, r24
    1540:	96 81       	ldd	r25, Z+6	; 0x06
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	89 17       	cp	r24, r25
    1546:	30 f3       	brcs	.-52     	; 0x1514 <__stack+0xc15>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1548:	1d 82       	std	Y+5, r1	; 0x05
    154a:	1e 82       	std	Y+6, r1	; 0x06
    154c:	1f 82       	std	Y+7, r1	; 0x07
    154e:	18 86       	std	Y+8, r1	; 0x08
    1550:	27 ef       	ldi	r18, 0xF7	; 247
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	ce 01       	movw	r24, r28
    1556:	05 96       	adiw	r24, 0x05	; 5
    1558:	03 96       	adiw	r24, 0x03	; 3
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	44 0f       	add	r20, r20
    1562:	44 0f       	add	r20, r20
    1564:	44 0f       	add	r20, r20
    1566:	ce 01       	movw	r24, r28
    1568:	05 96       	adiw	r24, 0x05	; 5
    156a:	02 96       	adiw	r24, 0x02	; 2
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	82 95       	swap	r24
    1572:	86 95       	lsr	r24
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	84 0f       	add	r24, r20
    1578:	f9 01       	movw	r30, r18
    157a:	80 83       	st	Z, r24
    157c:	26 ef       	ldi	r18, 0xF6	; 246
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	ce 01       	movw	r24, r28
    1582:	05 96       	adiw	r24, 0x05	; 5
    1584:	02 96       	adiw	r24, 0x02	; 2
    1586:	fc 01       	movw	r30, r24
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	44 0f       	add	r20, r20
    158e:	44 0f       	add	r20, r20
    1590:	44 0f       	add	r20, r20
    1592:	ce 01       	movw	r24, r28
    1594:	05 96       	adiw	r24, 0x05	; 5
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	82 95       	swap	r24
    159e:	86 95       	lsr	r24
    15a0:	87 70       	andi	r24, 0x07	; 7
    15a2:	84 0f       	add	r24, r20
    15a4:	f9 01       	movw	r30, r18
    15a6:	80 83       	st	Z, r24
    15a8:	25 ef       	ldi	r18, 0xF5	; 245
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	ce 01       	movw	r24, r28
    15ae:	05 96       	adiw	r24, 0x05	; 5
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	fc 01       	movw	r30, r24
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	44 0f       	add	r20, r20
    15ba:	44 0f       	add	r20, r20
    15bc:	44 0f       	add	r20, r20
    15be:	ce 01       	movw	r24, r28
    15c0:	05 96       	adiw	r24, 0x05	; 5
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	82 95       	swap	r24
    15c8:	86 95       	lsr	r24
    15ca:	87 70       	andi	r24, 0x07	; 7
    15cc:	84 0f       	add	r24, r20
    15ce:	f9 01       	movw	r30, r18
    15d0:	80 83       	st	Z, r24
    15d2:	84 ef       	ldi	r24, 0xF4	; 244
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9e 01       	movw	r18, r28
    15d8:	2b 5f       	subi	r18, 0xFB	; 251
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	22 0f       	add	r18, r18
    15e2:	22 0f       	add	r18, r18
    15e4:	22 0f       	add	r18, r18
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    15ea:	8f ee       	ldi	r24, 0xEF	; 239
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2f ee       	ldi	r18, 0xEF	; 239
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	40 81       	ld	r20, Z
    15f6:	29 85       	ldd	r18, Y+9	; 0x09
    15f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15fa:	f9 01       	movw	r30, r18
    15fc:	26 81       	ldd	r18, Z+6	; 0x06
    15fe:	24 2b       	or	r18, r20
    1600:	fc 01       	movw	r30, r24
    1602:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	fc 01       	movw	r30, r24
    160c:	22 87       	std	Z+10, r18	; 0x0a
    160e:	84 ef       	ldi	r24, 0xF4	; 244
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	24 ef       	ldi	r18, 0xF4	; 244
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	f9 01       	movw	r30, r18
    1618:	20 81       	ld	r18, Z
    161a:	24 60       	ori	r18, 0x04	; 4
    161c:	fc 01       	movw	r30, r24
    161e:	20 83       	st	Z, r18
    1620:	80 ef       	ldi	r24, 0xF0	; 240
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	20 ef       	ldi	r18, 0xF0	; 240
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	24 60       	ori	r18, 0x04	; 4
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
          Can_set_rplv();
    1632:	8f ee       	ldi	r24, 0xEF	; 239
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	2f ee       	ldi	r18, 0xEF	; 239
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	f9 01       	movw	r30, r18
    163c:	20 81       	ld	r18, Z
    163e:	20 62       	ori	r18, 0x20	; 32
    1640:	fc 01       	movw	r30, r24
    1642:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1644:	84 ef       	ldi	r24, 0xF4	; 244
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	24 ef       	ldi	r18, 0xF4	; 244
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	f9 01       	movw	r30, r18
    164e:	20 81       	ld	r18, Z
    1650:	2e 7f       	andi	r18, 0xFE	; 254
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
          Can_config_rx();       
    1656:	8f ee       	ldi	r24, 0xEF	; 239
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	2f ee       	ldi	r18, 0xEF	; 239
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	f9 01       	movw	r30, r18
    1660:	20 81       	ld	r18, Z
    1662:	2f 73       	andi	r18, 0x3F	; 63
    1664:	fc 01       	movw	r30, r24
    1666:	20 83       	st	Z, r18
    1668:	8f ee       	ldi	r24, 0xEF	; 239
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	2f ee       	ldi	r18, 0xEF	; 239
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	f9 01       	movw	r30, r18
    1672:	20 81       	ld	r18, Z
    1674:	20 68       	ori	r18, 0x80	; 128
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
          break;
    167a:	66 c1       	rjmp	.+716    	; 0x1948 <__stack+0x1049>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	fc 01       	movw	r30, r24
    1682:	83 85       	ldd	r24, Z+11	; 0x0b
    1684:	88 23       	and	r24, r24
    1686:	09 f4       	brne	.+2      	; 0x168a <__stack+0xd8b>
    1688:	69 c0       	rjmp	.+210    	; 0x175c <__stack+0xe5d>
    168a:	83 ef       	ldi	r24, 0xF3	; 243
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	29 85       	ldd	r18, Y+9	; 0x09
    1690:	3a 85       	ldd	r19, Y+10	; 0x0a
    1692:	2e 5f       	subi	r18, 0xFE	; 254
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	2d 5f       	subi	r18, 0xFD	; 253
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	f9 01       	movw	r30, r18
    169c:	20 81       	ld	r18, Z
    169e:	42 2f       	mov	r20, r18
    16a0:	44 0f       	add	r20, r20
    16a2:	44 0f       	add	r20, r20
    16a4:	44 0f       	add	r20, r20
    16a6:	29 85       	ldd	r18, Y+9	; 0x09
    16a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16aa:	2e 5f       	subi	r18, 0xFE	; 254
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	2e 5f       	subi	r18, 0xFE	; 254
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	f9 01       	movw	r30, r18
    16b4:	20 81       	ld	r18, Z
    16b6:	22 95       	swap	r18
    16b8:	26 95       	lsr	r18
    16ba:	27 70       	andi	r18, 0x07	; 7
    16bc:	24 0f       	add	r18, r20
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18
    16c2:	82 ef       	ldi	r24, 0xF2	; 242
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	29 85       	ldd	r18, Y+9	; 0x09
    16c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ca:	2e 5f       	subi	r18, 0xFE	; 254
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	2e 5f       	subi	r18, 0xFE	; 254
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	42 2f       	mov	r20, r18
    16d8:	44 0f       	add	r20, r20
    16da:	44 0f       	add	r20, r20
    16dc:	44 0f       	add	r20, r20
    16de:	29 85       	ldd	r18, Y+9	; 0x09
    16e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e2:	2e 5f       	subi	r18, 0xFE	; 254
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	2f 5f       	subi	r18, 0xFF	; 255
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	f9 01       	movw	r30, r18
    16ec:	20 81       	ld	r18, Z
    16ee:	22 95       	swap	r18
    16f0:	26 95       	lsr	r18
    16f2:	27 70       	andi	r18, 0x07	; 7
    16f4:	24 0f       	add	r18, r20
    16f6:	fc 01       	movw	r30, r24
    16f8:	20 83       	st	Z, r18
    16fa:	81 ef       	ldi	r24, 0xF1	; 241
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	29 85       	ldd	r18, Y+9	; 0x09
    1700:	3a 85       	ldd	r19, Y+10	; 0x0a
    1702:	2e 5f       	subi	r18, 0xFE	; 254
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	2f 5f       	subi	r18, 0xFF	; 255
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	f9 01       	movw	r30, r18
    170c:	20 81       	ld	r18, Z
    170e:	42 2f       	mov	r20, r18
    1710:	44 0f       	add	r20, r20
    1712:	44 0f       	add	r20, r20
    1714:	44 0f       	add	r20, r20
    1716:	29 85       	ldd	r18, Y+9	; 0x09
    1718:	3a 85       	ldd	r19, Y+10	; 0x0a
    171a:	2e 5f       	subi	r18, 0xFE	; 254
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	f9 01       	movw	r30, r18
    1720:	20 81       	ld	r18, Z
    1722:	22 95       	swap	r18
    1724:	26 95       	lsr	r18
    1726:	27 70       	andi	r18, 0x07	; 7
    1728:	24 0f       	add	r18, r20
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
    172e:	80 ef       	ldi	r24, 0xF0	; 240
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	29 85       	ldd	r18, Y+9	; 0x09
    1734:	3a 85       	ldd	r19, Y+10	; 0x0a
    1736:	2e 5f       	subi	r18, 0xFE	; 254
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	f9 01       	movw	r30, r18
    173c:	20 81       	ld	r18, Z
    173e:	22 0f       	add	r18, r18
    1740:	22 0f       	add	r18, r18
    1742:	22 0f       	add	r18, r18
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
    1748:	8f ee       	ldi	r24, 0xEF	; 239
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	2f ee       	ldi	r18, 0xEF	; 239
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	20 61       	ori	r18, 0x10	; 16
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
    175a:	30 c0       	rjmp	.+96     	; 0x17bc <__stack+0xebd>
          else              { Can_set_std_id(cmd->id.std);}
    175c:	83 ef       	ldi	r24, 0xF3	; 243
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	29 85       	ldd	r18, Y+9	; 0x09
    1762:	3a 85       	ldd	r19, Y+10	; 0x0a
    1764:	2e 5f       	subi	r18, 0xFE	; 254
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	f9 01       	movw	r30, r18
    176e:	20 81       	ld	r18, Z
    1770:	42 2f       	mov	r20, r18
    1772:	42 95       	swap	r20
    1774:	44 0f       	add	r20, r20
    1776:	40 7e       	andi	r20, 0xE0	; 224
    1778:	29 85       	ldd	r18, Y+9	; 0x09
    177a:	3a 85       	ldd	r19, Y+10	; 0x0a
    177c:	2e 5f       	subi	r18, 0xFE	; 254
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	f9 01       	movw	r30, r18
    1782:	20 81       	ld	r18, Z
    1784:	26 95       	lsr	r18
    1786:	26 95       	lsr	r18
    1788:	26 95       	lsr	r18
    178a:	24 0f       	add	r18, r20
    178c:	fc 01       	movw	r30, r24
    178e:	20 83       	st	Z, r18
    1790:	82 ef       	ldi	r24, 0xF2	; 242
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	29 85       	ldd	r18, Y+9	; 0x09
    1796:	3a 85       	ldd	r19, Y+10	; 0x0a
    1798:	2e 5f       	subi	r18, 0xFE	; 254
    179a:	3f 4f       	sbci	r19, 0xFF	; 255
    179c:	f9 01       	movw	r30, r18
    179e:	20 81       	ld	r18, Z
    17a0:	22 95       	swap	r18
    17a2:	22 0f       	add	r18, r18
    17a4:	20 7e       	andi	r18, 0xE0	; 224
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 83       	st	Z, r18
    17aa:	8f ee       	ldi	r24, 0xEF	; 239
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	2f ee       	ldi	r18, 0xEF	; 239
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	f9 01       	movw	r30, r18
    17b4:	20 81       	ld	r18, Z
    17b6:	2f 7e       	andi	r18, 0xEF	; 239
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	13 c0       	rjmp	.+38     	; 0x17e6 <__stack+0xee7>
    17c0:	8a ef       	ldi	r24, 0xFA	; 250
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	29 85       	ldd	r18, Y+9	; 0x09
    17c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17c8:	f9 01       	movw	r30, r18
    17ca:	47 81       	ldd	r20, Z+7	; 0x07
    17cc:	50 85       	ldd	r21, Z+8	; 0x08
    17ce:	29 81       	ldd	r18, Y+1	; 0x01
    17d0:	22 2f       	mov	r18, r18
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	24 0f       	add	r18, r20
    17d6:	35 1f       	adc	r19, r21
    17d8:	f9 01       	movw	r30, r18
    17da:	20 81       	ld	r18, Z
    17dc:	fc 01       	movw	r30, r24
    17de:	20 83       	st	Z, r18
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	fc 01       	movw	r30, r24
    17ec:	96 81       	ldd	r25, Z+6	; 0x06
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	89 17       	cp	r24, r25
    17f2:	30 f3       	brcs	.-52     	; 0x17c0 <__stack+0xec1>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	dc 01       	movw	r26, r24
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	af 83       	std	Y+7, r26	; 0x07
    1800:	b8 87       	std	Y+8, r27	; 0x08
    1802:	27 ef       	ldi	r18, 0xF7	; 247
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	ce 01       	movw	r24, r28
    1808:	05 96       	adiw	r24, 0x05	; 5
    180a:	03 96       	adiw	r24, 0x03	; 3
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	44 0f       	add	r20, r20
    1814:	44 0f       	add	r20, r20
    1816:	44 0f       	add	r20, r20
    1818:	ce 01       	movw	r24, r28
    181a:	05 96       	adiw	r24, 0x05	; 5
    181c:	02 96       	adiw	r24, 0x02	; 2
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	82 95       	swap	r24
    1824:	86 95       	lsr	r24
    1826:	87 70       	andi	r24, 0x07	; 7
    1828:	84 0f       	add	r24, r20
    182a:	f9 01       	movw	r30, r18
    182c:	80 83       	st	Z, r24
    182e:	26 ef       	ldi	r18, 0xF6	; 246
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	ce 01       	movw	r24, r28
    1834:	05 96       	adiw	r24, 0x05	; 5
    1836:	02 96       	adiw	r24, 0x02	; 2
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	44 0f       	add	r20, r20
    1840:	44 0f       	add	r20, r20
    1842:	44 0f       	add	r20, r20
    1844:	ce 01       	movw	r24, r28
    1846:	05 96       	adiw	r24, 0x05	; 5
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	fc 01       	movw	r30, r24
    184c:	80 81       	ld	r24, Z
    184e:	82 95       	swap	r24
    1850:	86 95       	lsr	r24
    1852:	87 70       	andi	r24, 0x07	; 7
    1854:	84 0f       	add	r24, r20
    1856:	f9 01       	movw	r30, r18
    1858:	80 83       	st	Z, r24
    185a:	25 ef       	ldi	r18, 0xF5	; 245
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	ce 01       	movw	r24, r28
    1860:	05 96       	adiw	r24, 0x05	; 5
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	44 0f       	add	r20, r20
    186c:	44 0f       	add	r20, r20
    186e:	44 0f       	add	r20, r20
    1870:	ce 01       	movw	r24, r28
    1872:	05 96       	adiw	r24, 0x05	; 5
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	82 95       	swap	r24
    187a:	86 95       	lsr	r24
    187c:	87 70       	andi	r24, 0x07	; 7
    187e:	84 0f       	add	r24, r20
    1880:	f9 01       	movw	r30, r18
    1882:	80 83       	st	Z, r24
    1884:	84 ef       	ldi	r24, 0xF4	; 244
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9e 01       	movw	r18, r28
    188a:	2b 5f       	subi	r18, 0xFB	; 251
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	22 0f       	add	r18, r18
    1894:	22 0f       	add	r18, r18
    1896:	22 0f       	add	r18, r18
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    189c:	8f ee       	ldi	r24, 0xEF	; 239
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	2f ee       	ldi	r18, 0xEF	; 239
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	f9 01       	movw	r30, r18
    18a6:	40 81       	ld	r20, Z
    18a8:	29 85       	ldd	r18, Y+9	; 0x09
    18aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ac:	f9 01       	movw	r30, r18
    18ae:	26 81       	ldd	r18, Z+6	; 0x06
    18b0:	24 2b       	or	r18, r20
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	fc 01       	movw	r30, r24
    18be:	22 87       	std	Z+10, r18	; 0x0a
    18c0:	84 ef       	ldi	r24, 0xF4	; 244
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	24 ef       	ldi	r18, 0xF4	; 244
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	f9 01       	movw	r30, r18
    18ca:	20 81       	ld	r18, Z
    18cc:	24 60       	ori	r18, 0x04	; 4
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18
    18d2:	80 ef       	ldi	r24, 0xF0	; 240
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	20 ef       	ldi	r18, 0xF0	; 240
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	f9 01       	movw	r30, r18
    18dc:	20 81       	ld	r18, Z
    18de:	24 60       	ori	r18, 0x04	; 4
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
          Can_set_rplv();
    18e4:	8f ee       	ldi	r24, 0xEF	; 239
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2f ee       	ldi	r18, 0xEF	; 239
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	f9 01       	movw	r30, r18
    18ee:	20 81       	ld	r18, Z
    18f0:	20 62       	ori	r18, 0x20	; 32
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 83       	st	Z, r18
          Can_set_idemsk();
    18f6:	84 ef       	ldi	r24, 0xF4	; 244
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	24 ef       	ldi	r18, 0xF4	; 244
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	f9 01       	movw	r30, r18
    1900:	20 81       	ld	r18, Z
    1902:	21 60       	ori	r18, 0x01	; 1
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
          Can_config_rx();       
    1908:	8f ee       	ldi	r24, 0xEF	; 239
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	2f ee       	ldi	r18, 0xEF	; 239
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	2f 73       	andi	r18, 0x3F	; 63
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
    191a:	8f ee       	ldi	r24, 0xEF	; 239
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	2f ee       	ldi	r18, 0xEF	; 239
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	f9 01       	movw	r30, r18
    1924:	20 81       	ld	r18, Z
    1926:	20 68       	ori	r18, 0x80	; 128
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
          break;
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <__stack+0x1049>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	fc 01       	movw	r30, r24
    1934:	11 86       	std	Z+9, r1	; 0x09
          break;
    1936:	00 00       	nop
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <__stack+0x1049>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	2f e1       	ldi	r18, 0x1F	; 31
    1940:	fc 01       	movw	r30, r24
    1942:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	01 c0       	rjmp	.+2      	; 0x194a <__stack+0x104b>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1948:	80 e0       	ldi	r24, 0x00	; 0
}
    194a:	2a 96       	adiw	r28, 0x0a	; 10
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <can_get_status+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <can_get_status+0x8>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	fc 01       	movw	r30, r24
    1972:	81 85       	ldd	r24, Z+9	; 0x09
    1974:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	88 23       	and	r24, r24
    197a:	31 f0       	breq	.+12     	; 0x1988 <can_get_status+0x2c>
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	8f 31       	cpi	r24, 0x1F	; 31
    1980:	19 f0       	breq	.+6      	; 0x1988 <can_get_status+0x2c>
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	8f 3f       	cpi	r24, 0xFF	; 255
    1986:	11 f4       	brne	.+4      	; 0x198c <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	14 c1       	rjmp	.+552    	; 0x1bb4 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    198c:	8d ee       	ldi	r24, 0xED	; 237
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	f9 01       	movw	r30, r18
    1996:	20 81       	ld	r18, Z
    1998:	22 95       	swap	r18
    199a:	20 7f       	andi	r18, 0xF0	; 240
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    19a0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <can_get_mob_status>
    19a4:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	80 32       	cpi	r24, 0x20	; 32
    19ae:	91 05       	cpc	r25, r1
    19b0:	89 f0       	breq	.+34     	; 0x19d4 <can_get_status+0x78>
    19b2:	81 32       	cpi	r24, 0x21	; 33
    19b4:	91 05       	cpc	r25, r1
    19b6:	1c f4       	brge	.+6      	; 0x19be <can_get_status+0x62>
    19b8:	89 2b       	or	r24, r25
    19ba:	49 f0       	breq	.+18     	; 0x19ce <can_get_status+0x72>
    19bc:	e5 c0       	rjmp	.+458    	; 0x1b88 <can_get_status+0x22c>
    19be:	80 34       	cpi	r24, 0x40	; 64
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <can_get_status+0x6a>
    19c4:	cd c0       	rjmp	.+410    	; 0x1b60 <can_get_status+0x204>
    19c6:	80 3a       	cpi	r24, 0xA0	; 160
    19c8:	91 05       	cpc	r25, r1
    19ca:	21 f0       	breq	.+8      	; 0x19d4 <can_get_status+0x78>
    19cc:	dd c0       	rjmp	.+442    	; 0x1b88 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
            break;
    19d2:	ef c0       	rjmp	.+478    	; 0x1bb2 <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    19d4:	8f ee       	ldi	r24, 0xEF	; 239
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	80 81       	ld	r24, Z
    19dc:	28 2f       	mov	r18, r24
    19de:	2f 70       	andi	r18, 0x0F	; 15
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	fc 01       	movw	r30, r24
    19e6:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	fc 01       	movw	r30, r24
    19ee:	87 81       	ldd	r24, Z+7	; 0x07
    19f0:	90 85       	ldd	r25, Z+8	; 0x08
    19f2:	0e 94 ad 01 	call	0x35a	; 0x35a <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    19f6:	80 ef       	ldi	r24, 0xF0	; 240
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	84 70       	andi	r24, 0x04	; 4
    1a04:	99 27       	eor	r25, r25
    1a06:	95 95       	asr	r25
    1a08:	87 95       	ror	r24
    1a0a:	95 95       	asr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	89 2b       	or	r24, r25
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <can_get_status+0xba>
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1a1e:	8f ee       	ldi	r24, 0xEF	; 239
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	80 71       	andi	r24, 0x10	; 16
    1a2c:	99 27       	eor	r25, r25
    1a2e:	95 95       	asr	r25
    1a30:	87 95       	ror	r24
    1a32:	95 95       	asr	r25
    1a34:	87 95       	ror	r24
    1a36:	95 95       	asr	r25
    1a38:	87 95       	ror	r24
    1a3a:	95 95       	asr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	89 2b       	or	r24, r25
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <can_get_status+0xe8>
    1a42:	54 c0       	rjmp	.+168    	; 0x1aec <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	02 96       	adiw	r24, 0x02	; 2
    1a54:	03 96       	adiw	r24, 0x03	; 3
    1a56:	23 ef       	ldi	r18, 0xF3	; 243
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	20 81       	ld	r18, Z
    1a5e:	26 95       	lsr	r18
    1a60:	26 95       	lsr	r18
    1a62:	26 95       	lsr	r18
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	02 96       	adiw	r24, 0x02	; 2
    1a6e:	02 96       	adiw	r24, 0x02	; 2
    1a70:	22 ef       	ldi	r18, 0xF2	; 242
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	f9 01       	movw	r30, r18
    1a76:	20 81       	ld	r18, Z
    1a78:	42 2f       	mov	r20, r18
    1a7a:	46 95       	lsr	r20
    1a7c:	46 95       	lsr	r20
    1a7e:	46 95       	lsr	r20
    1a80:	23 ef       	ldi	r18, 0xF3	; 243
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	22 95       	swap	r18
    1a8a:	22 0f       	add	r18, r18
    1a8c:	20 7e       	andi	r18, 0xE0	; 224
    1a8e:	24 0f       	add	r18, r20
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	21 ef       	ldi	r18, 0xF1	; 241
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	20 81       	ld	r18, Z
    1aa4:	42 2f       	mov	r20, r18
    1aa6:	46 95       	lsr	r20
    1aa8:	46 95       	lsr	r20
    1aaa:	46 95       	lsr	r20
    1aac:	22 ef       	ldi	r18, 0xF2	; 242
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	20 81       	ld	r18, Z
    1ab4:	22 95       	swap	r18
    1ab6:	22 0f       	add	r18, r18
    1ab8:	20 7e       	andi	r18, 0xE0	; 224
    1aba:	24 0f       	add	r18, r20
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	02 96       	adiw	r24, 0x02	; 2
    1ac6:	20 ef       	ldi	r18, 0xF0	; 240
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	f9 01       	movw	r30, r18
    1acc:	20 81       	ld	r18, Z
    1ace:	42 2f       	mov	r20, r18
    1ad0:	46 95       	lsr	r20
    1ad2:	46 95       	lsr	r20
    1ad4:	46 95       	lsr	r20
    1ad6:	21 ef       	ldi	r18, 0xF1	; 241
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	f9 01       	movw	r30, r18
    1adc:	20 81       	ld	r18, Z
    1ade:	22 95       	swap	r18
    1ae0:	22 0f       	add	r18, r18
    1ae2:	20 7e       	andi	r18, 0xE0	; 224
    1ae4:	24 0f       	add	r18, r20
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 83       	st	Z, r18
    1aea:	26 c0       	rjmp	.+76     	; 0x1b38 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	fc 01       	movw	r30, r24
    1af2:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	02 96       	adiw	r24, 0x02	; 2
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	23 ef       	ldi	r18, 0xF3	; 243
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	f9 01       	movw	r30, r18
    1b02:	20 81       	ld	r18, Z
    1b04:	22 95       	swap	r18
    1b06:	26 95       	lsr	r18
    1b08:	27 70       	andi	r18, 0x07	; 7
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	02 96       	adiw	r24, 0x02	; 2
    1b14:	22 ef       	ldi	r18, 0xF2	; 242
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	42 2f       	mov	r20, r18
    1b1e:	42 95       	swap	r20
    1b20:	46 95       	lsr	r20
    1b22:	47 70       	andi	r20, 0x07	; 7
    1b24:	23 ef       	ldi	r18, 0xF3	; 243
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	20 81       	ld	r18, Z
    1b2c:	22 0f       	add	r18, r18
    1b2e:	22 0f       	add	r18, r18
    1b30:	22 0f       	add	r18, r18
    1b32:	24 0f       	add	r18, r20
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b3e:	fc 01       	movw	r30, r24
    1b40:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b42:	8f ee       	ldi	r24, 0xEF	; 239
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	2f ee       	ldi	r18, 0xEF	; 239
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	20 81       	ld	r18, Z
    1b4e:	2f 73       	andi	r18, 0x3F	; 63
    1b50:	fc 01       	movw	r30, r24
    1b52:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b54:	8e ee       	ldi	r24, 0xEE	; 238
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	fc 01       	movw	r30, r24
    1b5a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1b5c:	19 82       	std	Y+1, r1	; 0x01
            break;
    1b5e:	29 c0       	rjmp	.+82     	; 0x1bb2 <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	2a 81       	ldd	r18, Y+2	; 0x02
    1b66:	fc 01       	movw	r30, r24
    1b68:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b6a:	8f ee       	ldi	r24, 0xEF	; 239
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	2f ee       	ldi	r18, 0xEF	; 239
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	f9 01       	movw	r30, r18
    1b74:	20 81       	ld	r18, Z
    1b76:	2f 73       	andi	r18, 0x3F	; 63
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b7c:	8e ee       	ldi	r24, 0xEE	; 238
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	fc 01       	movw	r30, r24
    1b82:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1b84:	19 82       	std	Y+1, r1	; 0x01
            break;
    1b86:	15 c0       	rjmp	.+42     	; 0x1bb2 <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8e:	fc 01       	movw	r30, r24
    1b90:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b92:	8f ee       	ldi	r24, 0xEF	; 239
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	2f ee       	ldi	r18, 0xEF	; 239
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	2f 73       	andi	r18, 0x3F	; 63
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ba4:	8e ee       	ldi	r24, 0xEE	; 238
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	fc 01       	movw	r30, r24
    1baa:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	89 83       	std	Y+1, r24	; 0x01
            break;
    1bb0:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <chip_init>:
 */ 

#include "chip.h"

void chip_init (void)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
    1bca:	81 e6       	ldi	r24, 0x61	; 97
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	20 e8       	ldi	r18, 0x80	; 128
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 83       	st	Z, r18
	CLKPR = 0x00;
    1bd4:	81 e6       	ldi	r24, 0x61	; 97
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	fc 01       	movw	r30, r24
    1bda:	10 82       	st	Z, r1
	
	// leds at pb5 (led2) and pb6 (led3), active high
	// leds are off
	LEDS |= (1 << CPC1017)|(1 << LED2)|(1 << LED3);
    1bdc:	84 e2       	ldi	r24, 0x24	; 36
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	24 e2       	ldi	r18, 0x24	; 36
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	f9 01       	movw	r30, r18
    1be6:	20 81       	ld	r18, Z
    1be8:	28 66       	ori	r18, 0x68	; 104
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
	
	LED2_OFF;
    1bee:	85 e2       	ldi	r24, 0x25	; 37
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	25 e2       	ldi	r18, 0x25	; 37
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	2f 7d       	andi	r18, 0xDF	; 223
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
	LED3_OFF;
    1c00:	85 e2       	ldi	r24, 0x25	; 37
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	25 e2       	ldi	r18, 0x25	; 37
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	20 81       	ld	r18, Z
    1c0c:	2f 7b       	andi	r18, 0xBF	; 191
    1c0e:	fc 01       	movw	r30, r24
    1c10:	20 83       	st	Z, r18
	CPC1017_OFF;
    1c12:	85 e2       	ldi	r24, 0x25	; 37
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	25 e2       	ldi	r18, 0x25	; 37
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	20 81       	ld	r18, Z
    1c1e:	27 7f       	andi	r18, 0xF7	; 247
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
	
	// spi
	LEDS |= (1 << SPI_MOSI)|(1 << SPI_SCK);
    1c24:	84 e2       	ldi	r24, 0x24	; 36
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	24 e2       	ldi	r18, 0x24	; 36
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	f9 01       	movw	r30, r18
    1c2e:	20 81       	ld	r18, Z
    1c30:	22 68       	ori	r18, 0x82	; 130
    1c32:	fc 01       	movw	r30, r24
    1c34:	20 83       	st	Z, r18
	// spi ss
	DDRD |= (1 << SPI_SS);
    1c36:	8a e2       	ldi	r24, 0x2A	; 42
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	2a e2       	ldi	r18, 0x2A	; 42
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	f9 01       	movw	r30, r18
    1c40:	20 81       	ld	r18, Z
    1c42:	20 62       	ori	r18, 0x20	; 32
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18
	SPI_SS_DESELECT;
    1c48:	8b e2       	ldi	r24, 0x2B	; 43
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2b e2       	ldi	r18, 0x2B	; 43
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	20 62       	ori	r18, 0x20	; 32
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
	
	// probe heater, output
	DDRC |= (1 << HEATER_PIN);
    1c5a:	87 e2       	ldi	r24, 0x27	; 39
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	27 e2       	ldi	r18, 0x27	; 39
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	20 81       	ld	r18, Z
    1c66:	22 60       	ori	r18, 0x02	; 2
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 83       	st	Z, r18
    1c6c:	00 00       	nop
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <cj125_read_diag>:
{
	return spi_read_write(CJ125_IDENT_REG_REQUEST);
}

uint16_t cj125_read_diag (void)
{
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	return spi_read_write(CJ125_DIAG_REG_REQUEST);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	98 e7       	ldi	r25, 0x78	; 120
    1c80:	0e 94 8b 11 	call	0x2316	; 0x2316 <spi_read_write>
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	08 95       	ret

00001c8a <cj125_set_calibration_mode>:

void cj125_set_calibration_mode (void)
{
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	spi_read_write(CJ125_INIT_REG1_MODE_CALIBRATE);
    1c92:	8d e9       	ldi	r24, 0x9D	; 157
    1c94:	96 e5       	ldi	r25, 0x56	; 86
    1c96:	0e 94 8b 11 	call	0x2316	; 0x2316 <spi_read_write>
}
    1c9a:	00 00       	nop
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <cj125_end_calibration_mode_v8>:

void cj125_end_calibration_mode_v8 (void)
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	spi_read_write(CJ125_INIT_REG1_MODE_NORMAL_V8);
    1caa:	88 e8       	ldi	r24, 0x88	; 136
    1cac:	96 e5       	ldi	r25, 0x56	; 86
    1cae:	0e 94 8b 11 	call	0x2316	; 0x2316 <spi_read_write>
}
    1cb2:	00 00       	nop
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <dac_init>:
 */ 

#include "dac.h"

void dac_init (void)
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
    1cc2:	80 e9       	ldi	r24, 0x90	; 144
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	23 e0       	ldi	r18, 0x03	; 3
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 83       	st	Z, r18
}
    1ccc:	00 00       	nop
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <is_between>:

bool is_ubat_ok (void)
{
	inputs.UBat=adc_ad12v();
	return inputs.UBat_OK = is_between(UBat_MIN, UBat_MAX, inputs.UBat);
}
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <is_between+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <is_between+0x8>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <is_between+0xa>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	7c 83       	std	Y+4, r23	; 0x04
    1ce8:	6b 83       	std	Y+3, r22	; 0x03
    1cea:	5e 83       	std	Y+6, r21	; 0x06
    1cec:	4d 83       	std	Y+5, r20	; 0x05
    1cee:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	82 17       	cp	r24, r18
    1cf8:	93 07       	cpc	r25, r19
    1cfa:	48 f4       	brcc	.+18     	; 0x1d0e <is_between+0x3a>
    1cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	28 17       	cp	r18, r24
    1d06:	39 07       	cpc	r19, r25
    1d08:	10 f4       	brcc	.+4      	; 0x1d0e <is_between+0x3a>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <is_between+0x3c>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <gpio_read_inputs>:
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <gpio_read_inputs+0x6>
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	0e 94 cd 00 	call	0x19a	; 0x19a <adc_ua>
    1d34:	9c 01       	movw	r18, r24
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	31 83       	std	Z+1, r19	; 0x01
    1d3e:	20 83       	st	Z, r18
    1d40:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <adc_ur>
    1d44:	9c 01       	movw	r18, r24
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	35 83       	std	Z+5, r19	; 0x05
    1d4e:	24 83       	std	Z+4, r18	; 0x04
    1d50:	0e 94 83 00 	call	0x106	; 0x106 <adc_ad12v>
    1d54:	9c 01       	movw	r18, r24
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	31 87       	std	Z+9, r19	; 0x09
    1d5e:	20 87       	std	Z+8, r18	; 0x08
    1d60:	0e 94 a8 00 	call	0x150	; 0x150 <adc_reference>
    1d64:	9c 01       	movw	r18, r24
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	88 e8       	ldi	r24, 0x88	; 136
    1d6c:	93 e1       	ldi	r25, 0x13	; 19
    1d6e:	dc 01       	movw	r26, r24
    1d70:	0e 94 c1 13 	call	0x2782	; 0x2782 <__muluhisi3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	07 2e       	mov	r0, r23
    1d7a:	7a e0       	ldi	r23, 0x0A	; 10
    1d7c:	b6 95       	lsr	r27
    1d7e:	a7 95       	ror	r26
    1d80:	97 95       	ror	r25
    1d82:	87 95       	ror	r24
    1d84:	7a 95       	dec	r23
    1d86:	d1 f7       	brne	.-12     	; 0x1d7c <gpio_read_inputs+0x5a>
    1d88:	70 2d       	mov	r23, r0
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	fc 01       	movw	r30, r24
    1d92:	33 87       	std	Z+11, r19	; 0x0b
    1d94:	22 87       	std	Z+10, r18	; 0x0a
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	80 85       	ldd	r24, Z+8	; 0x08
    1d9e:	91 85       	ldd	r25, Z+9	; 0x09
    1da0:	ac 01       	movw	r20, r24
    1da2:	60 eb       	ldi	r22, 0xB0	; 176
    1da4:	72 e0       	ldi	r23, 0x02	; 2
    1da6:	84 ec       	ldi	r24, 0xC4	; 196
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <is_between>
    1dae:	28 2f       	mov	r18, r24
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	fc 01       	movw	r30, r24
    1db6:	24 87       	std	Z+12, r18	; 0x0c
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	82 85       	ldd	r24, Z+10	; 0x0a
    1dc0:	93 85       	ldd	r25, Z+11	; 0x0b
    1dc2:	29 ec       	ldi	r18, 0xC9	; 201
    1dc4:	34 e0       	ldi	r19, 0x04	; 4
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	39 0b       	sbc	r19, r25
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	fc 01       	movw	r30, r24
    1dd0:	36 87       	std	Z+14, r19	; 0x0e
    1dd2:	25 87       	std	Z+13, r18	; 0x0d
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	fc 01       	movw	r30, r24
    1dda:	80 85       	ldd	r24, Z+8	; 0x08
    1ddc:	91 85       	ldd	r25, Z+9	; 0x09
    1dde:	29 81       	ldd	r18, Y+1	; 0x01
    1de0:	3a 81       	ldd	r19, Y+2	; 0x02
    1de2:	f9 01       	movw	r30, r18
    1de4:	25 85       	ldd	r18, Z+13	; 0x0d
    1de6:	36 85       	ldd	r19, Z+14	; 0x0e
    1de8:	82 0f       	add	r24, r18
    1dea:	93 1f       	adc	r25, r19
    1dec:	9c 01       	movw	r18, r24
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	84 eb       	ldi	r24, 0xB4	; 180
    1df4:	9f e5       	ldi	r25, 0x5F	; 95
    1df6:	dc 01       	movw	r26, r24
    1df8:	0e 94 c1 13 	call	0x2782	; 0x2782 <__muluhisi3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	07 2e       	mov	r0, r23
    1e02:	7a e0       	ldi	r23, 0x0A	; 10
    1e04:	b6 95       	lsr	r27
    1e06:	a7 95       	ror	r26
    1e08:	97 95       	ror	r25
    1e0a:	87 95       	ror	r24
    1e0c:	7a 95       	dec	r23
    1e0e:	d1 f7       	brne	.-12     	; 0x1e04 <gpio_read_inputs+0xe2>
    1e10:	70 2d       	mov	r23, r0
    1e12:	9c 01       	movw	r18, r24
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	fc 01       	movw	r30, r24
    1e1a:	30 8b       	std	Z+16, r19	; 0x10
    1e1c:	27 87       	std	Z+15, r18	; 0x0f
    1e1e:	00 00       	nop
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <calculate_pwm_for_voltage>:

uint16_t calculate_pwm_for_voltage (uint16_t voltage)
{	
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <calculate_pwm_for_voltage+0xe>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	return (uint16_t) ((float)voltage/inputs.USupply*1024.0);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	cc 01       	movw	r24, r24
    1e46:	a0 e0       	ldi	r26, 0x00	; 0
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatunsisf>
    1e52:	6b 01       	movw	r12, r22
    1e54:	7c 01       	movw	r14, r24
    1e56:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
    1e5a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
    1e5e:	09 2e       	mov	r0, r25
    1e60:	00 0c       	add	r0, r0
    1e62:	aa 0b       	sbc	r26, r26
    1e64:	bb 0b       	sbc	r27, r27
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 b3 12 	call	0x2566	; 0x2566 <__floatsisf>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 01       	movw	r18, r24
    1e74:	ad 01       	movw	r20, r26
    1e76:	c7 01       	movw	r24, r14
    1e78:	b6 01       	movw	r22, r12
    1e7a:	0e 94 10 12 	call	0x2420	; 0x2420 <__divsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 3f 13 	call	0x267e	; 0x267e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	08 95       	ret

00001eb4 <main>:

#include "config.h"
#include "helpers.h"

int main(void)
{
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	a0 97       	sbiw	r28, 0x20	; 32
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
	chip_init();
    1ec8:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <chip_init>
	can_init(1);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <can_init>
	timer_delay_ms(50);
    1ed2:	82 e3       	ldi	r24, 0x32	; 50
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <timer_delay_ms>
	adc_init();
    1eda:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_init>
	dac_init();
    1ede:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <dac_init>
	spi_init();
    1ee2:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <spi_init>
	pwm_init();
    1ee6:	0e 94 32 11 	call	0x2264	; 0x2264 <pwm_init>
	sei();
    1eea:	78 94       	sei
	
	uint16_t cj125_diag;
	uint16_t pwm_duty = 0;
    1eec:	1a 86       	std	Y+10, r1	; 0x0a
    1eee:	19 86       	std	Y+9, r1	; 0x09
	uint16_t timer_value = 0;
    1ef0:	1a 82       	std	Y+2, r1	; 0x02
    1ef2:	19 82       	std	Y+1, r1	; 0x01
	uint16_t heater_voltage = 0;
    1ef4:	1c 82       	std	Y+4, r1	; 0x04
    1ef6:	1b 82       	std	Y+3, r1	; 0x03
	int counter = 0;
    1ef8:	1e 82       	std	Y+6, r1	; 0x06
    1efa:	1d 82       	std	Y+5, r1	; 0x05
	
   	uint8_t pt_data[CAN_DLC];
	st_cmd_t msg;
	msg.id.ext = CAN_ID;
    1efc:	80 e8       	ldi	r24, 0x80	; 128
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	8f 8b       	std	Y+23, r24	; 0x17
    1f06:	98 8f       	std	Y+24, r25	; 0x18
    1f08:	a9 8f       	std	Y+25, r26	; 0x19
    1f0a:	ba 8f       	std	Y+26, r27	; 0x1a
	msg.dlc = CAN_DLC;
    1f0c:	88 e0       	ldi	r24, 0x08	; 8
    1f0e:	8b 8f       	std	Y+27, r24	; 0x1b
	msg.cmd = CMD_TX_DATA;
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	8e 8b       	std	Y+22, r24	; 0x16
	
	// check cj125 diag register after start, if all clear go to INIT:
	switch (cj125_diag = cj125_read_diag())
    1f14:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <cj125_read_diag>
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	8b 87       	std	Y+11, r24	; 0x0b
    1f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f20:	8f 37       	cpi	r24, 0x7F	; 127
    1f22:	28 e2       	ldi	r18, 0x28	; 40
    1f24:	92 07       	cpc	r25, r18
    1f26:	59 f0       	breq	.+22     	; 0x1f3e <main+0x8a>
    1f28:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2a:	e8 e2       	ldi	r30, 0x28	; 40
    1f2c:	9e 07       	cpc	r25, r30
    1f2e:	21 f0       	breq	.+8      	; 0x1f38 <main+0x84>
    1f30:	85 35       	cpi	r24, 0x55	; 85
    1f32:	98 42       	sbci	r25, 0x28	; 40
    1f34:	41 f0       	breq	.+16     	; 0x1f46 <main+0x92>
    1f36:	0b c0       	rjmp	.+22     	; 0x1f4e <main+0x9a>
	{
		case CJ125_DIAG_REG_STATUS_OK:
			state = INIT;
    1f38:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state>
		break;
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <main+0x9a>
		
		case CJ125_DIAG_REG_STATUS_NOSENSOR:
			state = NO_PROBE;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
		break;
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <main+0x9a>
		
		case CJ125_DIAG_REG_STATUS_NOPOWER:
			state = ERROR;
    1f46:	86 e0       	ldi	r24, 0x06	; 6
    1f48:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
		break;
    1f4c:	00 00       	nop
	}
			
    while (1) 
    {
		gpio_read_inputs(&inputs);
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <gpio_read_inputs>
		
		switch (state)
    1f56:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	09 2e       	mov	r0, r25
    1f60:	00 0c       	add	r0, r0
    1f62:	aa 0b       	sbc	r26, r26
    1f64:	bb 0b       	sbc	r27, r27
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	26 e0       	ldi	r18, 0x06	; 6
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	84 1b       	sub	r24, r20
    1f70:	95 0b       	sbc	r25, r21
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	58 f3       	brcs	.-42     	; 0x1f4e <main+0x9a>
    1f78:	87 5b       	subi	r24, 0xB7	; 183
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__tablejump2__>
		{
			case INIT:
				state = CALIBRATE;
    1f82:	84 e0       	ldi	r24, 0x04	; 4
    1f84:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
			break;
    1f88:	6c c1       	rjmp	.+728    	; 0x2262 <main+0x3ae>
			
			case CALIBRATE:
				counter = 0;
    1f8a:	1e 82       	std	Y+6, r1	; 0x06
    1f8c:	1d 82       	std	Y+5, r1	; 0x05
				cj125_set_calibration_mode();
    1f8e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <cj125_set_calibration_mode>
				while (counter < CJ125_CALIBRATION_SAMPLE_COUNT)
    1f92:	2f c0       	rjmp	.+94     	; 0x1ff2 <main+0x13e>
				{
					inputs.UA_opt += (adc_ua() + inputs.UOffset);
    1f94:	0e 94 cd 00 	call	0x19a	; 0x19a <adc_ua>
    1f98:	9c 01       	movw	r18, r24
    1f9a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1f9e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1faa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1fb6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					inputs.UR_opt += (adc_ur() + inputs.UOffset);
    1fba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <adc_ur>
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1fc4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    1fc8:	82 0f       	add	r24, r18
    1fca:	93 1f       	adc	r25, r19
    1fcc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    1fd0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1fd4:	82 0f       	add	r24, r18
    1fd6:	93 1f       	adc	r25, r19
    1fd8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1fdc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
					timer_delay_ms(10);
    1fe0:	8a e0       	ldi	r24, 0x0A	; 10
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <timer_delay_ms>
					counter++;
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
			break;
			
			case CALIBRATE:
				counter = 0;
				cj125_set_calibration_mode();
				while (counter < CJ125_CALIBRATION_SAMPLE_COUNT)
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	0a 97       	sbiw	r24, 0x0a	; 10
    1ff8:	6c f2       	brlt	.-102    	; 0x1f94 <main+0xe0>
					inputs.UR_opt += (adc_ur() + inputs.UOffset);
					timer_delay_ms(10);
					counter++;
				}
				
				inputs.UA_opt /= CJ125_CALIBRATION_SAMPLE_COUNT;
    1ffa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1ffe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2002:	9c 01       	movw	r18, r24
    2004:	ad ec       	ldi	r26, 0xCD	; 205
    2006:	bc ec       	ldi	r27, 0xCC	; 204
    2008:	0e 94 b2 13 	call	0x2764	; 0x2764 <__umulhisi3>
    200c:	96 95       	lsr	r25
    200e:	87 95       	ror	r24
    2010:	96 95       	lsr	r25
    2012:	87 95       	ror	r24
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    201c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
				inputs.UR_opt /= CJ125_CALIBRATION_SAMPLE_COUNT;
    2020:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    2024:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    2028:	9c 01       	movw	r18, r24
    202a:	ad ec       	ldi	r26, 0xCD	; 205
    202c:	bc ec       	ldi	r27, 0xCC	; 204
    202e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__umulhisi3>
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	96 95       	lsr	r25
    2038:	87 95       	ror	r24
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    2042:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
				
				// go to normal mode, ampl. 8x
				cj125_end_calibration_mode_v8();
    2046:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <cj125_end_calibration_mode_v8>
				
				state = CONDENSATE;
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
				
			break;
    2050:	08 c1       	rjmp	.+528    	; 0x2262 <main+0x3ae>
			
			case CONDENSATE:
				// heating the probe on 1.5v for 5 seconds
				heater_voltage = 1500;
    2052:	8c ed       	ldi	r24, 0xDC	; 220
    2054:	95 e0       	ldi	r25, 0x05	; 5
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
				pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <calculate_pwm_for_voltage>
    2062:	9a 87       	std	Y+10, r25	; 0x0a
    2064:	89 87       	std	Y+9, r24	; 0x09
				pwm_set_duty(pwm_duty);
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <pwm_set_duty>
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
    206e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    2072:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    2076:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    207a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	9c 01       	movw	r18, r24
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	85 ef       	ldi	r24, 0xF5	; 245
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	dc 01       	movw	r26, r24
    208e:	0e 94 c1 13 	call	0x2782	; 0x2782 <__muluhisi3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	07 2e       	mov	r0, r23
    2098:	7a e0       	ldi	r23, 0x0A	; 10
    209a:	b6 95       	lsr	r27
    209c:	a7 95       	ror	r26
    209e:	97 95       	ror	r25
    20a0:	87 95       	ror	r24
    20a2:	7a 95       	dec	r23
    20a4:	d1 f7       	brne	.-12     	; 0x209a <main+0x1e6>
    20a6:	70 2d       	mov	r23, r0
    20a8:	89 8b       	std	Y+17, r24	; 0x11
				pt_data[5] = 15;
    20aa:	8f e0       	ldi	r24, 0x0F	; 15
    20ac:	8a 8b       	std	Y+18, r24	; 0x12
				pt_data[6] = (1 << 1);	// bosch lsu4.9
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	8b 8b       	std	Y+19, r24	; 0x13
				pt_data[7] = 0xf;	// evap startup
    20b2:	8f e0       	ldi	r24, 0x0F	; 15
    20b4:	8c 8b       	std	Y+20, r24	; 0x14
				
				// stay for 5 seconds in this case and send every 10ms a can message
				for (int i = 0; i <= 500; i++)
    20b6:	18 86       	std	Y+8, r1	; 0x08
    20b8:	1f 82       	std	Y+7, r1	; 0x07
    20ba:	17 c0       	rjmp	.+46     	; 0x20ea <main+0x236>
				{
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    20bc:	00 00       	nop
    20be:	ce 01       	movw	r24, r28
    20c0:	45 96       	adiw	r24, 0x15	; 21
    20c2:	0e 94 18 02 	call	0x430	; 0x430 <can_cmd>
    20c6:	88 23       	and	r24, r24
    20c8:	d1 f7       	brne	.-12     	; 0x20be <main+0x20a>
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
    20ca:	00 00       	nop
    20cc:	ce 01       	movw	r24, r28
    20ce:	45 96       	adiw	r24, 0x15	; 21
    20d0:	0e 94 ae 0c 	call	0x195c	; 0x195c <can_get_status>
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	d1 f3       	breq	.-12     	; 0x20cc <main+0x218>
					timer_delay_ms(10);					
    20d8:	8a e0       	ldi	r24, 0x0A	; 10
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <timer_delay_ms>
				pt_data[5] = 15;
				pt_data[6] = (1 << 1);	// bosch lsu4.9
				pt_data[7] = 0xf;	// evap startup
				
				// stay for 5 seconds in this case and send every 10ms a can message
				for (int i = 0; i <= 500; i++)
    20e0:	8f 81       	ldd	r24, Y+7	; 0x07
    20e2:	98 85       	ldd	r25, Y+8	; 0x08
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	8f 81       	ldd	r24, Y+7	; 0x07
    20ec:	98 85       	ldd	r25, Y+8	; 0x08
    20ee:	85 3f       	cpi	r24, 0xF5	; 245
    20f0:	91 40       	sbci	r25, 0x01	; 1
    20f2:	24 f3       	brlt	.-56     	; 0x20bc <main+0x208>
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
					timer_delay_ms(10);					
				}
				
				state = PREHEATING;
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
				
			break;
    20fa:	b3 c0       	rjmp	.+358    	; 0x2262 <main+0x3ae>
			
			case PREHEATING:
				// bring the probe on temperature, start at 8v and go up to 13v with 0.4v/sec
				heater_voltage = 8000;
    20fc:	80 e4       	ldi	r24, 0x40	; 64
    20fe:	9f e1       	ldi	r25, 0x1F	; 31
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
				gpio_read_inputs(&inputs);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <gpio_read_inputs>
				pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <calculate_pwm_for_voltage>
    2114:	9a 87       	std	Y+10, r25	; 0x0a
    2116:	89 87       	std	Y+9, r24	; 0x09
				// pwm_set_duty(pwm_duty);
			
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
    2118:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    211c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    2120:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    2124:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	9c 01       	movw	r18, r24
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	85 ef       	ldi	r24, 0xF5	; 245
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	dc 01       	movw	r26, r24
    2138:	0e 94 c1 13 	call	0x2782	; 0x2782 <__muluhisi3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	07 2e       	mov	r0, r23
    2142:	7a e0       	ldi	r23, 0x0A	; 10
    2144:	b6 95       	lsr	r27
    2146:	a7 95       	ror	r26
    2148:	97 95       	ror	r25
    214a:	87 95       	ror	r24
    214c:	7a 95       	dec	r23
    214e:	d1 f7       	brne	.-12     	; 0x2144 <main+0x290>
    2150:	70 2d       	mov	r23, r0
    2152:	89 8b       	std	Y+17, r24	; 0x11
				pt_data[6] = (1 << 1);	// bosch lsu4.9
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	8b 8b       	std	Y+19, r24	; 0x13
				pt_data[7] = 0x1;	// warm up
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	8c 8b       	std	Y+20, r24	; 0x14
				
				while (heater_voltage < 13000)
    215c:	72 c0       	rjmp	.+228    	; 0x2242 <main+0x38e>
				{
					
					// increate heater voltage every second
					if (timer_value != 0 && timer_value % 1000 == 0)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	89 2b       	or	r24, r25
    2164:	d9 f1       	breq	.+118    	; 0x21dc <main+0x328>
    2166:	49 81       	ldd	r20, Y+1	; 0x01
    2168:	5a 81       	ldd	r21, Y+2	; 0x02
    216a:	ca 01       	movw	r24, r20
    216c:	96 95       	lsr	r25
    216e:	87 95       	ror	r24
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	96 95       	lsr	r25
    2176:	87 95       	ror	r24
    2178:	9c 01       	movw	r18, r24
    217a:	a5 ec       	ldi	r26, 0xC5	; 197
    217c:	b0 e2       	ldi	r27, 0x20	; 32
    217e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__umulhisi3>
    2182:	92 95       	swap	r25
    2184:	82 95       	swap	r24
    2186:	8f 70       	andi	r24, 0x0F	; 15
    2188:	89 27       	eor	r24, r25
    218a:	9f 70       	andi	r25, 0x0F	; 15
    218c:	89 27       	eor	r24, r25
    218e:	68 ee       	ldi	r22, 0xE8	; 232
    2190:	73 e0       	ldi	r23, 0x03	; 3
    2192:	86 9f       	mul	r24, r22
    2194:	90 01       	movw	r18, r0
    2196:	87 9f       	mul	r24, r23
    2198:	30 0d       	add	r19, r0
    219a:	96 9f       	mul	r25, r22
    219c:	30 0d       	add	r19, r0
    219e:	11 24       	eor	r1, r1
    21a0:	ca 01       	movw	r24, r20
    21a2:	82 1b       	sub	r24, r18
    21a4:	93 0b       	sbc	r25, r19
    21a6:	89 2b       	or	r24, r25
    21a8:	c9 f4       	brne	.+50     	; 0x21dc <main+0x328>
					{
						heater_voltage += 400;
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	80 57       	subi	r24, 0x70	; 112
    21b0:	9e 4f       	sbci	r25, 0xFE	; 254
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
						gpio_read_inputs(&inputs);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <gpio_read_inputs>
						// limit heater voltage to 13v
						if (heater_voltage > 13000) heater_voltage = 13000;
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	89 3c       	cpi	r24, 0xC9	; 201
    21c4:	92 43       	sbci	r25, 0x32	; 50
    21c6:	20 f0       	brcs	.+8      	; 0x21d0 <main+0x31c>
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	92 e3       	ldi	r25, 0x32	; 50
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
						pwm_duty = calculate_pwm_for_voltage(heater_voltage);
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <calculate_pwm_for_voltage>
    21d8:	9a 87       	std	Y+10, r25	; 0x0a
    21da:	89 87       	std	Y+9, r24	; 0x09
						// pwm_set_duty(pwm_duty);
					}
					
					pt_data[5] = (uint8_t)((float) heater_voltage *0.01f);
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	cc 01       	movw	r24, r24
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatunsisf>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	37 ed       	ldi	r19, 0xD7	; 215
    21f6:	43 e2       	ldi	r20, 0x23	; 35
    21f8:	5c e3       	ldi	r21, 0x3C	; 60
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 3f 13 	call	0x267e	; 0x267e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8a 8b       	std	Y+18, r24	; 0x12
					timer_delay_ms(10);
    2214:	8a e0       	ldi	r24, 0x0A	; 10
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <timer_delay_ms>
					timer_value += 10;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	0a 96       	adiw	r24, 0x0a	; 10
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
					
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    2226:	00 00       	nop
    2228:	ce 01       	movw	r24, r28
    222a:	45 96       	adiw	r24, 0x15	; 21
    222c:	0e 94 18 02 	call	0x430	; 0x430 <can_cmd>
    2230:	88 23       	and	r24, r24
    2232:	d1 f7       	brne	.-12     	; 0x2228 <main+0x374>
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
    2234:	00 00       	nop
    2236:	ce 01       	movw	r24, r28
    2238:	45 96       	adiw	r24, 0x15	; 21
    223a:	0e 94 ae 0c 	call	0x195c	; 0x195c <can_get_status>
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	d1 f3       	breq	.-12     	; 0x2236 <main+0x382>
			
				pt_data[4] = (uint8_t)((uint32_t)(inputs.UBat + inputs.UOffset)* 245UL / 1024UL);
				pt_data[6] = (1 << 1);	// bosch lsu4.9
				pt_data[7] = 0x1;	// warm up
				
				while (heater_voltage < 13000)
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	88 3c       	cpi	r24, 0xC8	; 200
    2248:	92 43       	sbci	r25, 0x32	; 50
    224a:	08 f4       	brcc	.+2      	; 0x224e <main+0x39a>
    224c:	88 cf       	rjmp	.-240    	; 0x215e <main+0x2aa>
					while(can_cmd(&msg) != CAN_CMD_ACCEPTED); // wait for MOb to configure
					while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
				}
				
				// preheating done, go to run
				state = RUNNING;
    224e:	85 e0       	ldi	r24, 0x05	; 5
    2250:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
			
			break;
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <main+0x3ae>
			
			
			case ERROR:
			case NO_PROBE:
			
				pwm_duty = 10;
    2256:	8a e0       	ldi	r24, 0x0A	; 10
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a 87       	std	Y+10, r25	; 0x0a
    225c:	89 87       	std	Y+9, r24	; 0x09
			
			break;
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <main+0x3ae>
			break;
			
			case RUNNING:
			// TODO: PID
			
			break;
    2260:	00 00       	nop
		
		power_ok = is_ubat_ok();
		
		timer_delay_ms(200);
		*/
	}
    2262:	75 ce       	rjmp	.-790    	; 0x1f4e <main+0x9a>

00002264 <pwm_init>:
 */ 

#include "pwm.h"

void pwm_init (void)
{
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	// pin pc1 (OC1B, Timer 1 output compare B) connected to probe heater
	// fast pwm mode, prescaler 64,  top 0x03ff (1023) = 244Hz
	// pwm mode 7, 10-bit resolution
	// clear oc1b on compare match
	
	TCCR1A |= (1 << WGM11)|(1 << WGM10)|(1 << COM1B1);
    226c:	80 e8       	ldi	r24, 0x80	; 128
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	20 e8       	ldi	r18, 0x80	; 128
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	f9 01       	movw	r30, r18
    2276:	20 81       	ld	r18, Z
    2278:	23 62       	ori	r18, 0x23	; 35
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
    227e:	81 e8       	ldi	r24, 0x81	; 129
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	21 e8       	ldi	r18, 0x81	; 129
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	f9 01       	movw	r30, r18
    2288:	20 81       	ld	r18, Z
    228a:	2b 60       	ori	r18, 0x0B	; 11
    228c:	fc 01       	movw	r30, r24
    228e:	20 83       	st	Z, r18
	pwm_set_duty(0);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 50 11 	call	0x22a0	; 0x22a0 <pwm_set_duty>
}
    2298:	00 00       	nop
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	08 95       	ret

000022a0 <pwm_set_duty>:

void pwm_set_duty (uint16_t duty)
{
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <pwm_set_duty+0x6>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = duty;
    22ae:	8a e8       	ldi	r24, 0x8A	; 138
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	29 81       	ldd	r18, Y+1	; 0x01
    22b4:	3a 81       	ldd	r19, Y+2	; 0x02
    22b6:	fc 01       	movw	r30, r24
    22b8:	31 83       	std	Z+1, r19	; 0x01
    22ba:	20 83       	st	Z, r18
    22bc:	00 00       	nop
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	08 95       	ret

000022c8 <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <__make_u16t+0x6>
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	38 2f       	mov	r19, r24
    22de:	22 27       	eor	r18, r18
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	82 2b       	or	r24, r18
    22e8:	93 2b       	or	r25, r19
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	// enable spi, 2MHz (div 128), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPR1)|(1 << SPR0);
    22fc:	8c e4       	ldi	r24, 0x4C	; 76
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	2c e4       	ldi	r18, 0x4C	; 76
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	f9 01       	movw	r30, r18
    2306:	20 81       	ld	r18, Z
    2308:	27 65       	ori	r18, 0x57	; 87
    230a:	fc 01       	movw	r30, r24
    230c:	20 83       	st	Z, r18
}
    230e:	00 00       	nop
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	00 d0       	rcall	.+0      	; 0x231c <spi_read_write+0x6>
    231c:	00 d0       	rcall	.+0      	; 0x231e <spi_read_write+0x8>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
    2326:	8b e2       	ldi	r24, 0x2B	; 43
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	2b e2       	ldi	r18, 0x2B	; 43
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	f9 01       	movw	r30, r18
    2330:	20 81       	ld	r18, Z
    2332:	2f 7d       	andi	r18, 0xDF	; 223
    2334:	fc 01       	movw	r30, r24
    2336:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
    2338:	8e e4       	ldi	r24, 0x4E	; 78
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	23 2f       	mov	r18, r19
    2342:	33 27       	eor	r19, r19
    2344:	fc 01       	movw	r30, r24
    2346:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    2348:	00 00       	nop
    234a:	8d e4       	ldi	r24, 0x4D	; 77
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	fc 01       	movw	r30, r24
    2350:	80 81       	ld	r24, Z
    2352:	88 23       	and	r24, r24
    2354:	d4 f7       	brge	.-12     	; 0x234a <spi_read_write+0x34>
	byte1 = SPDR;
    2356:	8e e4       	ldi	r24, 0x4E	; 78
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	fc 01       	movw	r30, r24
    235c:	80 81       	ld	r24, Z
    235e:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	8f 73       	andi	r24, 0x3F	; 63
    2364:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
    2366:	8e e4       	ldi	r24, 0x4E	; 78
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	fc 01       	movw	r30, r24
    236e:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    2370:	00 00       	nop
    2372:	8d e4       	ldi	r24, 0x4D	; 77
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	fc 01       	movw	r30, r24
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	d4 f7       	brge	.-12     	; 0x2372 <spi_read_write+0x5c>
	byte2 = SPDR;
    237e:	8e e4       	ldi	r24, 0x4E	; 78
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	fc 01       	movw	r30, r24
    2384:	80 81       	ld	r24, Z
    2386:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
    2388:	8b e2       	ldi	r24, 0x2B	; 43
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	2b e2       	ldi	r18, 0x2B	; 43
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	f9 01       	movw	r30, r18
    2392:	20 81       	ld	r18, Z
    2394:	20 62       	ori	r18, 0x20	; 32
    2396:	fc 01       	movw	r30, r24
    2398:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
    239a:	6a 81       	ldd	r22, Y+2	; 0x02
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__make_u16t>
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <timer_delay_ms>:
	TIMSK0 |= (1 << TOIE0);
	
}

void timer_delay_ms (uint16_t delay)
{
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <timer_delay_ms+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		TCNT0 = 6;
    23be:	86 e4       	ldi	r24, 0x46	; 70
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	26 e0       	ldi	r18, 0x06	; 6
    23c4:	fc 01       	movw	r30, r24
    23c6:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);
    23c8:	85 e4       	ldi	r24, 0x45	; 69
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	25 e4       	ldi	r18, 0x45	; 69
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	f9 01       	movw	r30, r18
    23d2:	20 81       	ld	r18, Z
    23d4:	23 60       	ori	r18, 0x03	; 3
    23d6:	fc 01       	movw	r30, r24
    23d8:	20 83       	st	Z, r18
		while ((TIFR0 & (1 << TOV0)) == 0);
    23da:	00 00       	nop
    23dc:	85 e3       	ldi	r24, 0x35	; 53
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	fc 01       	movw	r30, r24
    23e2:	80 81       	ld	r24, Z
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	99 27       	eor	r25, r25
    23ec:	89 2b       	or	r24, r25
    23ee:	b1 f3       	breq	.-20     	; 0x23dc <timer_delay_ms+0x2c>
		TIFR0 |= (1 << TOV0);
    23f0:	85 e3       	ldi	r24, 0x35	; 53
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	25 e3       	ldi	r18, 0x35	; 53
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	f9 01       	movw	r30, r18
    23fa:	20 81       	ld	r18, Z
    23fc:	21 60       	ori	r18, 0x01	; 1
    23fe:	fc 01       	movw	r30, r24
    2400:	20 83       	st	Z, r18
		delay--;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
	} while (delay > 0);
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	89 2b       	or	r24, r25
    2412:	a9 f6       	brne	.-86     	; 0x23be <timer_delay_ms+0xe>
}
    2414:	00 00       	nop
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <__divsf3>:
    2420:	0e 94 24 12 	call	0x2448	; 0x2448 <__divsf3x>
    2424:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_round>
    2428:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fp_pscB>
    242c:	58 f0       	brcs	.+22     	; 0x2444 <__divsf3+0x24>
    242e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__fp_pscA>
    2432:	40 f0       	brcs	.+16     	; 0x2444 <__divsf3+0x24>
    2434:	29 f4       	brne	.+10     	; 0x2440 <__divsf3+0x20>
    2436:	5f 3f       	cpi	r21, 0xFF	; 255
    2438:	29 f0       	breq	.+10     	; 0x2444 <__divsf3+0x24>
    243a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__fp_inf>
    243e:	51 11       	cpse	r21, r1
    2440:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    2444:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__fp_nan>

00002448 <__divsf3x>:
    2448:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    244c:	68 f3       	brcs	.-38     	; 0x2428 <__divsf3+0x8>

0000244e <__divsf3_pse>:
    244e:	99 23       	and	r25, r25
    2450:	b1 f3       	breq	.-20     	; 0x243e <__divsf3+0x1e>
    2452:	55 23       	and	r21, r21
    2454:	91 f3       	breq	.-28     	; 0x243a <__divsf3+0x1a>
    2456:	95 1b       	sub	r25, r21
    2458:	55 0b       	sbc	r21, r21
    245a:	bb 27       	eor	r27, r27
    245c:	aa 27       	eor	r26, r26
    245e:	62 17       	cp	r22, r18
    2460:	73 07       	cpc	r23, r19
    2462:	84 07       	cpc	r24, r20
    2464:	38 f0       	brcs	.+14     	; 0x2474 <__divsf3_pse+0x26>
    2466:	9f 5f       	subi	r25, 0xFF	; 255
    2468:	5f 4f       	sbci	r21, 0xFF	; 255
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	44 1f       	adc	r20, r20
    2470:	aa 1f       	adc	r26, r26
    2472:	a9 f3       	breq	.-22     	; 0x245e <__divsf3_pse+0x10>
    2474:	35 d0       	rcall	.+106    	; 0x24e0 <__divsf3_pse+0x92>
    2476:	0e 2e       	mov	r0, r30
    2478:	3a f0       	brmi	.+14     	; 0x2488 <__divsf3_pse+0x3a>
    247a:	e0 e8       	ldi	r30, 0x80	; 128
    247c:	32 d0       	rcall	.+100    	; 0x24e2 <__divsf3_pse+0x94>
    247e:	91 50       	subi	r25, 0x01	; 1
    2480:	50 40       	sbci	r21, 0x00	; 0
    2482:	e6 95       	lsr	r30
    2484:	00 1c       	adc	r0, r0
    2486:	ca f7       	brpl	.-14     	; 0x247a <__divsf3_pse+0x2c>
    2488:	2b d0       	rcall	.+86     	; 0x24e0 <__divsf3_pse+0x92>
    248a:	fe 2f       	mov	r31, r30
    248c:	29 d0       	rcall	.+82     	; 0x24e0 <__divsf3_pse+0x92>
    248e:	66 0f       	add	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	88 1f       	adc	r24, r24
    2494:	bb 1f       	adc	r27, r27
    2496:	26 17       	cp	r18, r22
    2498:	37 07       	cpc	r19, r23
    249a:	48 07       	cpc	r20, r24
    249c:	ab 07       	cpc	r26, r27
    249e:	b0 e8       	ldi	r27, 0x80	; 128
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <__divsf3_pse+0x56>
    24a2:	bb 0b       	sbc	r27, r27
    24a4:	80 2d       	mov	r24, r0
    24a6:	bf 01       	movw	r22, r30
    24a8:	ff 27       	eor	r31, r31
    24aa:	93 58       	subi	r25, 0x83	; 131
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	3a f0       	brmi	.+14     	; 0x24be <__divsf3_pse+0x70>
    24b0:	9e 3f       	cpi	r25, 0xFE	; 254
    24b2:	51 05       	cpc	r21, r1
    24b4:	78 f0       	brcs	.+30     	; 0x24d4 <__divsf3_pse+0x86>
    24b6:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__fp_inf>
    24ba:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    24be:	5f 3f       	cpi	r21, 0xFF	; 255
    24c0:	e4 f3       	brlt	.-8      	; 0x24ba <__divsf3_pse+0x6c>
    24c2:	98 3e       	cpi	r25, 0xE8	; 232
    24c4:	d4 f3       	brlt	.-12     	; 0x24ba <__divsf3_pse+0x6c>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b7 95       	ror	r27
    24ce:	f7 95       	ror	r31
    24d0:	9f 5f       	subi	r25, 0xFF	; 255
    24d2:	c9 f7       	brne	.-14     	; 0x24c6 <__divsf3_pse+0x78>
    24d4:	88 0f       	add	r24, r24
    24d6:	91 1d       	adc	r25, r1
    24d8:	96 95       	lsr	r25
    24da:	87 95       	ror	r24
    24dc:	97 f9       	bld	r25, 7
    24de:	08 95       	ret
    24e0:	e1 e0       	ldi	r30, 0x01	; 1
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	bb 1f       	adc	r27, r27
    24ea:	62 17       	cp	r22, r18
    24ec:	73 07       	cpc	r23, r19
    24ee:	84 07       	cpc	r24, r20
    24f0:	ba 07       	cpc	r27, r26
    24f2:	20 f0       	brcs	.+8      	; 0x24fc <__divsf3_pse+0xae>
    24f4:	62 1b       	sub	r22, r18
    24f6:	73 0b       	sbc	r23, r19
    24f8:	84 0b       	sbc	r24, r20
    24fa:	ba 0b       	sbc	r27, r26
    24fc:	ee 1f       	adc	r30, r30
    24fe:	88 f7       	brcc	.-30     	; 0x24e2 <__divsf3_pse+0x94>
    2500:	e0 95       	com	r30
    2502:	08 95       	ret

00002504 <__fixunssfsi>:
    2504:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_splitA>
    2508:	88 f0       	brcs	.+34     	; 0x252c <__fixunssfsi+0x28>
    250a:	9f 57       	subi	r25, 0x7F	; 127
    250c:	98 f0       	brcs	.+38     	; 0x2534 <__fixunssfsi+0x30>
    250e:	b9 2f       	mov	r27, r25
    2510:	99 27       	eor	r25, r25
    2512:	b7 51       	subi	r27, 0x17	; 23
    2514:	b0 f0       	brcs	.+44     	; 0x2542 <__fixunssfsi+0x3e>
    2516:	e1 f0       	breq	.+56     	; 0x2550 <__fixunssfsi+0x4c>
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	1a f0       	brmi	.+6      	; 0x2528 <__fixunssfsi+0x24>
    2522:	ba 95       	dec	r27
    2524:	c9 f7       	brne	.-14     	; 0x2518 <__fixunssfsi+0x14>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <__fixunssfsi+0x4c>
    2528:	b1 30       	cpi	r27, 0x01	; 1
    252a:	91 f0       	breq	.+36     	; 0x2550 <__fixunssfsi+0x4c>
    252c:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_zero>
    2530:	b1 e0       	ldi	r27, 0x01	; 1
    2532:	08 95       	ret
    2534:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_zero>
    2538:	67 2f       	mov	r22, r23
    253a:	78 2f       	mov	r23, r24
    253c:	88 27       	eor	r24, r24
    253e:	b8 5f       	subi	r27, 0xF8	; 248
    2540:	39 f0       	breq	.+14     	; 0x2550 <__fixunssfsi+0x4c>
    2542:	b9 3f       	cpi	r27, 0xF9	; 249
    2544:	cc f3       	brlt	.-14     	; 0x2538 <__fixunssfsi+0x34>
    2546:	86 95       	lsr	r24
    2548:	77 95       	ror	r23
    254a:	67 95       	ror	r22
    254c:	b3 95       	inc	r27
    254e:	d9 f7       	brne	.-10     	; 0x2546 <__fixunssfsi+0x42>
    2550:	3e f4       	brtc	.+14     	; 0x2560 <__fixunssfsi+0x5c>
    2552:	90 95       	com	r25
    2554:	80 95       	com	r24
    2556:	70 95       	com	r23
    2558:	61 95       	neg	r22
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	8f 4f       	sbci	r24, 0xFF	; 255
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	08 95       	ret

00002562 <__floatunsisf>:
    2562:	e8 94       	clt
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <__floatsisf+0x12>

00002566 <__floatsisf>:
    2566:	97 fb       	bst	r25, 7
    2568:	3e f4       	brtc	.+14     	; 0x2578 <__floatsisf+0x12>
    256a:	90 95       	com	r25
    256c:	80 95       	com	r24
    256e:	70 95       	com	r23
    2570:	61 95       	neg	r22
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	8f 4f       	sbci	r24, 0xFF	; 255
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	99 23       	and	r25, r25
    257a:	a9 f0       	breq	.+42     	; 0x25a6 <__floatsisf+0x40>
    257c:	f9 2f       	mov	r31, r25
    257e:	96 e9       	ldi	r25, 0x96	; 150
    2580:	bb 27       	eor	r27, r27
    2582:	93 95       	inc	r25
    2584:	f6 95       	lsr	r31
    2586:	87 95       	ror	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	b7 95       	ror	r27
    258e:	f1 11       	cpse	r31, r1
    2590:	f8 cf       	rjmp	.-16     	; 0x2582 <__floatsisf+0x1c>
    2592:	fa f4       	brpl	.+62     	; 0x25d2 <__floatsisf+0x6c>
    2594:	bb 0f       	add	r27, r27
    2596:	11 f4       	brne	.+4      	; 0x259c <__floatsisf+0x36>
    2598:	60 ff       	sbrs	r22, 0
    259a:	1b c0       	rjmp	.+54     	; 0x25d2 <__floatsisf+0x6c>
    259c:	6f 5f       	subi	r22, 0xFF	; 255
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	8f 4f       	sbci	r24, 0xFF	; 255
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <__floatsisf+0x6c>
    25a6:	88 23       	and	r24, r24
    25a8:	11 f0       	breq	.+4      	; 0x25ae <__floatsisf+0x48>
    25aa:	96 e9       	ldi	r25, 0x96	; 150
    25ac:	11 c0       	rjmp	.+34     	; 0x25d0 <__floatsisf+0x6a>
    25ae:	77 23       	and	r23, r23
    25b0:	21 f0       	breq	.+8      	; 0x25ba <__floatsisf+0x54>
    25b2:	9e e8       	ldi	r25, 0x8E	; 142
    25b4:	87 2f       	mov	r24, r23
    25b6:	76 2f       	mov	r23, r22
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <__floatsisf+0x5e>
    25ba:	66 23       	and	r22, r22
    25bc:	71 f0       	breq	.+28     	; 0x25da <__floatsisf+0x74>
    25be:	96 e8       	ldi	r25, 0x86	; 134
    25c0:	86 2f       	mov	r24, r22
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	2a f0       	brmi	.+10     	; 0x25d2 <__floatsisf+0x6c>
    25c8:	9a 95       	dec	r25
    25ca:	66 0f       	add	r22, r22
    25cc:	77 1f       	adc	r23, r23
    25ce:	88 1f       	adc	r24, r24
    25d0:	da f7       	brpl	.-10     	; 0x25c8 <__floatsisf+0x62>
    25d2:	88 0f       	add	r24, r24
    25d4:	96 95       	lsr	r25
    25d6:	87 95       	ror	r24
    25d8:	97 f9       	bld	r25, 7
    25da:	08 95       	ret

000025dc <__fp_inf>:
    25dc:	97 f9       	bld	r25, 7
    25de:	9f 67       	ori	r25, 0x7F	; 127
    25e0:	80 e8       	ldi	r24, 0x80	; 128
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	08 95       	ret

000025e8 <__fp_nan>:
    25e8:	9f ef       	ldi	r25, 0xFF	; 255
    25ea:	80 ec       	ldi	r24, 0xC0	; 192
    25ec:	08 95       	ret

000025ee <__fp_pscA>:
    25ee:	00 24       	eor	r0, r0
    25f0:	0a 94       	dec	r0
    25f2:	16 16       	cp	r1, r22
    25f4:	17 06       	cpc	r1, r23
    25f6:	18 06       	cpc	r1, r24
    25f8:	09 06       	cpc	r0, r25
    25fa:	08 95       	ret

000025fc <__fp_pscB>:
    25fc:	00 24       	eor	r0, r0
    25fe:	0a 94       	dec	r0
    2600:	12 16       	cp	r1, r18
    2602:	13 06       	cpc	r1, r19
    2604:	14 06       	cpc	r1, r20
    2606:	05 06       	cpc	r0, r21
    2608:	08 95       	ret

0000260a <__fp_round>:
    260a:	09 2e       	mov	r0, r25
    260c:	03 94       	inc	r0
    260e:	00 0c       	add	r0, r0
    2610:	11 f4       	brne	.+4      	; 0x2616 <__fp_round+0xc>
    2612:	88 23       	and	r24, r24
    2614:	52 f0       	brmi	.+20     	; 0x262a <__fp_round+0x20>
    2616:	bb 0f       	add	r27, r27
    2618:	40 f4       	brcc	.+16     	; 0x262a <__fp_round+0x20>
    261a:	bf 2b       	or	r27, r31
    261c:	11 f4       	brne	.+4      	; 0x2622 <__fp_round+0x18>
    261e:	60 ff       	sbrs	r22, 0
    2620:	04 c0       	rjmp	.+8      	; 0x262a <__fp_round+0x20>
    2622:	6f 5f       	subi	r22, 0xFF	; 255
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	8f 4f       	sbci	r24, 0xFF	; 255
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	08 95       	ret

0000262c <__fp_split3>:
    262c:	57 fd       	sbrc	r21, 7
    262e:	90 58       	subi	r25, 0x80	; 128
    2630:	44 0f       	add	r20, r20
    2632:	55 1f       	adc	r21, r21
    2634:	59 f0       	breq	.+22     	; 0x264c <__fp_splitA+0x10>
    2636:	5f 3f       	cpi	r21, 0xFF	; 255
    2638:	71 f0       	breq	.+28     	; 0x2656 <__fp_splitA+0x1a>
    263a:	47 95       	ror	r20

0000263c <__fp_splitA>:
    263c:	88 0f       	add	r24, r24
    263e:	97 fb       	bst	r25, 7
    2640:	99 1f       	adc	r25, r25
    2642:	61 f0       	breq	.+24     	; 0x265c <__fp_splitA+0x20>
    2644:	9f 3f       	cpi	r25, 0xFF	; 255
    2646:	79 f0       	breq	.+30     	; 0x2666 <__fp_splitA+0x2a>
    2648:	87 95       	ror	r24
    264a:	08 95       	ret
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	14 06       	cpc	r1, r20
    2652:	55 1f       	adc	r21, r21
    2654:	f2 cf       	rjmp	.-28     	; 0x263a <__fp_split3+0xe>
    2656:	46 95       	lsr	r20
    2658:	f1 df       	rcall	.-30     	; 0x263c <__fp_splitA>
    265a:	08 c0       	rjmp	.+16     	; 0x266c <__fp_splitA+0x30>
    265c:	16 16       	cp	r1, r22
    265e:	17 06       	cpc	r1, r23
    2660:	18 06       	cpc	r1, r24
    2662:	99 1f       	adc	r25, r25
    2664:	f1 cf       	rjmp	.-30     	; 0x2648 <__fp_splitA+0xc>
    2666:	86 95       	lsr	r24
    2668:	71 05       	cpc	r23, r1
    266a:	61 05       	cpc	r22, r1
    266c:	08 94       	sec
    266e:	08 95       	ret

00002670 <__fp_zero>:
    2670:	e8 94       	clt

00002672 <__fp_szero>:
    2672:	bb 27       	eor	r27, r27
    2674:	66 27       	eor	r22, r22
    2676:	77 27       	eor	r23, r23
    2678:	cb 01       	movw	r24, r22
    267a:	97 f9       	bld	r25, 7
    267c:	08 95       	ret

0000267e <__mulsf3>:
    267e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__mulsf3x>
    2682:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_round>
    2686:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__fp_pscA>
    268a:	38 f0       	brcs	.+14     	; 0x269a <__mulsf3+0x1c>
    268c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__fp_pscB>
    2690:	20 f0       	brcs	.+8      	; 0x269a <__mulsf3+0x1c>
    2692:	95 23       	and	r25, r21
    2694:	11 f0       	breq	.+4      	; 0x269a <__mulsf3+0x1c>
    2696:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__fp_inf>
    269a:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__fp_nan>
    269e:	11 24       	eor	r1, r1
    26a0:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>

000026a4 <__mulsf3x>:
    26a4:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_split3>
    26a8:	70 f3       	brcs	.-36     	; 0x2686 <__mulsf3+0x8>

000026aa <__mulsf3_pse>:
    26aa:	95 9f       	mul	r25, r21
    26ac:	c1 f3       	breq	.-16     	; 0x269e <__mulsf3+0x20>
    26ae:	95 0f       	add	r25, r21
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	55 1f       	adc	r21, r21
    26b4:	62 9f       	mul	r22, r18
    26b6:	f0 01       	movw	r30, r0
    26b8:	72 9f       	mul	r23, r18
    26ba:	bb 27       	eor	r27, r27
    26bc:	f0 0d       	add	r31, r0
    26be:	b1 1d       	adc	r27, r1
    26c0:	63 9f       	mul	r22, r19
    26c2:	aa 27       	eor	r26, r26
    26c4:	f0 0d       	add	r31, r0
    26c6:	b1 1d       	adc	r27, r1
    26c8:	aa 1f       	adc	r26, r26
    26ca:	64 9f       	mul	r22, r20
    26cc:	66 27       	eor	r22, r22
    26ce:	b0 0d       	add	r27, r0
    26d0:	a1 1d       	adc	r26, r1
    26d2:	66 1f       	adc	r22, r22
    26d4:	82 9f       	mul	r24, r18
    26d6:	22 27       	eor	r18, r18
    26d8:	b0 0d       	add	r27, r0
    26da:	a1 1d       	adc	r26, r1
    26dc:	62 1f       	adc	r22, r18
    26de:	73 9f       	mul	r23, r19
    26e0:	b0 0d       	add	r27, r0
    26e2:	a1 1d       	adc	r26, r1
    26e4:	62 1f       	adc	r22, r18
    26e6:	83 9f       	mul	r24, r19
    26e8:	a0 0d       	add	r26, r0
    26ea:	61 1d       	adc	r22, r1
    26ec:	22 1f       	adc	r18, r18
    26ee:	74 9f       	mul	r23, r20
    26f0:	33 27       	eor	r19, r19
    26f2:	a0 0d       	add	r26, r0
    26f4:	61 1d       	adc	r22, r1
    26f6:	23 1f       	adc	r18, r19
    26f8:	84 9f       	mul	r24, r20
    26fa:	60 0d       	add	r22, r0
    26fc:	21 1d       	adc	r18, r1
    26fe:	82 2f       	mov	r24, r18
    2700:	76 2f       	mov	r23, r22
    2702:	6a 2f       	mov	r22, r26
    2704:	11 24       	eor	r1, r1
    2706:	9f 57       	subi	r25, 0x7F	; 127
    2708:	50 40       	sbci	r21, 0x00	; 0
    270a:	9a f0       	brmi	.+38     	; 0x2732 <__mulsf3_pse+0x88>
    270c:	f1 f0       	breq	.+60     	; 0x274a <__mulsf3_pse+0xa0>
    270e:	88 23       	and	r24, r24
    2710:	4a f0       	brmi	.+18     	; 0x2724 <__mulsf3_pse+0x7a>
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	bb 1f       	adc	r27, r27
    2718:	66 1f       	adc	r22, r22
    271a:	77 1f       	adc	r23, r23
    271c:	88 1f       	adc	r24, r24
    271e:	91 50       	subi	r25, 0x01	; 1
    2720:	50 40       	sbci	r21, 0x00	; 0
    2722:	a9 f7       	brne	.-22     	; 0x270e <__mulsf3_pse+0x64>
    2724:	9e 3f       	cpi	r25, 0xFE	; 254
    2726:	51 05       	cpc	r21, r1
    2728:	80 f0       	brcs	.+32     	; 0x274a <__mulsf3_pse+0xa0>
    272a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__fp_inf>
    272e:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__fp_szero>
    2732:	5f 3f       	cpi	r21, 0xFF	; 255
    2734:	e4 f3       	brlt	.-8      	; 0x272e <__mulsf3_pse+0x84>
    2736:	98 3e       	cpi	r25, 0xE8	; 232
    2738:	d4 f3       	brlt	.-12     	; 0x272e <__mulsf3_pse+0x84>
    273a:	86 95       	lsr	r24
    273c:	77 95       	ror	r23
    273e:	67 95       	ror	r22
    2740:	b7 95       	ror	r27
    2742:	f7 95       	ror	r31
    2744:	e7 95       	ror	r30
    2746:	9f 5f       	subi	r25, 0xFF	; 255
    2748:	c1 f7       	brne	.-16     	; 0x273a <__mulsf3_pse+0x90>
    274a:	fe 2b       	or	r31, r30
    274c:	88 0f       	add	r24, r24
    274e:	91 1d       	adc	r25, r1
    2750:	96 95       	lsr	r25
    2752:	87 95       	ror	r24
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret

00002758 <__tablejump2__>:
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	05 90       	lpm	r0, Z+
    275e:	f4 91       	lpm	r31, Z
    2760:	e0 2d       	mov	r30, r0
    2762:	09 94       	ijmp

00002764 <__umulhisi3>:
    2764:	a2 9f       	mul	r26, r18
    2766:	b0 01       	movw	r22, r0
    2768:	b3 9f       	mul	r27, r19
    276a:	c0 01       	movw	r24, r0
    276c:	a3 9f       	mul	r26, r19
    276e:	70 0d       	add	r23, r0
    2770:	81 1d       	adc	r24, r1
    2772:	11 24       	eor	r1, r1
    2774:	91 1d       	adc	r25, r1
    2776:	b2 9f       	mul	r27, r18
    2778:	70 0d       	add	r23, r0
    277a:	81 1d       	adc	r24, r1
    277c:	11 24       	eor	r1, r1
    277e:	91 1d       	adc	r25, r1
    2780:	08 95       	ret

00002782 <__muluhisi3>:
    2782:	0e 94 b2 13 	call	0x2764	; 0x2764 <__umulhisi3>
    2786:	a5 9f       	mul	r26, r21
    2788:	90 0d       	add	r25, r0
    278a:	b4 9f       	mul	r27, r20
    278c:	90 0d       	add	r25, r0
    278e:	a4 9f       	mul	r26, r20
    2790:	80 0d       	add	r24, r0
    2792:	91 1d       	adc	r25, r1
    2794:	11 24       	eor	r1, r1
    2796:	08 95       	ret

00002798 <_exit>:
    2798:	f8 94       	cli

0000279a <__stop_program>:
    279a:	ff cf       	rjmp	.-2      	; 0x279a <__stop_program>
